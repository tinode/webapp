{"version":3,"file":"src_widgets_audio-recorder_jsx.dev.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/audio-recorder.jsx"],"sourcesContent":["// Audio recorder widget.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport AudioPlayer from './audio-player.jsx';\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=642012\n// It adds duration and SeekHead to the webm record.\nimport fixWebmDuration from 'webm-duration-fix';\n\nimport { intArrayToBase64 } from '../lib/blob-helpers.js'\nimport { secondsToTime } from '../lib/strformat';\nimport { KEYPRESS_DELAY, MAX_DURATION, MIN_DURATION } from '../config.js';\n\n// FFT resolution.\nconst BUFFER_SIZE = 256;\n// Make canvas bigger than the element size to reduce blurring.\nconst CANVAS_UPSCALING = 2.0;\n// Thickness of a visualization bar.\nconst LINE_WIDTH = 3 * CANVAS_UPSCALING;\n// Spacing between two visualization bars.\nconst SPACING = 2 * CANVAS_UPSCALING;\n// Duration represented by one visualization bar.\nconst MILLIS_PER_BAR = 100;\n// Color of histogram bars\nconst BAR_COLOR = '#BBBD';\n// Vertical scaling for visualization bars.\nconst BAR_SCALE = 64.0;\n// Number of bars in preview.\nconst VISUALIZATION_BARS = 96;\n// Maximum number of samples per bar.\nconst MAX_SAMPLES_PER_BAR = 10;\n\n// Default recording format (FF, Chrome except on iOS).\nconst DEFAULT_AUDIO_MIME_TYPE = 'audio/webm';\n// Safari supports only mp4 as audio recording format.\nconst SAFARI_AUDIO_MIME_TYPE = 'audio/mp4';\nconst AUDIO_MIME_TYPES = [DEFAULT_AUDIO_MIME_TYPE, SAFARI_AUDIO_MIME_TYPE, ''];\n\nconst messages = defineMessages({\n  icon_title_delete: {\n    id: 'icon_title_delete',\n    defaultMessage: 'Delete recording',\n    description: 'Icon tool tip for deleting recorded audio'\n  },\n  icon_title_pause: {\n    id: 'icon_title_pause',\n    defaultMessage: 'Pause playback',\n    description: 'Icon tool tip for pausing audio playback'\n  },\n  icon_title_resume: {\n    id: 'icon_title_resume',\n    defaultMessage: 'Resume playback',\n    description: 'Icon tool tip for resuming audio playback'\n  },\n  icon_title_send: {\n    id: 'icon_title_send',\n    defaultMessage: 'Send message',\n    description: 'Icon tool tip for sending a message'\n  },\n  failed_to_init_audio: {\n    id: 'failed_to_init_audio',\n    defaultMessage: 'Failed to initialize audio recording',\n    description: 'Error message when audio is not available'\n  }\n});\n\nclass AudioRecorder extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enabled: true,\n      audioRecord: null,\n      recording: true,\n      paused: false,\n      duration: '0:00',\n      blobUrl: null,\n      preview: null\n    };\n\n    this.visualize = this.visualize.bind(this);\n    this.initMediaRecording = this.initMediaRecording.bind(this);\n    this.initCanvas = this.initCanvas.bind(this);\n    this.getRecording = this.getRecording.bind(this);\n    this.cleanUp = this.cleanUp.bind(this);\n\n    this.handleResume = this.handleResume.bind(this);\n    this.handlePause = this.handlePause.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDone = this.handleDone.bind(this);\n\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.viewBuffer = [];\n    this.canvasRef = React.createRef();\n\n    // Timestamp for sending \"recording\" notifications.\n    this.recordingTimestamp = 0;\n  }\n\n  componentDidMount() {\n    this.stream = null;\n    this.mediaRecorder = null;\n    this.audioContext = null;\n    this.audioInput = null;\n    this.analyser = null;\n\n    this.audioChunks = [];\n\n    // Start recorder right away.\n    try {\n      navigator.mediaDevices.getUserMedia({audio: true, video: false}).then(this.initMediaRecording, this.props.onError);\n    } catch (err) {\n      this.props.onError(err);\n    }\n  }\n\n  componentWillUnmount() {\n    this.startedOn = null;\n    if (this.stream) {\n      this.cleanUp();\n    }\n  }\n\n  // Draw amplitude of sound.\n  visualize() {\n    this.initCanvas();\n\n    const pcmData = new Uint8Array(this.analyser.frequencyBinCount);\n    const width = this.canvasWidth;\n    const height = this.canvasHeight;\n    // Number of bars.\n    const viewLength = (width / (LINE_WIDTH + SPACING)) | 0;\n    // Duration of audio which fits onto the screen.\n    const viewDuration = MILLIS_PER_BAR * viewLength;\n\n    this.canvasContext.lineWidth = LINE_WIDTH;\n    this.canvasContext.strokeStyle = BAR_COLOR;\n\n    let prevBarCount = 0;\n    let volume = 0.0;\n    let countPerBar = 0;\n    const drawFrame = _ => {\n      if (!this.startedOn) {\n        return;\n      }\n      window.requestAnimationFrame(drawFrame);\n\n      const duration = this.durationMillis + (Date.now() - this.startedOn);\n      // Update record length timer.\n      this.setState({duration: secondsToTime(duration / 1000)});\n\n      // Check if record is too long.\n      if (duration > MAX_DURATION) {\n        this.startedOn = null;\n        this.mediaRecorder.pause();\n        this.durationMillis += Date.now() - this.startedOn;\n        this.setState({enabled: false, recording: false, duration: secondsToTime(this.durationMillis / 1000)});\n      }\n\n      // Draw histogram.\n\n      // Get current waveform and calculate its amplitude.\n      this.analyser.getByteTimeDomainData(pcmData);\n      let amp = 0.0;\n      for (const amplitude of pcmData) {\n        amp += (amplitude - 127) ** 2;\n      }\n\n      // Sum the amplitude.\n      volume += Math.sqrt(amp/pcmData.length);\n      countPerBar ++;\n\n      let barCount = (duration / MILLIS_PER_BAR) | 0;\n      // Shift of the histogram along x-axis to make scrolling smooth. No need to shift if recording is too short.\n      const dx = viewDuration > duration ? 0 :\n        (duration - MILLIS_PER_BAR * barCount) / MILLIS_PER_BAR * (LINE_WIDTH + SPACING);\n\n      if (prevBarCount != barCount) {\n        prevBarCount = barCount;\n        // Add new amplitude visualization bar.\n        this.viewBuffer.push(volume/countPerBar);\n        volume = 0.0;\n        countPerBar = 0;\n        if (this.viewBuffer.length > viewLength) {\n          // Keep at most 'viewLength' amplitude bars.\n          this.viewBuffer.shift();\n        }\n      }\n\n      // Clear canvas.\n      this.canvasContext.clearRect(0, 0, width, height);\n\n      // Draw amplitude bars.\n      this.canvasContext.beginPath();\n      for (let i = 0; i < this.viewBuffer.length; i++) {\n        let x = i * (LINE_WIDTH + SPACING) - dx;\n        let y = Math.max(Math.min(this.viewBuffer[i] / BAR_SCALE, 0.9) * height, 1);\n\n        this.canvasContext.moveTo(x, (height - y) * 0.5);\n        this.canvasContext.lineTo(x, (height + y) * 0.5);\n      }\n      // Actually draw the bars on canvas.\n      this.canvasContext.stroke();\n\n      // Send notification, if needed.\n      const now = new Date().getTime();\n      if (now - this.recordingTimestamp > KEYPRESS_DELAY) {\n        this.props.onRecordingProgress();\n        this.recordingTimestamp = now;\n      }\n    }\n\n    drawFrame();\n  }\n\n  handlePause(e) {\n    e.preventDefault();\n    this.mediaRecorder.pause();\n    this.mediaRecorder.requestData();\n    this.durationMillis += Date.now() - this.startedOn;\n    this.startedOn = null;\n    this.setState({recording: false});\n  }\n\n  handleResume(e) {\n    e.preventDefault();\n    if (this.state.enabled) {\n      this.startedOn = Date.now();\n      this.mediaRecorder.resume();\n      this.setState({recording: true}, this.visualize);\n    }\n  }\n\n  handleDelete(e) {\n    e.preventDefault();\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.mediaRecorder.stop();\n    this.cleanUp();\n    this.setState({recording: false});\n  }\n\n  handleDone(e) {\n    e.preventDefault();\n    this.setState({recording: false});\n    if (this.startedOn) {\n      this.durationMillis += Date.now() - this.startedOn;\n      this.startedOn = null;\n    }\n    // Stop recording and return data.\n    if (this.mediaRecorder) {\n      this.mediaRecorder.stop();\n    }\n  }\n\n  initCanvas() {\n    this.canvasRef.current.width = this.canvasRef.current.offsetWidth * CANVAS_UPSCALING;\n    this.canvasRef.current.height = this.canvasRef.current.offsetHeight * CANVAS_UPSCALING;\n\n    this.canvasContext = this.canvasRef.current.getContext('2d');\n    this.canvasContext.lineCap = 'round';\n    // To reduce line blurring.\n    this.canvasContext.translate(0.5, 0.5);\n    this.canvasWidth = this.canvasRef.current.width;\n    this.canvasHeight = this.canvasRef.current.height;\n  }\n\n  initMediaRecording(stream) {\n    this.stream = stream;\n    AUDIO_MIME_TYPES.some(mimeType => {\n      if (MediaRecorder.isTypeSupported(mimeType)) {\n        this.mediaRecorder = new MediaRecorder(stream, {mimeType: mimeType, audioBitsPerSecond: 24_000});\n        return true;\n      }\n      return false;\n    });\n\n    if (!this.mediaRecorder) {\n      console.warn('MediaRecorder failed to initialize: no supported audio formats');\n      this.props.onError(this.props.intl.formatMessage(messages.failed_to_init_audio));\n      return;\n    }\n\n    // The following code is needed for visualization.\n    this.audioContext = new AudioContext();\n    this.audioInput = this.audioContext.createMediaStreamSource(stream);\n    if (!this.audioInput) {\n      console.warn('createMediaStreamSource returned null: audio input unavailable');\n      this.props.onError(this.props.intl.formatMessage(messages.failed_to_init_audio));\n      return;\n    }\n\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = BUFFER_SIZE;\n    this.audioInput.connect(this.analyser);\n\n    this.mediaRecorder.onstop = _ => {\n      if (this.durationMillis > MIN_DURATION) {\n        this.getRecording(this.mediaRecorder.mimeType)\n          .then(result => this.props.onFinished(result.url, result.preview, this.durationMillis));\n      } else {\n        this.props.onDeleted();\n      }\n      this.cleanUp();\n    }\n\n    this.mediaRecorder.ondataavailable = (e) => {\n      if (e.data.size > 0) {\n        this.audioChunks.push(e.data);\n      }\n\n      if (this.mediaRecorder.state != 'inactive') {\n        this.getRecording(this.mediaRecorder.mimeType).then(result => {\n          this.setState({\n            blobUrl: result.url,\n            preview: result.preview\n          });\n        });\n      }\n    }\n\n    this.durationMillis = 0;\n    this.startedOn = Date.now();\n    this.mediaRecorder.start();\n    this.visualize();\n\n    this.props.onRecordingProgress();\n    this.recordingTimestamp = this.startedOn;\n  }\n\n  // Obtain data in a form sutable for sending or playing back.\n  getRecording(mimeType) {\n    mimeType = mimeType || DEFAULT_AUDIO_MIME_TYPE;\n    let blob = new Blob(this.audioChunks, {type: mimeType});\n    // If duration is valid, apply fix for Chrome's WebM duration bug.\n    const result = mimeType == DEFAULT_AUDIO_MIME_TYPE ?\n      fixWebmDuration(blob, mimeType) :\n      Promise.resolve(blob);\n    return result\n      .then(fixedBlob => { blob = fixedBlob; return fixedBlob.arrayBuffer(); })\n      .then(arrayBuff => this.audioContext.decodeAudioData(arrayBuff))\n      .then(decoded => this.createPreview(decoded))\n      .then(preview => ({url: window.URL.createObjectURL(blob), preview: intArrayToBase64(preview)}));\n  }\n\n  // Preview must be calculated at the source: Chrome does not allow background AudioContext.\n  createPreview(audio) {\n    const data = audio.getChannelData(0);\n    // Number of amplitude bars in preview.\n    const viewLength = Math.min(data.length, VISUALIZATION_BARS);\n    // The number of samples in each bar.\n    const totalSPB = (data.length / viewLength) | 0;\n    // Distance between samples: we are going to take just a fracton of samples.\n    const samplingRate = Math.max(1, (totalSPB / MAX_SAMPLES_PER_BAR) | 0);\n\n    let buffer = [];\n    let max = -1;\n    for (let i = 0; i < viewLength; i++) {\n      let amplitude = 0;\n      let count = 0;\n      for (let j = 0; j < totalSPB; j += samplingRate) {\n        amplitude += data[totalSPB * i + j] ** 2;\n        count ++;\n      }\n      const val = Math.sqrt(amplitude / count);\n      buffer.push(val);\n      max = Math.max(max, val);\n    }\n    // Normalize amplitude to 0..100.\n    if (max > 0) {\n      buffer = buffer.map(a => (100 * a / max) | 0);\n    }\n    return buffer;\n  }\n\n  cleanUp() {\n    if (this.audioInput) {\n      this.audioInput.disconnect();\n    }\n    this.stream.getTracks().forEach(track => track.stop());\n  }\n\n  render() {\n    const {formatMessage} = this.props.intl;\n    const resumeClass = 'material-icons ' + (this.state.enabled ? 'red' : 'gray');\n    return (\n      <div className=\"audio\">\n        <a href=\"#\" onClick={this.handleDelete} title={formatMessage(messages.icon_title_delete)}>\n          <i className=\"material-icons gray\">delete_outline</i>\n        </a>\n        {this.state.recording ?\n          <canvas ref={this.canvasRef} />\n          :\n          <AudioPlayer\n            src={this.state.blobUrl}\n            preview={this.state.preview}\n            duration={this.durationMillis}\n            short={true} />\n        }\n        <div className=\"duration\">{this.state.duration}</div>\n        {this.state.recording ?\n          <a href=\"#\" onClick={this.handlePause} title={formatMessage(messages.icon_title_pause)}>\n            <i className=\"material-icons\">pause_circle_outline</i>\n          </a> :\n          <a href=\"#\" onClick={this.handleResume} title={formatMessage(messages.icon_title_resume)}>\n            <i className={resumeClass}>radio_button_checked</i>\n          </a>\n        }\n        <a href=\"#\" onClick={this.handleDone} title={formatMessage(messages.icon_title_send)}>\n          <i className=\"material-icons\">send</i>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AudioRecorder);\n"],"names":["React","defineMessages","injectIntl","AudioPlayer","fixWebmDuration","intArrayToBase64","secondsToTime","KEYPRESS_DELAY","MAX_DURATION","MIN_DURATION","BUFFER_SIZE","CANVAS_UPSCALING","LINE_WIDTH","SPACING","MILLIS_PER_BAR","BAR_COLOR","BAR_SCALE","VISUALIZATION_BARS","MAX_SAMPLES_PER_BAR","DEFAULT_AUDIO_MIME_TYPE","SAFARI_AUDIO_MIME_TYPE","AUDIO_MIME_TYPES","messages","icon_title_delete","id","defaultMessage","icon_title_pause","icon_title_resume","icon_title_send","failed_to_init_audio","AudioRecorder","PureComponent","constructor","props","state","enabled","audioRecord","recording","paused","duration","blobUrl","preview","visualize","bind","initMediaRecording","initCanvas","getRecording","cleanUp","handleResume","handlePause","handleDelete","handleDone","durationMillis","startedOn","viewBuffer","canvasRef","createRef","recordingTimestamp","componentDidMount","stream","mediaRecorder","audioContext","audioInput","analyser","audioChunks","navigator","mediaDevices","getUserMedia","audio","video","then","onError","err","componentWillUnmount","pcmData","Uint8Array","frequencyBinCount","width","canvasWidth","height","canvasHeight","viewLength","viewDuration","canvasContext","lineWidth","strokeStyle","prevBarCount","volume","countPerBar","drawFrame","_","window","requestAnimationFrame","Date","now","setState","pause","getByteTimeDomainData","amp","amplitude","Math","sqrt","length","barCount","dx","push","shift","clearRect","beginPath","i","x","y","max","min","moveTo","lineTo","stroke","getTime","onRecordingProgress","e","preventDefault","requestData","resume","stop","current","offsetWidth","offsetHeight","getContext","lineCap","translate","some","mimeType","MediaRecorder","isTypeSupported","audioBitsPerSecond","console","warn","intl","formatMessage","AudioContext","createMediaStreamSource","createAnalyser","fftSize","connect","onstop","result","onFinished","url","onDeleted","ondataavailable","data","size","start","blob","Blob","type","Promise","resolve","fixedBlob","arrayBuffer","arrayBuff","decodeAudioData","decoded","createPreview","URL","createObjectURL","getChannelData","totalSPB","samplingRate","buffer","count","j","val","map","a","disconnect","getTracks","forEach","track","render","resumeClass","createElement","className","href","onClick","title","ref","src","short"],"sourceRoot":""}