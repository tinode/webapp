{"version":3,"file":"0.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/audio-recorder.jsx"],"sourcesContent":["// Audio recorder widget.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport AudioPlayer from './audio-player.jsx';\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=642012\n// It adds duration and SeekHead to the webm record.\nimport fixWebmDuration from 'webm-duration-fix';\n\nimport { intArrayToBase64 } from '../lib/blob-helpers.js'\nimport { secondsToTime } from '../lib/strformat';\nimport { KEYPRESS_DELAY, MAX_DURATION, MIN_DURATION } from '../config.js';\n\n// FFT resolution.\nconst BUFFER_SIZE = 256;\n// Make canvas bigger than the element size to reduce blurring.\nconst CANVAS_UPSCALING = 2.0;\n// Thickness of a visualization bar.\nconst LINE_WIDTH = 3 * CANVAS_UPSCALING;\n// Spacing between two visualization bars.\nconst SPACING = 2 * CANVAS_UPSCALING;\n// Duration represented by one visualization bar.\nconst MILLIS_PER_BAR = 100;\n// Color of histogram bars\nconst BAR_COLOR = '#BBBD';\n// Vertical scaling for visualization bars.\nconst BAR_SCALE = 64.0;\n// Number of bars in preview.\nconst VISUALIZATION_BARS = 96;\n// Maximum number of samples per bar.\nconst MAX_SAMPLES_PER_BAR = 10;\n\n// Default recording format (FF, Chrome except on iOS).\nconst DEFAULT_AUDIO_MIME_TYPE = 'audio/webm';\n// Safari supports only mp4 as audio recording format.\nconst SAFARI_AUDIO_MIME_TYPE = 'audio/mp4';\nconst AUDIO_MIME_TYPES = [DEFAULT_AUDIO_MIME_TYPE, SAFARI_AUDIO_MIME_TYPE, ''];\n\nconst messages = defineMessages({\n  icon_title_delete: {\n    id: 'icon_title_delete',\n    defaultMessage: 'Delete recording',\n    description: 'Icon tool tip for deleting recorded audio'\n  },\n  icon_title_pause: {\n    id: 'icon_title_pause',\n    defaultMessage: 'Pause playback',\n    description: 'Icon tool tip for pausing audio playback'\n  },\n  icon_title_resume: {\n    id: 'icon_title_resume',\n    defaultMessage: 'Resume playback',\n    description: 'Icon tool tip for resuming audio playback'\n  },\n  icon_title_send: {\n    id: 'icon_title_send',\n    defaultMessage: 'Send message',\n    description: 'Icon tool tip for sending a message'\n  },\n  failed_to_init_audio: {\n    id: 'failed_to_init_audio',\n    defaultMessage: 'Failed to initialize audio recording',\n    description: 'Error message when audio is not available'\n  }\n});\n\nclass AudioRecorder extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enabled: true,\n      audioRecord: null,\n      recording: true,\n      paused: false,\n      duration: '0:00',\n      blobUrl: null,\n      preview: null\n    };\n\n    this.visualize = this.visualize.bind(this);\n    this.initMediaRecording = this.initMediaRecording.bind(this);\n    this.initCanvas = this.initCanvas.bind(this);\n    this.getRecording = this.getRecording.bind(this);\n    this.cleanUp = this.cleanUp.bind(this);\n\n    this.handleResume = this.handleResume.bind(this);\n    this.handlePause = this.handlePause.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDone = this.handleDone.bind(this);\n\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.viewBuffer = [];\n    this.canvasRef = React.createRef();\n\n    // Timestamp for sending \"recording\" notifications.\n    this.recordingTimestamp = 0;\n  }\n\n  componentDidMount() {\n    this.stream = null;\n    this.mediaRecorder = null;\n    this.audioContext = null;\n    this.audioInput = null;\n    this.analyser = null;\n\n    this.audioChunks = [];\n\n    // Start recorder right away.\n    try {\n      navigator.mediaDevices.getUserMedia({audio: true, video: false}).then(this.initMediaRecording, this.props.onError);\n    } catch (err) {\n      this.props.onError(err);\n    }\n  }\n\n  componentWillUnmount() {\n    this.startedOn = null;\n    if (this.stream) {\n      this.cleanUp();\n    }\n  }\n\n  // Draw amplitude of sound.\n  visualize() {\n    this.initCanvas();\n\n    const pcmData = new Uint8Array(this.analyser.frequencyBinCount);\n    const width = this.canvasWidth;\n    const height = this.canvasHeight;\n    // Number of bars.\n    const viewLength = (width / (LINE_WIDTH + SPACING)) | 0;\n    // Duration of audio which fits onto the screen.\n    const viewDuration = MILLIS_PER_BAR * viewLength;\n\n    this.canvasContext.lineWidth = LINE_WIDTH;\n    this.canvasContext.strokeStyle = BAR_COLOR;\n\n    let prevBarCount = 0;\n    let volume = 0.0;\n    let countPerBar = 0;\n    const drawFrame = _ => {\n      if (!this.startedOn) {\n        return;\n      }\n      window.requestAnimationFrame(drawFrame);\n\n      const duration = this.durationMillis + (Date.now() - this.startedOn);\n      // Update record length timer.\n      this.setState({duration: secondsToTime(duration / 1000)});\n\n      // Check if record is too long.\n      if (duration > MAX_DURATION) {\n        this.startedOn = null;\n        this.mediaRecorder.pause();\n        this.durationMillis += Date.now() - this.startedOn;\n        this.setState({enabled: false, recording: false, duration: secondsToTime(this.durationMillis / 1000)});\n      }\n\n      // Draw histogram.\n\n      // Get current waveform and calculate its amplitude.\n      this.analyser.getByteTimeDomainData(pcmData);\n      let amp = 0.0;\n      for (const amplitude of pcmData) {\n        amp += (amplitude - 127) ** 2;\n      }\n\n      // Sum the amplitude.\n      volume += Math.sqrt(amp/pcmData.length);\n      countPerBar ++;\n\n      let barCount = (duration / MILLIS_PER_BAR) | 0;\n      // Shift of the histogram along x-axis to make scrolling smooth. No need to shift if recording is too short.\n      const dx = viewDuration > duration ? 0 :\n        (duration - MILLIS_PER_BAR * barCount) / MILLIS_PER_BAR * (LINE_WIDTH + SPACING);\n\n      if (prevBarCount != barCount) {\n        prevBarCount = barCount;\n        // Add new amplitude visualization bar.\n        this.viewBuffer.push(volume/countPerBar);\n        volume = 0.0;\n        countPerBar = 0;\n        if (this.viewBuffer.length > viewLength) {\n          // Keep at most 'viewLength' amplitude bars.\n          this.viewBuffer.shift();\n        }\n      }\n\n      // Clear canvas.\n      this.canvasContext.clearRect(0, 0, width, height);\n\n      // Draw amplitude bars.\n      this.canvasContext.beginPath();\n      for (let i = 0; i < this.viewBuffer.length; i++) {\n        let x = i * (LINE_WIDTH + SPACING) - dx;\n        let y = Math.max(Math.min(this.viewBuffer[i] / BAR_SCALE, 0.9) * height, 1);\n\n        this.canvasContext.moveTo(x, (height - y) * 0.5);\n        this.canvasContext.lineTo(x, (height + y) * 0.5);\n      }\n      // Actually draw the bars on canvas.\n      this.canvasContext.stroke();\n\n      // Send notification, if needed.\n      const now = new Date().getTime();\n      if (now - this.recordingTimestamp > KEYPRESS_DELAY) {\n        this.props.onRecordingProgress();\n        this.recordingTimestamp = now;\n      }\n    }\n\n    drawFrame();\n  }\n\n  handlePause(e) {\n    e.preventDefault();\n    this.mediaRecorder.pause();\n    this.mediaRecorder.requestData();\n    this.durationMillis += Date.now() - this.startedOn;\n    this.startedOn = null;\n    this.setState({recording: false});\n  }\n\n  handleResume(e) {\n    e.preventDefault();\n    if (this.state.enabled) {\n      this.startedOn = Date.now();\n      this.mediaRecorder.resume();\n      this.setState({recording: true}, this.visualize);\n    }\n  }\n\n  handleDelete(e) {\n    e.preventDefault();\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.mediaRecorder.stop();\n    this.cleanUp();\n    this.setState({recording: false});\n  }\n\n  handleDone(e) {\n    e.preventDefault();\n    this.setState({recording: false});\n    if (this.startedOn) {\n      this.durationMillis += Date.now() - this.startedOn;\n      this.startedOn = null;\n    }\n    // Stop recording and return data.\n    if (this.mediaRecorder) {\n      this.mediaRecorder.stop();\n    }\n  }\n\n  initCanvas() {\n    this.canvasRef.current.width = this.canvasRef.current.offsetWidth * CANVAS_UPSCALING;\n    this.canvasRef.current.height = this.canvasRef.current.offsetHeight * CANVAS_UPSCALING;\n\n    this.canvasContext = this.canvasRef.current.getContext('2d');\n    this.canvasContext.lineCap = 'round';\n    // To reduce line blurring.\n    this.canvasContext.translate(0.5, 0.5);\n    this.canvasWidth = this.canvasRef.current.width;\n    this.canvasHeight = this.canvasRef.current.height;\n  }\n\n  initMediaRecording(stream) {\n    this.stream = stream;\n    AUDIO_MIME_TYPES.some(mimeType => {\n      if (MediaRecorder.isTypeSupported(mimeType)) {\n        this.mediaRecorder = new MediaRecorder(stream, {mimeType: mimeType, audioBitsPerSecond: 24_000});\n        return true;\n      }\n      return false;\n    });\n\n    if (!this.mediaRecorder) {\n      console.warn('MediaRecorder failed to initialize: no supported audio formats');\n      this.props.onError(this.props.intl.formatMessage(messages.failed_to_init_audio));\n      return;\n    }\n\n    // The following code is needed for visualization.\n    this.audioContext = new AudioContext();\n    this.audioInput = this.audioContext.createMediaStreamSource(stream);\n    if (!this.audioInput) {\n      console.warn('createMediaStreamSource returned null: audio input unavailable');\n      this.props.onError(this.props.intl.formatMessage(messages.failed_to_init_audio));\n      return;\n    }\n\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = BUFFER_SIZE;\n    this.audioInput.connect(this.analyser);\n\n    this.mediaRecorder.onstop = _ => {\n      if (this.durationMillis > MIN_DURATION) {\n        this.getRecording(this.mediaRecorder.mimeType)\n          .then(result => this.props.onFinished(result.url, result.preview, this.durationMillis));\n      } else {\n        this.props.onDeleted();\n      }\n      this.cleanUp();\n    }\n\n    this.mediaRecorder.ondataavailable = (e) => {\n      if (e.data.size > 0) {\n        this.audioChunks.push(e.data);\n      }\n\n      if (this.mediaRecorder.state != 'inactive') {\n        this.getRecording(this.mediaRecorder.mimeType).then(result => {\n          this.setState({\n            blobUrl: result.url,\n            preview: result.preview\n          });\n        });\n      }\n    }\n\n    this.durationMillis = 0;\n    this.startedOn = Date.now();\n    this.mediaRecorder.start();\n    this.visualize();\n\n    this.props.onRecordingProgress();\n    this.recordingTimestamp = this.startedOn;\n  }\n\n  // Obtain data in a form sutable for sending or playing back.\n  getRecording(mimeType) {\n    mimeType = mimeType || DEFAULT_AUDIO_MIME_TYPE;\n    let blob = new Blob(this.audioChunks, {type: mimeType});\n    // If duration is valid, apply fix for Chrome's WebM duration bug.\n    const result = mimeType == DEFAULT_AUDIO_MIME_TYPE ?\n      fixWebmDuration(blob, mimeType) :\n      Promise.resolve(blob);\n    return result\n      .then(fixedBlob => { blob = fixedBlob; return fixedBlob.arrayBuffer(); })\n      .then(arrayBuff => this.audioContext.decodeAudioData(arrayBuff))\n      .then(decoded => this.createPreview(decoded))\n      .then(preview => ({url: window.URL.createObjectURL(blob), preview: intArrayToBase64(preview)}));\n  }\n\n  // Preview must be calculated at the source: Chrome does not allow background AudioContext.\n  createPreview(audio) {\n    const data = audio.getChannelData(0);\n    // Number of amplitude bars in preview.\n    const viewLength = Math.min(data.length, VISUALIZATION_BARS);\n    // The number of samples in each bar.\n    const totalSPB = (data.length / viewLength) | 0;\n    // Distance between samples: we are going to take just a fracton of samples.\n    const samplingRate = Math.max(1, (totalSPB / MAX_SAMPLES_PER_BAR) | 0);\n\n    let buffer = [];\n    let max = -1;\n    for (let i = 0; i < viewLength; i++) {\n      let amplitude = 0;\n      let count = 0;\n      for (let j = 0; j < totalSPB; j += samplingRate) {\n        amplitude += data[totalSPB * i + j] ** 2;\n        count ++;\n      }\n      const val = Math.sqrt(amplitude / count);\n      buffer.push(val);\n      max = Math.max(max, val);\n    }\n    // Normalize amplitude to 0..100.\n    if (max > 0) {\n      buffer = buffer.map(a => (100 * a / max) | 0);\n    }\n    return buffer;\n  }\n\n  cleanUp() {\n    if (this.audioInput) {\n      this.audioInput.disconnect();\n    }\n    this.stream.getTracks().forEach(track => track.stop());\n  }\n\n  render() {\n    const {formatMessage} = this.props.intl;\n    const resumeClass = 'material-icons ' + (this.state.enabled ? 'red' : 'gray');\n    return (\n      <div className=\"audio\">\n        <a href=\"#\" onClick={this.handleDelete} title={formatMessage(messages.icon_title_delete)}>\n          <i className=\"material-icons gray\">delete_outline</i>\n        </a>\n        {this.state.recording ?\n          <canvas ref={this.canvasRef} />\n          :\n          <AudioPlayer\n            src={this.state.blobUrl}\n            preview={this.state.preview}\n            duration={this.durationMillis}\n            short={true} />\n        }\n        <div className=\"duration\">{this.state.duration}</div>\n        {this.state.recording ?\n          <a href=\"#\" onClick={this.handlePause} title={formatMessage(messages.icon_title_pause)}>\n            <i className=\"material-icons\">pause_circle_outline</i>\n          </a> :\n          <a href=\"#\" onClick={this.handleResume} title={formatMessage(messages.icon_title_resume)}>\n            <i className={resumeClass}>radio_button_checked</i>\n          </a>\n        }\n        <a href=\"#\" onClick={this.handleDone} title={formatMessage(messages.icon_title_send)}>\n          <i className=\"material-icons\">send</i>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AudioRecorder);\n"],"names":["MILLIS_PER_BAR","DEFAULT_AUDIO_MIME_TYPE","AUDIO_MIME_TYPES","messages","defineMessages","icon_title_delete","id","defaultMessage","icon_title_pause","icon_title_resume","icon_title_send","failed_to_init_audio","AudioRecorder","React","constructor","props","super","this","state","enabled","audioRecord","recording","paused","duration","blobUrl","preview","visualize","bind","initMediaRecording","initCanvas","getRecording","cleanUp","handleResume","handlePause","handleDelete","handleDone","durationMillis","startedOn","viewBuffer","canvasRef","recordingTimestamp","componentDidMount","stream","mediaRecorder","audioContext","audioInput","analyser","audioChunks","navigator","mediaDevices","getUserMedia","audio","video","then","onError","err","componentWillUnmount","pcmData","Uint8Array","frequencyBinCount","width","canvasWidth","height","canvasHeight","viewLength","viewDuration","canvasContext","lineWidth","strokeStyle","prevBarCount","volume","countPerBar","drawFrame","_","window","requestAnimationFrame","Date","now","setState","secondsToTime","MAX_DURATION","pause","getByteTimeDomainData","amp","amplitude","Math","sqrt","length","barCount","dx","push","shift","clearRect","beginPath","i","x","y","max","min","moveTo","lineTo","stroke","getTime","KEYPRESS_DELAY","onRecordingProgress","e","preventDefault","requestData","resume","stop","current","offsetWidth","offsetHeight","getContext","lineCap","translate","some","mimeType","MediaRecorder","isTypeSupported","audioBitsPerSecond","AudioContext","createMediaStreamSource","createAnalyser","fftSize","connect","onstop","MIN_DURATION","result","onFinished","url","onDeleted","ondataavailable","data","size","start","console","warn","intl","formatMessage","blob","Blob","type","fixWebmDuration","Promise","resolve","fixedBlob","arrayBuffer","arrayBuff","decodeAudioData","decoded","createPreview","URL","createObjectURL","intArrayToBase64","getChannelData","totalSPB","samplingRate","buffer","count","j","val","map","a","disconnect","getTracks","forEach","track","render","resumeClass","className","href","onClick","title","ref","AudioPlayer","src","short","injectIntl"],"sourceRoot":""}