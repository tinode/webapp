{"version":3,"file":"tinode.prod.js","mappings":"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","sources":["webpack://tinode/webpack/universalModuleDefinition","webpack://tinode/./src/drafty.js","webpack://tinode/webpack/bootstrap","webpack://tinode/webpack/runtime/compat get default export","webpack://tinode/webpack/runtime/define property getters","webpack://tinode/webpack/runtime/global","webpack://tinode/webpack/runtime/hasOwnProperty shorthand","webpack://tinode/webpack/runtime/make namespace object","webpack://tinode/./src/access-mode.js","webpack://tinode/./version.js","webpack://tinode/./src/config.js","webpack://tinode/./src/comm-error.js","webpack://tinode/./src/utils.js","webpack://tinode/./src/connection.js","webpack://tinode/./src/db.js","webpack://tinode/./src/large-file.js","webpack://tinode/./src/tinode.js","webpack://tinode/./src/meta-builder.js","webpack://tinode/./src/cbuffer.js","webpack://tinode/./src/topic.js","webpack://tinode/./src/fnd-topic.js","webpack://tinode/./src/me-topic.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tinode\"] = factory();\n\telse\n\t\troot[\"tinode\"] = factory();\n})(this, () => {\nreturn ","/**\n * @copyright 2015-2024 Tinode LLC.\n * @summary Minimally rich text representation and formatting for Tinode.\n * @license Apache 2.0\n *\n * @file Basic parser and formatter for very simple text markup. Mostly targeted at\n * mobile use cases similar to Telegram, WhatsApp, and FB Messenger.\n *\n * <p>Supports conversion of user keyboard input to formatted text:</p>\n * <ul>\n *   <li>*abc* &rarr; <b>abc</b></li>\n *   <li>_abc_ &rarr; <i>abc</i></li>\n *   <li>~abc~ &rarr; <del>abc</del></li>\n *   <li>`abc` &rarr; <tt>abc</tt></li>\n * </ul>\n * Also supports forms and buttons.\n *\n * Nested formatting is supported, e.g. *abc _def_* -> <b>abc <i>def</i></b>\n * URLs, @mentions, and #hashtags are extracted and converted into links.\n * Forms and buttons can be added procedurally.\n * JSON data representation is inspired by Draft.js raw formatting.\n *\n *\n * @example\n * Text:\n * <pre>\n *     this is *bold*, `code` and _italic_, ~strike~\n *     combined *bold and _italic_*\n *     an url: https://www.example.com/abc#fragment and another _www.tinode.co_\n *     this is a @mention and a #hashtag in a string\n *     second #hashtag\n * </pre>\n *\n *  Sample JSON representation of the text above:\n *  {\n *     \"txt\": \"this is bold, code and italic, strike combined bold and italic an url: https://www.example.com/abc#fragment \" +\n *             \"and another www.tinode.co this is a @mention and a #hashtag in a string second #hashtag\",\n *     \"fmt\": [\n *         { \"at\":8, \"len\":4,\"tp\":\"ST\" },{ \"at\":14, \"len\":4, \"tp\":\"CO\" },{ \"at\":23, \"len\":6, \"tp\":\"EM\"},\n *         { \"at\":31, \"len\":6, \"tp\":\"DL\" },{ \"tp\":\"BR\", \"len\":1, \"at\":37 },{ \"at\":56, \"len\":6, \"tp\":\"EM\" },\n *         { \"at\":47, \"len\":15, \"tp\":\"ST\" },{ \"tp\":\"BR\", \"len\":1, \"at\":62 },{ \"at\":120, \"len\":13, \"tp\":\"EM\" },\n *         { \"at\":71, \"len\":36, \"key\":0 },{ \"at\":120, \"len\":13, \"key\":1 },{ \"tp\":\"BR\", \"len\":1, \"at\":133 },\n *         { \"at\":144, \"len\":8, \"key\":2 },{ \"at\":159, \"len\":8, \"key\":3 },{ \"tp\":\"BR\", \"len\":1, \"at\":179 },\n *         { \"at\":187, \"len\":8, \"key\":3 },{ \"tp\":\"BR\", \"len\":1, \"at\":195 }\n *     ],\n *     \"ent\": [\n *         { \"tp\":\"LN\", \"data\":{ \"url\":\"https://www.example.com/abc#fragment\" } },\n *         { \"tp\":\"LN\", \"data\":{ \"url\":\"http://www.tinode.co\" } },\n *         { \"tp\":\"MN\", \"data\":{ \"val\":\"mention\" } },\n *         { \"tp\":\"HT\", \"data\":{ \"val\":\"hashtag\" } }\n *     ]\n *  }\n */\n\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nconst MAX_FORM_ELEMENTS = 8;\nconst MAX_PREVIEW_ATTACHMENTS = 3;\nconst MAX_PREVIEW_DATA_SIZE = 64;\nconst DRAFTY_MIME_TYPE = 'text/x-drafty';\n// Drafty form-response MIME type.\nconst DRAFTY_FR_MIME_TYPE = 'text/x-drafty-fr';\n// Legacy Drafty form-response MIME type.\nconst DRAFTY_FR_MIME_TYPE_LEGACY = 'application/json'; // Remove in 2026.\nconst ALLOWED_ENT_FIELDS = ['act', 'height', 'duration', 'incoming', 'mime', 'name', 'premime', 'preref', 'preview',\n  'ref', 'size', 'state', 'url', 'val', 'width'\n];\n\n// Intl.Segmenter is not available in Firefox 124 and earlier. FF 125 with support for Intl.Segmenter\n// was released on April 15, 2024. Polyfill is included in the top package (webapp).\nconst segmenter = new Intl.Segmenter();\n\n// Regular expressions for parsing inline formats. Javascript does not support lookbehind,\n// so it's a bit messy.\nconst INLINE_STYLES = [\n  // Strong = bold, *bold text*\n  {\n    name: 'ST',\n    start: /(?:^|[\\W_])(\\*)[^\\s*]/,\n    end: /[^\\s*](\\*)(?=$|[\\W_])/\n  },\n  // Emphesized = italic, _italic text_\n  {\n    name: 'EM',\n    start: /(?:^|\\W)(_)[^\\s_]/,\n    end: /[^\\s_](_)(?=$|\\W)/\n  },\n  // Deleted, ~strike this though~\n  {\n    name: 'DL',\n    start: /(?:^|[\\W_])(~)[^\\s~]/,\n    end: /[^\\s~](~)(?=$|[\\W_])/\n  },\n  // Code block `this is monospace`\n  {\n    name: 'CO',\n    start: /(?:^|\\W)(`)[^`]/,\n    end: /[^`](`)(?=$|\\W)/\n  }\n];\n\n// Relative weights of formatting spans. Greater index in array means greater weight.\nconst FMT_WEIGHT = ['QQ'];\n\n// RegExps for entity extraction (RF = reference)\nconst ENTITY_TYPES = [\n  // URLs\n  {\n    name: 'LN',\n    dataName: 'url',\n    pack: function(val) {\n      // Check if the protocol is specified, if not use http\n      if (!/^[a-z]+:\\/\\//i.test(val)) {\n        val = 'http://' + val;\n      }\n      return {\n        url: val\n      };\n    },\n    re: /(?:(?:https?|ftp):\\/\\/|www\\.|ftp\\.)[-A-Z0-9+&@#\\/%=~_|$?!:,.]*[A-Z0-9+&@#\\/%=~_|$]/ig\n  },\n  // Mentions @user (must be 2 or more characters)\n  {\n    name: 'MN',\n    dataName: 'val',\n    pack: function(val) {\n      return {\n        val: val.slice(1)\n      };\n    },\n    re: /\\B@([\\p{L}\\p{N}][._\\p{L}\\p{N}]*[\\p{L}\\p{N}])/ug\n  },\n  // Hashtags #hashtag, like metion 2 or more characters.\n  {\n    name: 'HT',\n    dataName: 'val',\n    pack: function(val) {\n      return {\n        val: val.slice(1)\n      };\n    },\n    re: /\\B#([\\p{L}\\p{N}][._\\p{L}\\p{N}]*[\\p{L}\\p{N}])/ug\n  }\n];\n\n// HTML tag name suggestions\nconst FORMAT_TAGS = {\n  AU: {\n    html_tag: 'audio',\n    md_tag: undefined,\n    isVoid: false\n  },\n  BN: {\n    html_tag: 'button',\n    md_tag: undefined,\n    isVoid: false\n  },\n  BR: {\n    html_tag: 'br',\n    md_tag: '\\n',\n    isVoid: true\n  },\n  CO: {\n    html_tag: 'tt',\n    md_tag: '`',\n    isVoid: false\n  },\n  DL: {\n    html_tag: 'del',\n    md_tag: '~',\n    isVoid: false\n  },\n  EM: {\n    html_tag: 'i',\n    md_tag: '_',\n    isVoid: false\n  },\n  EX: {\n    html_tag: '',\n    md_tag: undefined,\n    isVoid: true\n  },\n  FM: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HD: {\n    html_tag: '',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HL: {\n    html_tag: 'span',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HT: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  IM: {\n    html_tag: 'img',\n    md_tag: undefined,\n    isVoid: false\n  },\n  LN: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  MN: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  RW: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false,\n  },\n  QQ: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  ST: {\n    html_tag: 'b',\n    md_tag: '*',\n    isVoid: false\n  },\n  VC: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  VD: {\n    html_tag: 'video',\n    md_tag: undefined,\n    isVoid: false\n  }\n};\n\n// Convert base64-encoded string into Blob.\nfunction base64toObjectUrl(b64, contentType, logger) {\n  if (!b64) {\n    return null;\n  }\n\n  try {\n    const bin = atob(b64);\n    const length = bin.length;\n    const buf = new ArrayBuffer(length);\n    const arr = new Uint8Array(buf);\n    for (let i = 0; i < length; i++) {\n      arr[i] = bin.charCodeAt(i);\n    }\n\n    return URL.createObjectURL(new Blob([buf], {\n      type: contentType\n    }));\n  } catch (err) {\n    if (logger) {\n      logger(\"Drafty: failed to convert object.\", err.message);\n    }\n  }\n\n  return null;\n}\n\nfunction base64toDataUrl(b64, contentType) {\n  if (!b64) {\n    return null;\n  }\n  contentType = contentType || 'image/jpeg';\n  return 'data:' + contentType + ';base64,' + b64;\n}\n\n// Helpers for converting Drafty to HTML.\nconst DECORATORS = {\n  // Visial styles\n  ST: {\n    open: _ => '<b>',\n    close: _ => '</b>'\n  },\n  EM: {\n    open: _ => '<i>',\n    close: _ => '</i>'\n  },\n  DL: {\n    open: _ => '<del>',\n    close: _ => '</del>'\n  },\n  CO: {\n    open: _ => '<tt>',\n    close: _ => '</tt>'\n  },\n  // Line break\n  BR: {\n    open: _ => '<br/>',\n    close: _ => ''\n  },\n  // Hidden element\n  HD: {\n    open: _ => '',\n    close: _ => ''\n  },\n  // Highlighted element.\n  HL: {\n    open: _ => '<span style=\"color:teal\">',\n    close: _ => '</span>'\n  },\n  // Link (URL)\n  LN: {\n    open: (data) => {\n      return '<a href=\"' + data.url + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        href: data.url,\n        target: '_blank'\n      } : null;\n    },\n  },\n  // Mention\n  MN: {\n    open: (data) => {\n      return '<a href=\"#' + data.val + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        id: data.val\n      } : null;\n    },\n  },\n  // Hashtag\n  HT: {\n    open: (data) => {\n      return '<a href=\"#' + data.val + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        id: data.val\n      } : null;\n    },\n  },\n  // Button\n  BN: {\n    open: _ => '<button>',\n    close: _ => '</button>',\n    props: (data) => {\n      return data ? {\n        'data-act': data.act,\n        'data-val': data.val,\n        'data-name': data.name,\n        'data-ref': data.ref\n      } : null;\n    },\n  },\n  // Audio recording\n  AU: {\n    open: (data) => {\n      const url = data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger);\n      return '<audio controls src=\"' + url + '\">';\n    },\n    close: _ => '</audio>',\n    props: (data) => {\n      if (!data) return null;\n      return {\n        // Embedded data or external link.\n        src: data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        'data-preload': data.ref ? 'metadata' : 'auto',\n        'data-duration': data.duration,\n        'data-name': data.name,\n        'data-size': data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0),\n        'data-mime': data.mime,\n      };\n    }\n  },\n  // Image\n  IM: {\n    open: data => {\n      // Don't use data.ref for preview: it's a security risk.\n      const tmpPreviewUrl = base64toDataUrl(data._tempPreview, data.mime);\n      const previewUrl = base64toObjectUrl(data.val, data.mime, Drafty.logger);\n      const downloadUrl = data.ref || previewUrl;\n      return (data.name ? '<a href=\"' + downloadUrl + '\" download=\"' + data.name + '\">' : '') +\n        '<img src=\"' + (tmpPreviewUrl || previewUrl) + '\"' +\n        (data.width ? ' width=\"' + data.width + '\"' : '') +\n        (data.height ? ' height=\"' + data.height + '\"' : '') + ' border=\"0\" />';\n    },\n    close: data => {\n      return (data.name ? '</a>' : '');\n    },\n    props: data => {\n      if (!data) return null;\n      return {\n        // Temporary preview, or permanent preview, or external link.\n        src: base64toDataUrl(data._tempPreview, data.mime) ||\n          data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        title: data.name,\n        alt: data.name,\n        'data-width': data.width,\n        'data-height': data.height,\n        'data-name': data.name,\n        'data-size': data.ref ? (data.size | 0) : (data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0)),\n        'data-mime': data.mime,\n      };\n    },\n  },\n  // Form - structured layout of elements.\n  FM: {\n    open: _ => '<div>',\n    close: _ => '</div>'\n  },\n  // Row: logic grouping of elements\n  RW: {\n    open: _ => '<div>',\n    close: _ => '</div>'\n  },\n  // Quoted block.\n  QQ: {\n    open: _ => '<div>',\n    close: _ => '</div>',\n    props: (data) => {\n      return data ? {} : null;\n    },\n  },\n  // Video call\n  VC: {\n    open: _ => '<div>',\n    close: _ => '</div>',\n    props: data => {\n      if (!data) return {};\n      return {\n        'data-duration': data.duration,\n        'data-state': data.state,\n      };\n    }\n  },\n  // Video.\n  VD: {\n    open: data => {\n      const tmpPreviewUrl = base64toDataUrl(data._tempPreview, data.mime);\n      const previewUrl = data.ref || base64toObjectUrl(data.preview, data.premime || 'image/jpeg', Drafty.logger);\n      return '<img src=\"' + (tmpPreviewUrl || previewUrl) + '\"' +\n        (data.width ? ' width=\"' + data.width + '\"' : '') +\n        (data.height ? ' height=\"' + data.height + '\"' : '') + ' border=\"0\" />';\n    },\n    close: _ => '',\n    props: data => {\n      if (!data) return null;\n      const poster = data.preref || base64toObjectUrl(data.preview, data.premime || 'image/jpeg', Drafty.logger);\n      return {\n        // Embedded data or external link.\n        src: poster,\n        'data-src': data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        'data-width': data.width,\n        'data-height': data.height,\n        'data-preload': data.ref ? 'metadata' : 'auto',\n        'data-preview': poster,\n        'data-duration': data.duration | 0,\n        'data-name': data.name,\n        'data-size': data.ref ? (data.size | 0) : (data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0)),\n        'data-mime': data.mime,\n      };\n    }\n  },\n};\n\n/**\n * The main object which performs all the formatting actions.\n * @class Drafty\n * @constructor\n */\nconst Drafty = function() {\n  this.txt = '';\n  this.fmt = [];\n  this.ent = [];\n}\n\n/**\n * Initialize Drafty document to a plain text string.\n *\n * @param {string} plainText - string to use as Drafty content.\n *\n * @returns new Drafty document or null is plainText is not a string or undefined.\n */\nDrafty.init = function(plainText) {\n  if (typeof plainText == 'undefined') {\n    plainText = '';\n  } else if (typeof plainText != 'string') {\n    return null;\n  }\n\n  return {\n    txt: plainText\n  };\n}\n\n/**\n * Parse plain text into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {string} content - plain-text content to parse.\n * @return {Drafty} parsed document or null if the source is not plain text.\n */\nDrafty.parse = function(content) {\n  // Make sure we are parsing strings only.\n  if (typeof content != 'string') {\n    return null;\n  }\n\n  // Split text into lines. It makes further processing easier.\n  const lines = content.split(/\\r?\\n/);\n\n  // Holds entities referenced from text\n  const entityMap = [];\n  const entityIndex = {};\n\n  // Processing lines one by one, hold intermediate result in blx.\n  const blx = [];\n  lines.forEach((line) => {\n    let spans = [];\n    let entities;\n\n    // Find formatted spans in the string.\n    // Try to match each style.\n    INLINE_STYLES.forEach((tag) => {\n      // Each style could be matched multiple times.\n      spans = spans.concat(spannify(line, tag.start, tag.end, tag.name));\n    });\n\n    let block;\n    if (spans.length == 0) {\n      block = {\n        txt: line\n      };\n    } else {\n      // Sort spans by style occurence early -> late, then by length: first long then short.\n      spans.sort((a, b) => {\n        const diff = a.at - b.at;\n        return diff != 0 ? diff : b.end - a.end;\n      });\n\n      // Convert an array of possibly overlapping spans into a tree.\n      spans = toSpanTree(spans);\n\n      // Build a tree representation of the entire string, not\n      // just the formatted parts.\n      const chunks = chunkify(line, 0, line.length, spans);\n\n      const drafty = draftify(chunks, 0);\n\n      block = {\n        txt: drafty.txt,\n        fmt: drafty.fmt\n      };\n    }\n\n    // Extract entities from the cleaned up string.\n    entities = extractEntities(block.txt);\n    if (entities.length > 0) {\n      const ranges = [];\n      for (let i in entities) {\n        // {offset: match['index'], unique: match[0], len: match[0].length, data: ent.packer(), type: ent.name}\n        const entity = entities[i];\n        let index = entityIndex[entity.unique];\n        if (!index) {\n          index = entityMap.length;\n          entityIndex[entity.unique] = index;\n          entityMap.push({\n            tp: entity.type,\n            data: entity.data\n          });\n        }\n        ranges.push({\n          at: entity.offset,\n          len: entity.len,\n          key: index\n        });\n      }\n      block.ent = ranges;\n    }\n\n    blx.push(block);\n  });\n\n  const result = {\n    txt: ''\n  };\n\n  // Merge lines and save line breaks as BR inline formatting.\n  if (blx.length > 0) {\n    result.txt = blx[0].txt;\n    result.fmt = (blx[0].fmt || []).concat(blx[0].ent || []);\n\n    if (result.fmt.length) {\n      const segments = segmenter.segment(result.txt);\n      for (const ele of result.fmt) {\n        ({\n            at: ele.at,\n            len: ele.len\n          } =\n          toGraphemeValues(ele, segments, result.txt));\n      }\n    }\n\n    for (let i = 1; i < blx.length; i++) {\n      const block = blx[i];\n      const offset = stringToGraphemes(result.txt).length + 1;\n\n      result.fmt.push({\n        tp: 'BR',\n        len: 1,\n        at: offset - 1\n      });\n\n      let segments = {};\n\n      result.txt += ' ' + block.txt;\n      if (block.fmt) {\n        segments = segmenter.segment(block.txt);\n        result.fmt = result.fmt.concat(\n          block.fmt.map((s) => {\n            const {\n              at: correctAt,\n              len: correctLen\n            } =\n            toGraphemeValues(s, segments, block.txt);\n            s.at = correctAt + offset;\n            s.len = correctLen;\n            return s;\n          })\n        );\n      }\n      if (block.ent) {\n        if (isEmptyObject(segments)) {\n          segments = segmenter.segment(block.txt);\n        }\n        result.fmt = result.fmt.concat(\n          block.ent.map((s) => {\n            const {\n              at: correctAt,\n              len: correctLen\n            } =\n            toGraphemeValues(s, segments, block.txt);\n            s.at = correctAt + offset;\n            s.len = correctLen;\n            return s;\n          })\n        );\n      }\n    }\n\n    if (result.fmt.length == 0) {\n      delete result.fmt;\n    }\n\n    if (entityMap.length > 0) {\n      result.ent = entityMap;\n    }\n  }\n  return result;\n}\n\n/**\n * Append one Drafty document to another.\n *\n * @param {Drafty} first - Drafty document to append to.\n * @param {Drafty|string} second - Drafty document or string being appended.\n *\n * @return {Drafty} first document with the second appended to it.\n */\nDrafty.append = function(first, second) {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n\n  first.txt = first.txt || '';\n  const len = stringToGraphemes(first.txt).length;\n\n  if (typeof second == 'string') {\n    first.txt += second;\n  } else if (second.txt) {\n    first.txt += second.txt;\n  }\n\n  if (Array.isArray(second.fmt)) {\n    first.fmt = first.fmt || [];\n    if (Array.isArray(second.ent)) {\n      first.ent = first.ent || [];\n    }\n    second.fmt.forEach(src => {\n      const fmt = {\n        at: (src.at | 0) + len,\n        len: src.len | 0\n      };\n      // Special case for the outside of the normal rendering flow styles.\n      if (src.at == -1) {\n        fmt.at = -1;\n        fmt.len = 0;\n      }\n      if (src.tp) {\n        fmt.tp = src.tp;\n      } else {\n        fmt.key = first.ent.length;\n        first.ent.push(second.ent[src.key || 0]);\n      }\n      first.fmt.push(fmt);\n    });\n  }\n\n  return first;\n}\n\n/**\n * Description of an image to attach.\n * @typedef {Object} ImageDesc\n * @memberof Drafty\n *\n * @property {string} mime - mime-type of the image, e.g. \"image/png\".\n * @property {string} refurl - reference to the content. Could be null/undefined.\n * @property {string} bits - base64-encoded image content. Could be null/undefined.\n * @property {string} preview - base64-encoded thumbnail of the image.\n * @property {integer} width - width of the image.\n * @property {integer} height - height of the image.\n * @property {string} filename - file name suggestion for downloading the image.\n * @property {integer} size - size of the image in bytes. Treat is as an untrusted hint.\n * @property {string} _tempPreview - base64-encoded image preview used during upload process; not serializable.\n * @property {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Insert inline image into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add image to.\n * @param {integer} at - index where the object is inserted. The length of the image is always 1.\n * @param {ImageDesc} imageDesc - object with image paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertImage = function(content, at, imageDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'IM',\n    data: {\n      mime: imageDesc.mime,\n      ref: imageDesc.refurl,\n      val: imageDesc.bits || imageDesc.preview,\n      width: imageDesc.width,\n      height: imageDesc.height,\n      name: imageDesc.filename,\n      size: imageDesc.size | 0,\n    }\n  };\n\n  if (imageDesc.urlPromise) {\n    ex.data._tempPreview = imageDesc._tempPreview;\n    ex.data._processing = true;\n    imageDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._tempPreview = undefined;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Description of a video to attach.\n * @typedef {Object} VideoDesc\n * @memberof Drafty\n *\n * @property {string} mime - mime-type of the video, e.g. \"video/mpeg\".\n * @property {string} refurl - reference to the content. Could be null/undefined.\n * @property {string} bits - in-band base64-encoded image data. Could be null/undefined.\n * @property {string} preview - base64-encoded screencapture from the video. Could be null/undefined.\n * @property {string} preref - reference to screencapture from the video. Could be null/undefined.\n * @property {integer} width - width of the video.\n * @property {integer} height - height of the video.\n * @property {integer} duration - duration of the video.\n * @property {string} filename - file name suggestion for downloading the video.\n * @property {integer} size - size of the video in bytes. Treat is as an untrusted hint.\n * @property {string} _tempPreview - base64-encoded screencapture used during upload process; not serializable.\n * @property {Promise} urlPromise - array of two promises, which return URLs of video and preview uploads correspondingly\n *        (either could be null).\n */\n\n/**\n * Insert inline image into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add video to.\n * @param {integer} at - index where the object is inserted. The length of the video is always 1.\n * @param {VideoDesc} videoDesc - object with video paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertVideo = function(content, at, videoDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'VD',\n    data: {\n      mime: videoDesc.mime,\n      ref: videoDesc.refurl,\n      val: videoDesc.bits,\n      preref: videoDesc.preref,\n      preview: videoDesc.preview,\n      width: videoDesc.width,\n      height: videoDesc.height,\n      duration: videoDesc.duration | 0,\n      name: videoDesc.filename,\n      size: videoDesc.size | 0,\n    }\n  };\n\n  if (videoDesc.urlPromise) {\n    ex.data._tempPreview = videoDesc._tempPreview;\n    ex.data._processing = true;\n    videoDesc.urlPromise.then(\n      urls => {\n        ex.data.ref = urls[0];\n        ex.data.preref = urls[1];\n        ex.data._tempPreview = undefined;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Description of an audio recording to attach.\n * @typedef {Object} AudioDesc\n * @memberof Drafty\n *\n * @property {string} mime - mime-type of the audio, e.g. \"audio/ogg\".\n * @property {string} refurl - reference to the content. Could be null/undefined.\n * @property {string} bits - base64-encoded audio content. Could be null/undefined.\n * @property {integer} duration - duration of the record in milliseconds.\n * @property {string} preview - base64 encoded short array of amplitude values 0..100.\n * @property {string} filename - file name suggestion for downloading the audio.\n * @property {integer} size - size of the recording in bytes. Treat is as an untrusted hint.\n * @property {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Insert audio recording into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add audio record to.\n * @param {integer} at - index where the object is inserted. The length of the record is always 1.\n * @param {AudioDesc} audioDesc - object with the audio paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertAudio = function(content, at, audioDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'AU',\n    data: {\n      mime: audioDesc.mime,\n      val: audioDesc.bits,\n      duration: audioDesc.duration | 0,\n      preview: audioDesc.preview,\n      name: audioDesc.filename,\n      size: audioDesc.size | 0,\n      ref: audioDesc.refurl\n    }\n  };\n\n  if (audioDesc.urlPromise) {\n    ex.data._processing = true;\n    audioDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Create a (self-contained) video call Drafty document.\n * @memberof Drafty\n * @static\n * @param {boolean} audioOnly <code>true</code> if the call is initially audio-only.\n * @returns Video Call drafty document.\n */\nDrafty.videoCall = function(audioOnly) {\n  const content = {\n    txt: ' ',\n    fmt: [{\n      at: 0,\n      len: 1,\n      key: 0\n    }],\n    ent: [{\n      tp: 'VC',\n      data: {\n        aonly: audioOnly\n      },\n    }]\n  };\n  return content;\n}\n\n/**\n * Update video call (VC) entity with the new status and duration.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - VC document to update.\n * @param {object} params - new video call parameters.\n * @param {string} params.state - state of video call.\n * @param {number} params.duration - duration of the video call in milliseconds.\n *\n * @returns the same document with update applied.\n */\nDrafty.updateVideoCall = function(content, params) {\n  // The video element could be just a format or a format + entity.\n  // Must ensure it's the latter first.\n  const fmt = ((content || {}).fmt || [])[0];\n  if (!fmt) {\n    // Unrecognized content.\n    return content;\n  }\n\n  let ent;\n  if (fmt.tp == 'VC') {\n    // Just a format, convert to format + entity.\n    delete fmt.tp;\n    fmt.key = 0;\n    ent = {\n      tp: 'VC'\n    };\n    content.ent = [ent];\n  } else {\n    ent = (content.ent || [])[fmt.key | 0];\n    if (!ent || ent.tp != 'VC') {\n      // Not a VC entity.\n      return content;\n    }\n  }\n  ent.data = ent.data || {};\n  Object.assign(ent.data, params);\n  return content;\n}\n\n/**\n * Create a quote to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {string} header - Quote header (title, etc.).\n * @param {string} uid - UID of the author to mention.\n * @param {Drafty} body - Body of the quoted message.\n *\n * @returns Reply quote Drafty doc with the quote formatting.\n */\nDrafty.quote = function(header, uid, body) {\n  const quote = Drafty.append(Drafty.appendLineBreak(Drafty.mention(header, uid)), body);\n\n  // Wrap into a quote.\n  quote.fmt.push({\n    at: 0,\n    len: stringToGraphemes(quote.txt).length,\n    tp: 'QQ'\n  });\n\n  return quote;\n}\n\n/**\n * Create a Drafty document with a mention.\n *\n * @param {string} name - mentioned name.\n * @param {string} uid - mentioned user ID.\n *\n * @returns {Drafty} document with the mention.\n */\nDrafty.mention = function(name, uid) {\n  return {\n    txt: name || '',\n    fmt: [{\n      at: 0,\n      len: stringToGraphemes(name || '').length,\n      key: 0\n    }],\n    ent: [{\n      tp: 'MN',\n      data: {\n        val: uid\n      }\n    }]\n  };\n}\n\n/**\n * Append a link to a Drafty document.\n *\n * @param {Drafty} content - Drafty document to append link to.\n * @param {Object} linkData - Link info in format <code>{txt: 'ankor text', url: 'http://...'}</code>.\n *\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.appendLink = function(content, linkData) {\n  content = content || {\n    txt: ''\n  };\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: content.txt.length,\n    len: linkData.txt.length,\n    key: content.ent.length\n  });\n  content.txt += linkData.txt;\n\n  const ex = {\n    tp: 'LN',\n    data: {\n      url: linkData.url\n    }\n  }\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Append image to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add image to.\n * @param {ImageDesc} imageDesc - object with image paramenets.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendImage = function(content, imageDesc) {\n  content = content || {\n    txt: ''\n  };\n  content.txt += ' ';\n  return Drafty.insertImage(content, content.txt.length - 1, imageDesc);\n}\n\n/**\n * Append audio recodring to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add recording to.\n * @param {AudioDesc} audioDesc - object with audio data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendAudio = function(content, audioDesc) {\n  content = content || {\n    txt: ''\n  };\n  content.txt += ' ';\n  return Drafty.insertAudio(content, content.txt.length - 1, audioDesc);\n}\n\n/**\n * Description of a file to attach.\n * @typedef {Object} AttachmentDesc\n * @memberof Drafty\n *\n * @property {string} mime - mime-type of the attachment, e.g. \"application/octet-stream\"\n * @property {string} data - base64-encoded in-band content of small attachments. Could be null/undefined.\n * @property {string} filename - file name suggestion for downloading the attachment.\n * @property {integer} size - size of the file in bytes. Treat is as an untrusted hint.\n * @property {string} refurl - reference to the out-of-band content. Could be null/undefined.\n * @property {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Attach file to Drafty content. Either as a blob or as a reference.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to attach file to.\n * @param {AttachmentDesc} object - containing attachment description and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.attachFile = function(content, attachmentDesc) {\n  content = content || {\n    txt: ''\n  };\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: -1,\n    len: 0,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'EX',\n    data: {\n      mime: attachmentDesc.mime,\n      val: attachmentDesc.data,\n      name: attachmentDesc.filename,\n      ref: attachmentDesc.refurl,\n      size: attachmentDesc.size | 0\n    }\n  }\n  if (attachmentDesc.urlPromise) {\n    ex.data._processing = true;\n    attachmentDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        /* catch the error, otherwise it will appear in the console. */\n        ex.data._processing = undefined;\n      }\n    );\n  }\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Wraps drafty document into a simple formatting style.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - document or string to wrap into a style.\n * @param {string} style - two-letter style to wrap into.\n * @param {number} at - index where the style starts, default 0.\n * @param {number} len - length of the form content, default all of it.\n *\n * @return {Drafty} updated document.\n */\nDrafty.wrapInto = function(content, style, at, len) {\n  if (typeof content == 'string') {\n    content = {\n      txt: content\n    };\n  }\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at || 0,\n    len: len || content.txt.length,\n    tp: style,\n  });\n\n  return content;\n}\n\n/**\n * Wraps content into an interactive form.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - to wrap into a form.\n * @param {number} at - index where the forms starts.\n * @param {number} len - length of the form content.\n *\n * @return {Drafty} updated document.\n */\nDrafty.wrapAsForm = function(content, at, len) {\n  return Drafty.wrapInto(content, 'FM', at, len);\n}\n\n/**\n * Insert clickable button into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - Drafty document to insert button to or a string to be used as button text.\n * @param {number} at - location where the button is inserted.\n * @param {number} len - the length of the text to be used as button title.\n * @param {string} name - the button. Client should return it to the server when the button is clicked.\n * @param {string} actionType - the type of the button, one of 'url' or 'pub'.\n * @param {string} actionValue - the value to return on click:\n * @param {string} refUrl - the URL to go to when the 'url' button is clicked.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertButton = function(content, at, len, name, actionType, actionValue, refUrl) {\n  if (typeof content == 'string') {\n    content = {\n      txt: content\n    };\n  }\n\n  if (!content || !content.txt || content.txt.length < at + len) {\n    return null;\n  }\n\n  if (len <= 0 || ['url', 'pub'].indexOf(actionType) == -1) {\n    return null;\n  }\n  // Ensure refUrl is a string.\n  if (actionType == 'url' && !refUrl) {\n    return null;\n  }\n  refUrl = '' + refUrl;\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: len,\n    key: content.ent.length\n  });\n  content.ent.push({\n    tp: 'BN',\n    data: {\n      act: actionType,\n      val: actionValue,\n      ref: refUrl,\n      name: name\n    }\n  });\n\n  return content;\n}\n\n/**\n * Append clickable button to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - Drafty document to insert button to or a string to be used as button text.\n * @param {string} title - the text to be used as button title.\n * @param {string} name - the button. Client should return it to the server when the button is clicked.\n * @param {string} actionType - the type of the button, one of 'url' or 'pub'.\n * @param {string} actionValue - the value to return on click:\n * @param {string} refUrl - the URL to go to when the 'url' button is clicked.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendButton = function(content, title, name, actionType, actionValue, refUrl) {\n  content = content || {\n    txt: ''\n  };\n  const at = content.txt.length;\n  content.txt += title;\n  return Drafty.insertButton(content, at, title.length, name, actionType, actionValue, refUrl);\n}\n\n/**\n * Attach a generic JS object. The object is attached as a json string.\n * Intended for representing a form response.\n *\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - Drafty document to attach file to.\n * @param {Object} data - data to convert to json string and attach.\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.attachJSON = function(content, data) {\n  content = content || {\n    txt: ''\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: -1,\n    len: 0,\n    key: content.ent.length\n  });\n\n  content.ent.push({\n    tp: 'EX',\n    data: {\n      mime: DRAFTY_FR_MIME_TYPE,\n      val: data\n    }\n  });\n\n  return content;\n}\n/**\n * Append line break to a Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - Drafty document to append linebreak to.\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.appendLineBreak = function(content) {\n  content = content || {\n    txt: ''\n  };\n  content.fmt = content.fmt || [];\n  content.fmt.push({\n    at: stringToGraphemes(content.txt).length,\n    len: 1,\n    tp: 'BR'\n  });\n  content.txt += ' ';\n\n  return content;\n}\n/**\n * Given Drafty document, convert it to HTML.\n * No attempt is made to strip pre-existing html markup.\n * This is potentially unsafe because <code>content.txt</code> may contain malicious HTML\n * markup.\n * @memberof Tinode.Drafty\n * @static\n *\n * @param {Drafty} doc - document to convert.\n *\n * @returns {string} HTML-representation of content.\n */\nDrafty.UNSAFE_toHTML = function(doc) {\n  const tree = draftyToTree(doc);\n  const htmlFormatter = function(type, data, values) {\n    const tag = DECORATORS[type];\n    let result = values ? values.join('') : '';\n    if (tag) {\n      result = tag.open(data) + result + tag.close(data);\n    }\n    return result;\n  };\n  return treeBottomUp(tree, htmlFormatter, 0);\n}\n\n/**\n * Callback for applying custom formatting to a Drafty document.\n * Called once for each style span.\n * @memberof Drafty\n * @static\n *\n * @callback Formatter\n * @param {string} style - style code such as \"ST\" or \"IM\".\n * @param {Object} data - entity's data.\n * @param {Object} values - possibly styled subspans contained in this style span.\n * @param {number} index - index of the element guaranteed to be unique.\n */\n\n/**\n * Convert Drafty document to a representation suitable for display.\n * The <code>context</code> may expose a function <code>getFormatter(style)</code>. If it's available\n * it will call it to obtain a <code>formatter</code> for a subtree of styles under the <code>style</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|Object} content - Drafty document to transform.\n * @param {Formatter} formatter - callback which formats individual elements.\n * @param {Object} context - context provided to formatter as <code>this</code>.\n *\n * @return {Object} transformed object\n */\nDrafty.format = function(original, formatter, context) {\n  return treeBottomUp(draftyToTree(original), formatter, 0, [], context);\n}\n\n/**\n * Shorten Drafty document making the drafty text no longer than the limit.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characrets to shorten to.\n * @param {boolean} light - remove heavy data from entities.\n * @returns new shortened Drafty object leaving the original intact.\n */\nDrafty.shorten = function(original, limit, light) {\n  let tree = draftyToTree(original);\n  tree = shortenTree(tree, limit, '…');\n  if (tree && light) {\n    tree = lightEntity(tree);\n  }\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Transform Drafty doc for forwarding: strip leading @mention and any leading line breaks or whitespace.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @returns converted Drafty object leaving the original intact.\n */\nDrafty.forwardedContent = function(original) {\n  let tree = draftyToTree(original);\n  const rmMention = function(node) {\n    if (node.type == 'MN') {\n      if (!node.parent || !node.parent.type) {\n        return null;\n      }\n    }\n    return node;\n  }\n  // Strip leading mention.\n  tree = treeTopDown(tree, rmMention);\n  // Remove leading whitespace.\n  tree = lTrim(tree);\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Prepare Drafty doc for wrapping into QQ as a reply:\n *  - Replace forwarding mention with symbol '➦' and remove data (UID).\n *  - Remove quoted text completely.\n *  - Replace line breaks with spaces.\n *  - Strip entities of heavy content.\n *  - Move attachments to the end of the document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characters to shorten to.\n * @returns converted Drafty object leaving the original intact.\n */\nDrafty.replyContent = function(original, limit) {\n  const convMNnQQnBR = function(node) {\n    if (node.type == 'QQ') {\n      return null;\n    } else if (node.type == 'MN') {\n      if ((!node.parent || !node.parent.type) && (node.text || '').startsWith('➦')) {\n        node.text = '➦';\n        delete node.children;\n        delete node.data;\n      }\n    } else if (node.type == 'BR') {\n      node.text = ' ';\n      delete node.type;\n      delete node.children;\n    }\n    return node;\n  }\n\n  let tree = draftyToTree(original);\n  if (!tree) {\n    return original;\n  }\n\n  // Strip leading mention.\n  tree = treeTopDown(tree, convMNnQQnBR);\n  // Move attachments to the end of the doc.\n  tree = attachmentsToEnd(tree, MAX_PREVIEW_ATTACHMENTS);\n  // Shorten the doc.\n  tree = shortenTree(tree, limit, '…');\n  // Strip heavy elements except IM.data['val'] and VD.data['preview'] (have to keep them to generate previews later).\n  const filter = node => {\n    switch (node.type) {\n      case 'IM':\n        return ['val'];\n      case 'VD':\n        return ['preview'];\n    }\n    return null;\n  };\n  tree = lightEntity(tree, filter);\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n\n/**\n * Generate drafty preview:\n *  - Shorten the document.\n *  - Strip all heavy entity data leaving just inline styles and entity references.\n *  - Replace line breaks with spaces.\n *  - Replace content of QQ with a space.\n *  - Replace forwarding mention with symbol '➦'.\n * move all attachments to the end of the document and make them visible.\n * The <code>context</code> may expose a function <code>getFormatter(style)</code>. If it's available\n * it will call it to obtain a <code>formatter</code> for a subtree of styles under the <code>style</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characters to shorten to.\n * @param {boolean} forwarding - this a forwarding message preview.\n * @returns new shortened Drafty object leaving the original intact.\n */\nDrafty.preview = function(original, limit, forwarding) {\n  let tree = draftyToTree(original);\n\n  // Move attachments to the end.\n  tree = attachmentsToEnd(tree, MAX_PREVIEW_ATTACHMENTS);\n\n  // Convert leading mention to '➦' and replace QQ and BR with a space ' '.\n  const convMNnQQnBR = function(node) {\n    if (node.type == 'MN') {\n      if ((!node.parent || !node.parent.type) && (node.text || '').startsWith('➦')) {\n        node.text = '➦';\n        delete node.children;\n      }\n    } else if (node.type == 'QQ') {\n      node.text = ' ';\n      delete node.children;\n    } else if (node.type == 'BR') {\n      node.text = ' ';\n      delete node.children;\n      delete node.type;\n    }\n    return node;\n  }\n  tree = treeTopDown(tree, convMNnQQnBR);\n\n  tree = shortenTree(tree, limit, '…');\n  if (forwarding) {\n    // Keep some IM and VD data for preview.\n    const filter = {\n      IM: ['val'],\n      VD: ['preview']\n    };\n    tree = lightEntity(tree, node => {\n      return filter[node.type];\n    });\n  } else {\n    tree = lightEntity(tree);\n  }\n\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Given Drafty document, convert it to plain text.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to convert to plain text.\n * @returns {string} plain-text representation of the drafty document.\n */\nDrafty.toPlainText = function(content) {\n  return typeof content == 'string' ? content : content.txt;\n}\n\n/**\n * Check if the document has no markup and no entities.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - content to check for presence of markup.\n * @returns <code>true</code> is content is plain text, <code>false</code> otherwise.\n */\nDrafty.isPlainText = function(content) {\n  return typeof content == 'string' || !(content.fmt || content.ent);\n}\n\n/**\n * Convert document to plain text with markdown. All elements which cannot\n * be represented in markdown are stripped.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to convert to plain text with markdown.\n */\nDrafty.toMarkdown = function(content) {\n  let tree = draftyToTree(content);\n  const mdFormatter = function(type, _, values) {\n    const def = FORMAT_TAGS[type];\n    let result = (values ? values.join('') : '');\n    if (def) {\n      if (def.isVoid) {\n        result = def.md_tag || '';\n      } else if (def.md_tag) {\n        result = def.md_tag + result + def.md_tag;\n      }\n    }\n    return result;\n  };\n  return treeBottomUp(tree, mdFormatter, 0);\n}\n\n/**\n * Checks if the object represets is a valid Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - content to check for validity.\n * @returns <code>true</code> is content is valid, <code>false</code> otherwise.\n */\nDrafty.isValid = function(content) {\n  if (!content) {\n    return false;\n  }\n\n  const {\n    txt,\n    fmt,\n    ent\n  } = content;\n\n  if (!txt && txt !== '' && !fmt && !ent) {\n    return false;\n  }\n\n  const txt_type = typeof txt;\n  if (txt_type != 'string' && txt_type != 'undefined' && txt !== null) {\n    return false;\n  }\n\n  if (typeof fmt != 'undefined' && !Array.isArray(fmt) && fmt !== null) {\n    return false;\n  }\n\n  if (typeof ent != 'undefined' && !Array.isArray(ent) && ent !== null) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Check if the drafty document has attachments: style EX and outside of normal rendering flow,\n * i.e. <code>at = -1</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to check for attachments.\n * @returns <code>true</code> if there are attachments.\n */\nDrafty.hasAttachments = function(content) {\n  if (!Array.isArray(content.fmt)) {\n    return false;\n  }\n  for (let i in content.fmt) {\n    const fmt = content.fmt[i];\n    if (fmt && fmt.at < 0) {\n      const ent = content.ent[fmt.key | 0];\n      return ent && ent.tp == 'EX' && ent.data;\n    }\n  }\n  return false;\n}\n\n/**\n * Callback for enumerating entities in a Drafty document.\n * Called once for each entity.\n * @memberof Drafty\n * @static\n *\n * @callback EntityCallback\n * @param {Object} data entity data.\n * @param {string} entity type.\n * @param {number} index entity's index in `content.ent`.\n *\n * @return 'true-ish' to stop processing, 'false-ish' otherwise.\n */\n\n/**\n * Enumerate attachments: style EX and outside of normal rendering flow, i.e. <code>at = -1</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to process for attachments.\n * @param {EntityCallback} callback - callback to call for each attachment.\n * @param {Object} context - value of \"this\" for callback.\n */\nDrafty.attachments = function(content, callback, context) {\n  if (!Array.isArray(content.fmt)) {\n    return;\n  }\n  let count = 0;\n  for (let i in content.fmt) {\n    let fmt = content.fmt[i];\n    if (fmt && fmt.at < 0) {\n      const ent = content.ent[fmt.key | 0];\n      if (ent && ent.tp == 'EX' && ent.data) {\n        if (callback.call(context, ent.data, count++, 'EX')) {\n          break;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Check if the drafty document has entities.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to check for entities.\n * @returns <code>true</code> if there are entities.\n */\nDrafty.hasEntities = function(content) {\n  return content.ent && content.ent.length > 0;\n}\n\n/**\n * Enumerate entities. Enumeration stops if callback returns 'true'.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with entities to enumerate.\n * @param {EntityCallback} callback - callback to call for each entity.\n * @param {Object} context - value of \"this\" for callback.\n *\n */\nDrafty.entities = function(content, callback, context) {\n  if (content.ent && content.ent.length > 0) {\n    for (let i in content.ent) {\n      if (content.ent[i]) {\n        if (callback.call(context, content.ent[i].data, i, content.ent[i].tp)) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback for enumerating styles (inline formats) in a Drafty document.\n * Called once for each style.\n * @memberof Drafty\n * @static\n *\n * @callback StyleCallback\n * @param {string} tp - format type.\n * @param {number} at - starting position of the format in text.\n * @param {number} len - extent of the format in characters.\n * @param {number} key - index of the entity if format is a reference.\n * @param {number} index - style's index in `content.fmt`.\n *\n * @return 'true-ish' to stop processing, 'false-ish' otherwise.\n */\n\n/**\n * Enumerate styles (inline formats). Enumeration stops if callback returns 'true'.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with styles (formats) to enumerate.\n * @param {StyleCallback} callback - callback to call for each format.\n * @param {Object} context - value of \"this\" for callback.\n */\nDrafty.styles = function(content, callback, context) {\n  if (content.fmt && content.fmt.length > 0) {\n    for (let i in content.fmt) {\n      const fmt = content.fmt[i];\n      if (fmt) {\n        if (callback.call(context, fmt.tp, fmt.at, fmt.len, fmt.key, i)) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove unrecognized fields from entity data\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with entities to enumerate.\n * @returns content.\n */\nDrafty.sanitizeEntities = function(content) {\n  if (content && content.ent && content.ent.length > 0) {\n    for (let i in content.ent) {\n      const ent = content.ent[i];\n      if (ent && ent.data) {\n        const data = copyEntData(ent.data);\n        if (data) {\n          content.ent[i].data = data;\n        } else {\n          delete content.ent[i].data;\n        }\n      }\n    }\n  }\n  return content;\n}\n\n/**\n * Given the entity, get URL which can be used for downloading\n * entity data.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the URl from.\n * @returns {string} URL to download entity data or <code>null</code>.\n */\nDrafty.getDownloadUrl = function(entData) {\n  let url = null;\n  if (!Drafty.isFormResponseType(entData.mime) && entData.val) {\n    url = base64toObjectUrl(entData.val, entData.mime, Drafty.logger);\n  } else if (typeof entData.ref == 'string') {\n    url = entData.ref;\n  }\n  return url;\n}\n\n/**\n * Check if the entity data is not ready for sending, such as being uploaded to the server.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entity.data to get the URl from.\n * @returns {boolean} true if upload is in progress, false otherwise.\n */\nDrafty.isProcessing = function(entData) {\n  return !!entData._processing;\n}\n\n/**\n * Given the entity, get URL which can be used for previewing\n * the entity.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entity.data to get the URl from.\n *\n * @returns {string} url for previewing or null if no such url is available.\n */\nDrafty.getPreviewUrl = function(entData) {\n  return entData.val ? base64toObjectUrl(entData.val, entData.mime, Drafty.logger) : null;\n}\n\n/**\n * Get approximate size of the entity.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the size for.\n * @returns {number} size of entity data in bytes.\n */\nDrafty.getEntitySize = function(entData) {\n  // Either size hint or length of value. The value is base64 encoded,\n  // the actual object size is smaller than the encoded length.\n  return entData.size ? entData.size : entData.val ? (entData.val.length * 0.75) | 0 : 0;\n}\n\n/**\n * Get entity mime type.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the type for.\n * @returns {string} mime type of entity.\n */\nDrafty.getEntityMimeType = function(entData) {\n  return entData.mime || 'text/plain';\n}\n\n/**\n * Get HTML tag for a given two-letter style name.\n * @memberof Drafty\n * @static\n *\n * @param {string} style - two-letter style, like ST or LN.\n *\n * @returns {string} HTML tag name if style is found, {code: undefined} if style is falsish or not found.\n */\nDrafty.tagName = function(style) {\n  return FORMAT_TAGS[style] && FORMAT_TAGS[style].html_tag;\n}\n\n/**\n * For a given data bundle generate an object with HTML attributes,\n * for instance, given {url: \"http://www.example.com/\"} return\n * {href: \"http://www.example.com/\"}\n * @memberof Drafty\n * @static\n *\n * @param {string} style - two-letter style to generate attributes for.\n * @param {Object} data - data bundle to convert to attributes\n *\n * @returns {Object} object with HTML attributes.\n */\nDrafty.attrValue = function(style, data) {\n  if (data && DECORATORS[style] && DECORATORS[style].props) {\n    return DECORATORS[style].props(data);\n  }\n\n  return undefined;\n}\n\n/**\n * Drafty MIME type.\n * @memberof Drafty\n * @static\n *\n * @returns {string} content-Type \"text/x-drafty\".\n */\nDrafty.getContentType = function() {\n  return DRAFTY_MIME_TYPE;\n}\n\n/**\n * Check if the given mime-type is a MIME type of drafty form response.\n * @memberof Drafty\n * @static\n *\n * @returns {boolean} <code>true</code> if given mime type is drafty form response, <code>false</code> otherwise.\n */\nDrafty.isFormResponseType = function(mimeType) {\n  return mimeType === DRAFTY_FR_MIME_TYPE ||\n    mimeType === DRAFTY_FR_MIME_TYPE_LEGACY;\n}\n\n// =================\n// Utility methods.\n// =================\n\n// Take a string and defined earlier style spans, re-compose them into a tree where each leaf is\n// a same-style (including unstyled) string. I.e. 'hello *bold _italic_* and ~more~ world' ->\n// ('hello ', (b: 'bold ', (i: 'italic')), ' and ', (s: 'more'), ' world');\n//\n// This is needed in order to clear markup, i.e. 'hello *world*' -> 'hello world' and convert\n// ranges from markup-ed offsets to plain text offsets.\nfunction chunkify(line, start, end, spans) {\n  const chunks = [];\n\n  if (spans.length == 0) {\n    return [];\n  }\n\n  for (let i in spans) {\n    // Get the next chunk from the queue\n    const span = spans[i];\n\n    // Grab the initial unstyled chunk\n    if (span.at > start) {\n      chunks.push({\n        txt: line.slice(start, span.at)\n      });\n    }\n\n    // Grab the styled chunk. It may include subchunks.\n    const chunk = {\n      tp: span.tp\n    };\n    const chld = chunkify(line, span.at + 1, span.end, span.children);\n    if (chld.length > 0) {\n      chunk.children = chld;\n    } else {\n      chunk.txt = span.txt;\n    }\n    chunks.push(chunk);\n    start = span.end + 1; // '+1' is to skip the formatting character\n  }\n\n  // Grab the remaining unstyled chunk, after the last span\n  if (start < end) {\n    chunks.push({\n      txt: line.slice(start, end)\n    });\n  }\n\n  return chunks;\n}\n\n// Detect starts and ends of formatting spans. Unformatted spans are\n// ignored at this stage.\nfunction spannify(original, re_start, re_end, type) {\n  const result = [];\n  let index = 0;\n  let line = original.slice(0); // make a copy;\n\n  while (line.length > 0) {\n    // match[0]; // match, like '*abc*'\n    // match[1]; // match captured in parenthesis, like 'abc'\n    // match['index']; // offset where the match started.\n\n    // Find the opening token.\n    const start = re_start.exec(line);\n    if (start == null) {\n      break;\n    }\n\n    // Because javascript RegExp does not support lookbehind, the actual offset may not point\n    // at the markup character. Find it in the matched string.\n    let start_offset = start['index'] + start[0].lastIndexOf(start[1]);\n    // Clip the processed part of the string.\n    line = line.slice(start_offset + 1);\n    // start_offset is an offset within the clipped string. Convert to original index.\n    start_offset += index;\n    // Index now point to the beginning of 'line' within the 'original' string.\n    index = start_offset + 1;\n\n    // Find the matching closing token.\n    const end = re_end ? re_end.exec(line) : null;\n    if (end == null) {\n      break;\n    }\n    let end_offset = end['index'] + end[0].indexOf(end[1]);\n    // Clip the processed part of the string.\n    line = line.slice(end_offset + 1);\n    // Update offsets\n    end_offset += index;\n    // Index now points to the beginning of 'line' within the 'original' string.\n    index = end_offset + 1;\n\n    result.push({\n      txt: original.slice(start_offset + 1, end_offset),\n      children: [],\n      at: start_offset,\n      end: end_offset,\n      tp: type\n    });\n  }\n\n  return result;\n}\n\n// Convert linear array or spans into a tree representation.\n// Keep standalone and nested spans, throw away partially overlapping spans.\nfunction toSpanTree(spans) {\n  if (spans.length == 0) {\n    return [];\n  }\n\n  const tree = [spans[0]];\n  let last = spans[0];\n  for (let i = 1; i < spans.length; i++) {\n    // Keep spans which start after the end of the previous span or those which\n    // are complete within the previous span.\n    if (spans[i].at > last.end) {\n      // Span is completely outside of the previous span.\n      tree.push(spans[i]);\n      last = spans[i];\n    } else if (spans[i].end <= last.end) {\n      // Span is fully inside of the previous span. Push to subnode.\n      last.children.push(spans[i]);\n    }\n    // Span could partially overlap, ignoring it as invalid.\n  }\n\n  // Recursively rearrange the subnodes.\n  for (let i in tree) {\n    tree[i].children = toSpanTree(tree[i].children);\n  }\n\n  return tree;\n}\n\n// Convert drafty document to a tree.\nfunction draftyToTree(doc) {\n  if (!doc) {\n    return null;\n  }\n\n  doc = (typeof doc == 'string') ? {\n    txt: doc\n  } : doc;\n  let {\n    txt,\n    fmt,\n    ent\n  } = doc;\n\n  txt = txt || '';\n  if (!Array.isArray(ent)) {\n    ent = [];\n  }\n\n  if (!Array.isArray(fmt) || fmt.length == 0) {\n    if (ent.length == 0) {\n      return {\n        text: txt\n      };\n    }\n\n    // Handle special case when all values in fmt are 0 and fmt therefore is skipped.\n    fmt = [{\n      at: 0,\n      len: 0,\n      key: 0\n    }];\n  }\n\n  // Sanitize spans.\n  const spans = [];\n  const attachments = [];\n  fmt.forEach((span) => {\n    if (!span || typeof span != 'object') {\n      return;\n    }\n\n    if (!['undefined', 'number'].includes(typeof span.at)) {\n      // Present, but non-numeric 'at'.\n      return;\n    }\n    if (!['undefined', 'number'].includes(typeof span.len)) {\n      // Present, but non-numeric 'len'.\n      return;\n    }\n    let at = span.at | 0;\n    let len = span.len | 0;\n    if (len < 0) {\n      // Invalid span length.\n      return;\n    }\n\n    let key = span.key || 0;\n    if (ent.length > 0 && (typeof key != 'number' || key < 0 || key >= ent.length)) {\n      // Invalid key value.\n      return;\n    }\n\n    if (at <= -1) {\n      // Attachment. Store attachments separately.\n      attachments.push({\n        start: -1,\n        end: 0,\n        key: key\n      });\n      return;\n    } else if (at + len > stringToGraphemes(txt).length) {\n      // Span is out of bounds.\n      return;\n    }\n\n    if (!span.tp) {\n      if (ent.length > 0 && (typeof ent[key] == 'object')) {\n        spans.push({\n          start: at,\n          end: at + len,\n          key: key\n        });\n      }\n    } else {\n      spans.push({\n        type: span.tp,\n        start: at,\n        end: at + len\n      });\n    }\n  });\n\n  // Sort spans first by start index (asc) then by length (desc), then by weight.\n  spans.sort((a, b) => {\n    let diff = a.start - b.start;\n    if (diff != 0) {\n      return diff;\n    }\n    diff = b.end - a.end;\n    if (diff != 0) {\n      return diff;\n    }\n    return FMT_WEIGHT.indexOf(b.type) - FMT_WEIGHT.indexOf(a.type);\n  });\n\n  // Move attachments to the end of the list.\n  if (attachments.length > 0) {\n    spans.push(...attachments);\n  }\n\n  spans.forEach((span) => {\n    if (ent.length > 0 && !span.type && ent[span.key] && typeof ent[span.key] == 'object') {\n      span.type = ent[span.key].tp;\n      span.data = ent[span.key].data;\n    }\n\n    // Is type still undefined? Hide the invalid element!\n    if (!span.type) {\n      span.type = 'HD';\n    }\n  });\n\n  const graphemes = stringToGraphemes(txt);\n  let tree = spansToTree({}, graphemes, 0, graphemes.length, spans);\n\n  // Flatten tree nodes.\n  const flatten = function(node) {\n    if (Array.isArray(node.children) && node.children.length == 1) {\n      // Unwrap.\n      const child = node.children[0];\n      if (!node.type) {\n        const parent = node.parent;\n        node = child;\n        node.parent = parent;\n      } else if (!child.type && !child.children) {\n        node.text = child.text;\n        delete node.children;\n      }\n    }\n    return node;\n  }\n  tree = treeTopDown(tree, flatten);\n\n  return tree;\n}\n\n// Add tree node to a parent tree.\nfunction addNode(parent, n) {\n  if (!n) {\n    return parent;\n  }\n\n  if (!parent.children) {\n    parent.children = [];\n  }\n\n  // If text is present, move it to a subnode.\n  if (parent.text) {\n    parent.children.push({\n      text: parent.text,\n      parent: parent\n    });\n    delete parent.text;\n  }\n\n  n.parent = parent;\n  parent.children.push(n);\n\n  return parent;\n}\n\n// Returns a tree of nodes.\nfunction spansToTree(parent, graphemes, start, end, spans) {\n  if (!spans || spans.length == 0) {\n    if (start < end) {\n      addNode(parent, {\n        text: graphemes.slice(start, end)\n          .map(segment => segment.segment)\n          .join('')\n      });\n    }\n    return parent;\n  }\n\n  // Process subspans.\n  for (let i = 0; i < spans.length; i++) {\n    const span = spans[i];\n    if (span.start < 0 && span.type == 'EX') {\n      addNode(parent, {\n        type: span.type,\n        data: span.data,\n        key: span.key,\n        att: true\n      });\n      continue;\n    }\n\n    // Add un-styled range before the styled span starts.\n    if (start < span.start) {\n      addNode(parent, {\n        text: graphemes.slice(start, span.start)\n          .map(segment => segment.segment)\n          .join('')\n      });\n      start = span.start;\n    }\n\n    // Get all spans which are within the current span.\n    const subspans = [];\n    while (i < spans.length - 1) {\n      const inner = spans[i + 1];\n      if (inner.start < 0) {\n        // Attachments are in the end. Stop.\n        break;\n      } else if (inner.start < span.end) {\n        if (inner.end <= span.end) {\n          const tag = FORMAT_TAGS[inner.tp] || {};\n          if (inner.start < inner.end || tag.isVoid) {\n            // Valid subspan: completely within the current span and\n            // either non-zero length or zero length is acceptable.\n            subspans.push(inner);\n          }\n        }\n        i++;\n        // Overlapping subspans are ignored.\n      } else {\n        // Past the end of the current span. Stop.\n        break;\n      }\n    }\n\n    addNode(parent, spansToTree({\n      type: span.type,\n      data: span.data,\n      key: span.key\n    }, graphemes, start, span.end, subspans));\n    start = span.end;\n  }\n\n  // Add the last unformatted range.\n  if (start < end) {\n    addNode(parent, {\n      text: graphemes\n        .slice(start, end)\n        .map((segment) => segment.segment)\n        .join('')\n    });\n  }\n\n  return parent;\n}\n\n// Append a tree to a Drafty doc.\nfunction treeToDrafty(doc, tree, keymap) {\n  if (!tree) {\n    return doc;\n  }\n\n  doc.txt = doc.txt || '';\n\n  // Checkpoint to measure length of the current tree node.\n  const start = stringToGraphemes(doc.txt).length;\n\n  if (tree.text) {\n    doc.txt += tree.text;\n  } else if (Array.isArray(tree.children)) {\n    tree.children.forEach((c) => {\n      treeToDrafty(doc, c, keymap);\n    });\n  }\n\n  if (tree.type) {\n    const len = stringToGraphemes(doc.txt).length - start;\n    doc.fmt = doc.fmt || [];\n    if (Object.keys(tree.data || {}).length > 0) {\n      doc.ent = doc.ent || [];\n      const newKey = (typeof keymap[tree.key] == 'undefined') ? doc.ent.length : keymap[tree.key];\n      keymap[tree.key] = newKey;\n      doc.ent[newKey] = {\n        tp: tree.type,\n        data: tree.data\n      };\n      if (tree.att) {\n        // Attachment.\n        doc.fmt.push({\n          at: -1,\n          len: 0,\n          key: newKey\n        });\n      } else {\n        doc.fmt.push({\n          at: start,\n          len: len,\n          key: newKey\n        });\n      }\n    } else {\n      doc.fmt.push({\n        tp: tree.type,\n        at: start,\n        len: len\n      });\n    }\n  }\n  return doc;\n}\n\n// Traverse the tree top down transforming the nodes: apply transformer to every tree node.\nfunction treeTopDown(src, transformer, context) {\n  if (!src) {\n    return null;\n  }\n\n  let dst = transformer.call(context, src);\n  if (!dst || !dst.children) {\n    return dst;\n  }\n\n  const children = [];\n  for (let i in dst.children) {\n    let n = dst.children[i];\n    if (n) {\n      n = treeTopDown(n, transformer, context);\n      if (n) {\n        children.push(n);\n      }\n    }\n  }\n\n  if (children.length == 0) {\n    dst.children = null;\n  } else {\n    dst.children = children;\n  }\n\n  return dst;\n}\n\n// Traverse the tree bottom-up: apply formatter to every node.\n// The formatter must maintain its state through context.\nfunction treeBottomUp(src, formatter, index, stack, context) {\n  if (!src) {\n    return null;\n  }\n\n  if (stack && src.type) {\n    stack.push(src.type);\n  }\n\n  let values = [];\n  for (let i in src.children) {\n    const n = treeBottomUp(src.children[i], formatter, i, stack, context);\n    if (n) {\n      values.push(n);\n    }\n  }\n  if (values.length == 0) {\n    if (src.text) {\n      values = [src.text];\n    } else {\n      values = null;\n    }\n  }\n\n  if (stack && src.type) {\n    stack.pop();\n  }\n\n  return formatter.call(context, src.type, src.data, values, index, stack);\n}\n\n// Clip tree to the provided limit.\nfunction shortenTree(tree, limit, tail) {\n  if (!tree) {\n    return null;\n  }\n\n  if (tail) {\n    limit -= tail.length;\n  }\n\n  const shortener = function(node) {\n    if (limit <= -1) {\n      // Limit -1 means the doc was already clipped.\n      return null;\n    }\n\n    if (node.att) {\n      // Attachments are unchanged.\n      return node;\n    }\n    if (limit == 0) {\n      node.text = tail;\n      limit = -1;\n    } else if (node.text) {\n      const graphemes = stringToGraphemes(node.text);\n      if (graphemes.length > limit) {\n        node.text = graphemes\n          .slice(0, limit)\n          .map((segment) => segment.segment)\n          .join('') + tail;\n        limit = -1;\n      } else {\n        limit -= graphemes.length;\n      }\n    }\n    return node;\n  }\n\n  return treeTopDown(tree, shortener);\n}\n\n// Strip heavy entities from a tree.\nfunction lightEntity(tree, allow) {\n  const lightCopy = node => {\n    const data = copyEntData(node.data, true, allow ? allow(node) : null);\n    if (data) {\n      node.data = data;\n    } else {\n      delete node.data;\n    }\n    return node;\n  }\n  return treeTopDown(tree, lightCopy);\n}\n\n// Remove spaces and breaks on the left.\nfunction lTrim(tree) {\n  if (tree.type == 'BR') {\n    tree = null;\n  } else if (tree.text) {\n    if (!tree.type) {\n      tree.text = tree.text.trimStart();\n      if (!tree.text) {\n        tree = null;\n      }\n    }\n  } else if (!tree.type && tree.children && tree.children.length > 0) {\n    const c = lTrim(tree.children[0]);\n    if (c) {\n      tree.children[0] = c;\n    } else {\n      tree.children.shift();\n      if (!tree.type && tree.children.length == 0) {\n        tree = null;\n      }\n    }\n  }\n  return tree;\n}\n\n// Move attachments to the end. Attachments must be at the top level, no need to traverse the tree.\nfunction attachmentsToEnd(tree, limit) {\n  if (!tree) {\n    return null;\n  }\n\n  if (tree.att) {\n    tree.text = ' ';\n    delete tree.att;\n    delete tree.children;\n  } else if (tree.children) {\n    const attachments = [];\n    const children = [];\n    for (let i in tree.children) {\n      const c = tree.children[i];\n      if (c.att) {\n        if (attachments.length == limit) {\n          // Too many attachments to preview;\n          continue;\n        }\n        if (Drafty.isFormResponseType(c.data['mime'])) {\n          // Form response attachments are not shown in preview.\n          continue;\n        }\n\n        delete c.att;\n        delete c.children;\n        c.text = ' ';\n        attachments.push(c);\n      } else {\n        children.push(c);\n      }\n    }\n    tree.children = children.concat(attachments);\n  }\n  return tree;\n}\n\n// Get a list of entities from a text.\nfunction extractEntities(line) {\n  let match;\n  let extracted = [];\n  ENTITY_TYPES.forEach((entity) => {\n    while ((match = entity.re.exec(line)) !== null) {\n      extracted.push({\n        offset: match['index'],\n        len: match[0].length,\n        unique: match[0],\n        data: entity.pack(match[0]),\n        type: entity.name\n      });\n    }\n  });\n\n  if (extracted.length == 0) {\n    return extracted;\n  }\n\n  // Remove entities detected inside other entities, like #hashtag in a URL.\n  extracted.sort((a, b) => {\n    return a.offset - b.offset;\n  });\n\n  let idx = -1;\n  extracted = extracted.filter((el) => {\n    const result = (el.offset > idx);\n    idx = el.offset + el.len;\n    return result;\n  });\n\n  return extracted;\n}\n\n// Convert the chunks into format suitable for serialization.\nfunction draftify(chunks, startAt) {\n  let plain = '';\n  let ranges = [];\n  for (let i in chunks) {\n    const chunk = chunks[i];\n    if (!chunk.txt) {\n      const drafty = draftify(chunk.children, plain.length + startAt);\n      chunk.txt = drafty.txt;\n      ranges = ranges.concat(drafty.fmt);\n    }\n\n    if (chunk.tp) {\n      ranges.push({\n        at: plain.length + startAt,\n        len: chunk.txt.length,\n        tp: chunk.tp\n      });\n    }\n\n    plain += chunk.txt;\n  }\n  return {\n    txt: plain,\n    fmt: ranges\n  };\n}\n\n// Create a copy of entity data with (light=false) or without (light=true) the large payload.\n// The array 'allow' contains a list of fields exempt from stripping.\nfunction copyEntData(data, light, allow) {\n  if (data && Object.entries(data).length > 0) {\n    allow = allow || [];\n    const dc = {};\n    ALLOWED_ENT_FIELDS.forEach(key => {\n      if (data[key]) {\n        if (light && !allow.includes(key) &&\n          (typeof data[key] == 'string' || Array.isArray(data[key])) &&\n          data[key].length > MAX_PREVIEW_DATA_SIZE) {\n          return;\n        }\n        if (typeof data[key] == 'object') {\n          return;\n        }\n        dc[key] = data[key];\n      }\n    });\n\n    if (Object.entries(dc).length != 0) {\n      return dc;\n    }\n  }\n  return null;\n}\n\n// Returns true if object is empty, if undefined returns true\nfunction isEmptyObject(obj) {\n  return Object.keys(obj ?? {}).length == 0;\n};\n\n\n// Returns an array (of length equal to the length of the original string) such that each index\n// denotes the position of char in string in a grapheme array (created from that string)\n// Eg: string: \"Hi👋🏼Hi\" -> [0,1,2,2,2,2,3,4]\nfunction graphemeIndices(graphemes) {\n  const result = [];\n  let graphemeIndex = 0;\n  let charIndex = 0;\n\n  // Iterate over the grapheme clusters.\n  for (const {\n      segment\n    }\n    of graphemes) {\n    // Map the character indices to the grapheme index.\n    for (let i = 0; i < segment.length; i++) {\n      result[charIndex + i] = graphemeIndex;\n    }\n\n    // Increment the character index by the length of the grapheme cluster.\n    charIndex += segment.length;\n\n    // Increment the grapheme index.\n    graphemeIndex++;\n  }\n\n  return result;\n}\n\n// Convert fmt.at and fmt.len from character-expressed index and length to grapheme-expressed\n// index and length.\nfunction toGraphemeValues(fmt, segments, txt) {\n  segments = segments ?? segmenter.segment(txt);\n\n  const indices = graphemeIndices(segments);\n\n  const correctAt = indices[fmt.at];\n  const correctLen = fmt.at + fmt.len <= txt.length ?\n    indices[fmt.at + fmt.len - 1] - correctAt : fmt.len;\n\n  return {\n    at: correctAt,\n    len: correctLen + 1\n  };\n}\n\n// Convert string to graphme cluster array.\nfunction stringToGraphemes(str) {\n  return Array.from(segmenter.segment(str));\n}\n\nif (typeof module != 'undefined') {\n  module.exports = Drafty;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @file Access control model.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\n/**\n * Helper class for handling access mode.\n *\n * @class AccessMode\n * @memberof Tinode\n *\n * @param {AccessMode|Object=} acs - AccessMode to copy or access mode object received from the server.\n */\nexport default class AccessMode {\n  constructor(acs) {\n    if (acs) {\n      this.given = typeof acs.given == 'number' ? acs.given : AccessMode.decode(acs.given);\n      this.want = typeof acs.want == 'number' ? acs.want : AccessMode.decode(acs.want);\n      this.mode = acs.mode ? (typeof acs.mode == 'number' ? acs.mode : AccessMode.decode(acs.mode)) :\n        (this.given & this.want);\n    }\n  }\n\n  static #checkFlag(val, side, flag) {\n    side = side || 'mode';\n    if (['given', 'want', 'mode'].includes(side)) {\n      return ((val[side] & flag) != 0);\n    }\n    throw new Error(`Invalid AccessMode component '${side}'`);\n  }\n  /**\n   * Parse string into an access mode value.\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {string | Number} mode - either a String representation of the access mode to parse or a set of bits to assign.\n   * @returns {number} - Access mode as a numeric value.\n   */\n  static decode(str) {\n    if (!str) {\n      return null;\n    } else if (typeof str == 'number') {\n      return str & AccessMode._BITMASK;\n    } else if (str === 'N' || str === 'n') {\n      return AccessMode._NONE;\n    }\n\n    const bitmask = {\n      'J': AccessMode._JOIN,\n      'R': AccessMode._READ,\n      'W': AccessMode._WRITE,\n      'P': AccessMode._PRES,\n      'A': AccessMode._APPROVE,\n      'S': AccessMode._SHARE,\n      'D': AccessMode._DELETE,\n      'O': AccessMode._OWNER\n    };\n\n    let m0 = AccessMode._NONE;\n\n    for (let i = 0; i < str.length; i++) {\n      const bit = bitmask[str.charAt(i).toUpperCase()];\n      if (!bit) {\n        // Unrecognized bit, skip.\n        continue;\n      }\n      m0 |= bit;\n    }\n    return m0;\n  }\n  /**\n   * Convert numeric representation of the access mode into a string.\n   *\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {number} val - access mode value to convert to a string.\n   * @returns {string} - Access mode as a string.\n   */\n  static encode(val) {\n    if (val === null || val === AccessMode._INVALID) {\n      return null;\n    } else if (val === AccessMode._NONE) {\n      return 'N';\n    }\n\n    const bitmask = ['J', 'R', 'W', 'P', 'A', 'S', 'D', 'O'];\n    let res = '';\n    for (let i = 0; i < bitmask.length; i++) {\n      if ((val & (1 << i)) != 0) {\n        res = res + bitmask[i];\n      }\n    }\n    return res;\n  }\n  /**\n   * Update numeric representation of access mode with the new value. The value\n   * is one of the following:\n   *  - a string starting with <code>'+'</code> or <code>'-'</code> then the bits to add or remove, e.g. <code>'+R-W'</code> or <code>'-PS'</code>.\n   *  - a new value of access mode\n   *\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {number} val - access mode value to update.\n   * @param {string} upd - update to apply to val.\n   * @returns {number} - updated access mode.\n   */\n  static update(val, upd) {\n    if (!upd || typeof upd != 'string') {\n      return val;\n    }\n\n    let action = upd.charAt(0);\n    if (action == '+' || action == '-') {\n      let val0 = val;\n      // Split delta-string like '+ABC-DEF+Z' into an array of parts including + and -.\n      const parts = upd.split(/([-+])/);\n      // Starting iteration from 1 because String.split() creates an array with the first empty element.\n      // Iterating by 2 because we parse pairs +/- then data.\n      for (let i = 1; i < parts.length - 1; i += 2) {\n        action = parts[i];\n        const m0 = AccessMode.decode(parts[i + 1]);\n        if (m0 == AccessMode._INVALID) {\n          return val;\n        }\n        if (m0 == null) {\n          continue;\n        }\n        if (action === '+') {\n          val0 |= m0;\n        } else if (action === '-') {\n          val0 &= ~m0;\n        }\n      }\n      val = val0;\n    } else {\n      // The string is an explicit new value 'ABC' rather than delta.\n      const val0 = AccessMode.decode(upd);\n      if (val0 != AccessMode._INVALID) {\n        val = val0;\n      }\n    }\n\n    return val;\n  }\n  /**\n   * Bits present in a1 but missing in a2.\n   *\n   * @static\n   * @memberof Tinode\n   *\n   * @param {number | string} a1 - access mode to subtract from.\n   * @param {number | string} a2 - access mode to subtract.\n   * @returns {number} access mode with bits present in <code>a1</code> but missing in <code>a2</code>.\n   */\n  static diff(a1, a2) {\n    a1 = AccessMode.decode(a1);\n    a2 = AccessMode.decode(a2);\n\n    if (a1 == AccessMode._INVALID || a2 == AccessMode._INVALID) {\n      return AccessMode._INVALID;\n    }\n    return a1 & ~a2;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Custom formatter\n   */\n  toString() {\n    return '{\"mode\": \"' + AccessMode.encode(this.mode) +\n      '\", \"given\": \"' + AccessMode.encode(this.given) +\n      '\", \"want\": \"' + AccessMode.encode(this.want) + '\"}';\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Converts numeric values to strings.\n   */\n  jsonHelper() {\n    return {\n      mode: AccessMode.encode(this.mode),\n      given: AccessMode.encode(this.given),\n      want: AccessMode.encode(this.want)\n    };\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign value to 'mode'.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} m - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setMode(m) {\n    this.mode = AccessMode.decode(m);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update <code>mode</code> value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateMode(u) {\n    this.mode = AccessMode.update(this.mode, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get <code>mode</code> value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <code>mode</code> value.\n   */\n  getMode() {\n    return AccessMode.encode(this.mode);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign <code>given</code>  value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} g - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setGiven(g) {\n    this.given = AccessMode.decode(g);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'given' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateGiven(u) {\n    this.given = AccessMode.update(this.given, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get 'given' value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <b>given</b> value.\n   */\n  getGiven() {\n    return AccessMode.encode(this.given);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign 'want' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} w - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setWant(w) {\n    this.want = AccessMode.decode(w);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'want' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateWant(u) {\n    this.want = AccessMode.update(this.want, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get 'want' value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <b>want</b> value.\n   */\n  getWant() {\n    return AccessMode.encode(this.want);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get permissions present in 'want' but missing in 'given'.\n   * Inverse of {@link Tinode.AccessMode#getExcessive}\n   *\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} permissions present in <b>want</b> but missing in <b>given</b>.\n   */\n  getMissing() {\n    return AccessMode.encode(this.want & ~this.given);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get permissions present in 'given' but missing in 'want'.\n   * Inverse of {@link Tinode.AccessMode#getMissing}\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} permissions present in <b>given</b> but missing in <b>want</b>.\n   */\n  getExcessive() {\n    return AccessMode.encode(this.given & ~this.want);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'want', 'give', and 'mode' values.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {AccessMode} val - new access mode value.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateAll(val) {\n    if (val) {\n      this.updateGiven(val.given);\n      this.updateWant(val.want);\n      this.mode = this.given & this.want;\n    }\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Owner (O) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isOwner(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._OWNER);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Presence (P) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isPresencer(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._PRES);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Presence (P) flag is NOT set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isMuted(side) {\n    return !this.isPresencer(side);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Join (J) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isJoiner(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._JOIN);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Reader (R) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isReader(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._READ);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Writer (W) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isWriter(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._WRITE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Approver (A) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isApprover(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._APPROVE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if either one of Owner (O) or Approver (A) flags is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isAdmin(side) {\n    return this.isOwner(side) || this.isApprover(side);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if either one of Owner (O), Approver (A), or Sharer (S) flags is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isSharer(side) {\n    return this.isAdmin(side) || AccessMode.#checkFlag(this, side, AccessMode._SHARE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Deleter (D) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isDeleter(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._DELETE);\n  }\n}\n\nAccessMode._NONE = 0x00;\nAccessMode._JOIN = 0x01;\nAccessMode._READ = 0x02;\nAccessMode._WRITE = 0x04;\nAccessMode._PRES = 0x08;\nAccessMode._APPROVE = 0x10;\nAccessMode._SHARE = 0x20;\nAccessMode._DELETE = 0x40;\nAccessMode._OWNER = 0x80;\n\nAccessMode._BITMASK = AccessMode._JOIN | AccessMode._READ | AccessMode._WRITE | AccessMode._PRES |\n  AccessMode._APPROVE | AccessMode._SHARE | AccessMode._DELETE | AccessMode._OWNER;\nAccessMode._INVALID = 0x100000;\n","export const PACKAGE_VERSION = \"0.24.4\";\n","/**\n * @file Global constants and configuration parameters.\n *\n * @copyright 2015-2025 Tinode LLC\n */\n'use strict';\n\nimport {\n  PACKAGE_VERSION\n} from '../version.js';\n\n// Global constants\nexport const PROTOCOL_VERSION = '0'; // Major component of the version, e.g. '0' in '0.17.1'.\nexport const VERSION = PACKAGE_VERSION || '0.24';\nexport const LIBRARY = 'tinodejs/' + VERSION;\n\n// Topic name prefixes.\nexport const TOPIC_NEW = 'new';\nexport const TOPIC_NEW_CHAN = 'nch';\nexport const TOPIC_ME = 'me';\nexport const TOPIC_FND = 'fnd';\nexport const TOPIC_SYS = 'sys';\nexport const TOPIC_SLF = 'slf';\nexport const TOPIC_CHAN = 'chn';\nexport const TOPIC_GRP = 'grp';\nexport const TOPIC_P2P = 'p2p';\nexport const USER_NEW = 'new';\n\n// Starting value of a locally-generated seqId used for pending messages.\nexport const LOCAL_SEQID = 0xFFFFFFF;\n\n// Status codes.\nexport const MESSAGE_STATUS_NONE = 0; // Status not assigned.\nexport const MESSAGE_STATUS_QUEUED = 10; // Local ID assigned, in progress to be sent.\nexport const MESSAGE_STATUS_SENDING = 20; // Transmission started.\nexport const MESSAGE_STATUS_FAILED = 30; // At least one attempt was made to send the message.\nexport const MESSAGE_STATUS_FATAL = 40; // Message sending failed and it should not be retried.\nexport const MESSAGE_STATUS_SENT = 50; // Delivered to the server.\nexport const MESSAGE_STATUS_RECEIVED = 60; // Received by the client.\nexport const MESSAGE_STATUS_READ = 70; // Read by the user.\nexport const MESSAGE_STATUS_TO_ME = 80; // The message is received from another user.\n\n// Reject unresolved futures after this many milliseconds.\nexport const EXPIRE_PROMISES_TIMEOUT = 5_000;\n// Periodicity of garbage collection of unresolved futures.\nexport const EXPIRE_PROMISES_PERIOD = 1_000;\n\n// Delay before acknowledging that a message was recived.\nexport const RECV_TIMEOUT = 100;\n\n// Default number of messages to pull into memory from persistent cache.\nexport const DEFAULT_MESSAGES_PAGE = 24;\n\n// Unicode DEL character indicating data was deleted.\nexport const DEL_CHAR = '\\u2421';\n\n// Maximum number of pinnned messages;\nexport const MAX_PINNED_COUNT = 5;\n\n// Tag prefixes for alias, email, phone.\nexport const TAG_ALIAS = 'alias:';\nexport const TAG_EMAIL = 'email:';\nexport const TAG_PHONE = 'tel:';\n","/**\n * @file Throwable error with numeric error code.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nexport default class CommError extends Error {\n  constructor(message, code) {\n    super(`${message} (${code})`);\n    this.name = 'CommError';\n    this.code = code;\n  }\n}\n","/**\n * @file Utilities used in multiple places.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport AccessMode from './access-mode.js';\nimport {\n  DEL_CHAR,\n  LOCAL_SEQID\n} from './config.js';\n\n// Attempt to convert date and AccessMode strings to objects.\nexport function jsonParseHelper(key, val) {\n  // Try to convert string timestamps with optional milliseconds to Date,\n  // e.g. 2015-09-02T01:45:43[.123]Z\n  if (typeof val == 'string' && val.length >= 20 && val.length <= 24 && ['ts', 'touched', 'updated', 'created', 'when', 'deleted', 'expires'].includes(key)) {\n    const date = new Date(val);\n    if (!isNaN(date)) {\n      return date;\n    }\n  } else if (key === 'acs' && typeof val === 'object') {\n    return new AccessMode(val);\n  }\n  return val;\n}\n\n// Checks if URL is a relative url, i.e. has no 'scheme://', including the case of missing scheme '//'.\n// The scheme is expected to be RFC-compliant, e.g. [a-z][a-z0-9+.-]*\n// example.html - ok\n// https:example.com - not ok.\n// http:/example.com - not ok.\n// ' ↲ https://example.com' - not ok. (↲ means carriage return)\nexport function isUrlRelative(url) {\n  return url && !/^\\s*([a-z][a-z0-9+.-]*:|\\/\\/)/im.test(url);\n}\n\nfunction isValidDate(d) {\n  return (d instanceof Date) && !isNaN(d) && (d.getTime() != 0);\n}\n\n// RFC3339 formater of Date\nexport function rfc3339DateString(d) {\n  if (!isValidDate(d)) {\n    return undefined;\n  }\n\n  const pad = function(val, sp) {\n    sp = sp || 2;\n    return '0'.repeat(sp - ('' + val).length) + val;\n  };\n\n  const millis = d.getUTCMilliseconds();\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) +\n    'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) +\n    (millis ? '.' + pad(millis, 3) : '') + 'Z';\n}\n\n// Recursively merge src's own properties to dst.\n// Ignore properties where ignore[property] is true.\n// Array and Date objects are shallow-copied.\nexport function mergeObj(dst, src, ignore) {\n  if (typeof src != 'object') {\n    if (src === undefined) {\n      return dst;\n    }\n    if (src === DEL_CHAR) {\n      return undefined;\n    }\n    return src;\n  }\n  // JS is crazy: typeof null is 'object'.\n  if (src === null) {\n    return src;\n  }\n\n  // Handle Date\n  if (src instanceof Date && !isNaN(src)) {\n    return (!dst || !(dst instanceof Date) || isNaN(dst) || dst < src) ? src : dst;\n  }\n\n  // Access mode\n  if (src instanceof AccessMode) {\n    return new AccessMode(src);\n  }\n\n  // Handle Array\n  if (src instanceof Array) {\n    return src;\n  }\n\n  if (!dst || dst === DEL_CHAR) {\n    dst = src.constructor();\n  }\n\n  for (let prop in src) {\n    if (src.hasOwnProperty(prop) && (!ignore || !ignore[prop]) && (prop != '_noForwarding')) {\n      try {\n        dst[prop] = mergeObj(dst[prop], src[prop]);\n      } catch (err) {\n        // FIXME: probably need to log something here.\n      }\n    }\n  }\n  return dst;\n}\n\n// Update object stored in a cache. Returns updated value.\nexport function mergeToCache(cache, key, newval, ignore) {\n  cache[key] = mergeObj(cache[key], newval, ignore);\n  return cache[key];\n}\n\n// Strips all values from an object of they evaluate to false or if their name starts with '_'.\n// Used on all outgoing object before serialization to string.\nexport function simplify(obj) {\n  Object.keys(obj).forEach((key) => {\n    if (key[0] == '_') {\n      // Strip fields like \"obj._key\".\n      delete obj[key];\n    } else if (!obj[key]) {\n      // Strip fields which evaluate to false.\n      delete obj[key];\n    } else if (Array.isArray(obj[key]) && obj[key].length == 0) {\n      // Strip empty arrays.\n      delete obj[key];\n    } else if (!obj[key]) {\n      // Strip fields which evaluate to false.\n      delete obj[key];\n    } else if (obj[key] instanceof Date) {\n      // Strip invalid or zero date.\n      if (!isValidDate(obj[key])) {\n        delete obj[key];\n      }\n    } else if (typeof obj[key] == 'object') {\n      simplify(obj[key]);\n      // Strip empty objects.\n      if (Object.getOwnPropertyNames(obj[key]).length == 0) {\n        delete obj[key];\n      }\n    }\n  });\n  return obj;\n};\n\n\n// Trim whitespace, convert to lowercase, strip empty, short, and duplicate elements elements.\n// If the result is an empty array, add a single element \"\\u2421\" (Unicode Del character).\nexport function normalizeArray(arr) {\n  let out = [];\n  if (Array.isArray(arr)) {\n    // Trim, throw away very short and empty tags.\n    for (let i = 0, l = arr.length; i < l; i++) {\n      let t = arr[i];\n      if (t) {\n        t = t.trim().toLowerCase();\n        if (t.length > 1) {\n          out.push(t);\n        }\n      }\n    }\n    out = out.sort().filter((item, pos, ary) => {\n      return !pos || item != ary[pos - 1];\n    });\n  }\n  if (out.length == 0) {\n    // Add single tag with a Unicode Del character, otherwise an ampty array\n    // is ambiguos. The Del tag will be stripped by the server.\n    out.push(DEL_CHAR);\n  }\n  return out;\n}\n\n// Convert input to valid ranges of IDs.\nexport function normalizeRanges(ranges, maxSeq) {\n  if (!Array.isArray(ranges)) {\n    return [];\n  }\n\n  // Sort ranges in accending order by low, then descending by hi.\n  ranges.sort((r1, r2) => {\n    if (r1.low < r2.low) {\n      return -1;\n    }\n    if (r1.low == r2.low) {\n      return (r2.hi | 0) - r1.hi;\n    }\n    return 1;\n  });\n\n  // Remove pending messages from ranges possibly clipping some ranges.\n  ranges = ranges.reduce((out, r) => {\n    if (r.low < LOCAL_SEQID && r.low > 0) {\n      if (!r.hi || r.hi < LOCAL_SEQID) {\n        out.push(r);\n      } else {\n        // Clip hi to max allowed value.\n        out.push({\n          low: r.low,\n          hi: maxSeq + 1\n        });\n      }\n    }\n    return out;\n  }, []);\n\n  // Merge overlapping ranges.\n  ranges = ranges.reduce((out, r) => {\n    if (out.length == 0) {\n      out.push(r);\n    } else {\n      let prev = out[out.length - 1];\n      if (r.low <= prev.hi) {\n        prev.hi = Math.max(prev.hi, r.hi);\n      } else {\n        out.push(r);\n      }\n    }\n    return out;\n  }, []);\n\n  return ranges;\n}\n\n// Convert array of IDs to array of ranges.\nexport function listToRanges(list) {\n  // Sort the list in ascending order\n  list.sort((a, b) => a - b);\n  // Convert the array of IDs to ranges.\n  return list.reduce((out, id) => {\n    if (out.length == 0) {\n      // First element.\n      out.push({\n        low: id\n      });\n    } else {\n      let prev = out[out.length - 1];\n      if ((!prev.hi && (id != prev.low + 1)) || (id > prev.hi)) {\n        // New range.\n        out.push({\n          low: id\n        });\n      } else {\n        // Expand existing range.\n        prev.hi = prev.hi ? Math.max(prev.hi, id + 1) : id + 1;\n      }\n    }\n    return out;\n  }, []);\n}\n\n// Cuts 'clip' range out of the 'src' range.\n// Returns an array with 0, 1 or 2 elements.\nexport function clipOutRange(src, clip) {\n  if (clip.hi <= src.low || clip.low >= src.hi) {\n    // Clip is completely outside of src, no intersection.\n    return [src];\n  }\n\n\n  if (clip.low <= src.low) {\n    if (clip.hi >= src.hi) {\n      // The source range is completely inside the clipping range.\n      return [];\n    }\n    // Partial clipping at the top.\n    return [{\n      low: clip.hi,\n      hi: src.hi\n    }];\n  }\n\n  // Range on the lower end.\n  const result = [{\n    low: src.low,\n    hi: clip.low\n  }];\n  if (clip.hi < src.hi) {\n    // Maybe a range on the higher end, if clip is completely inside the source.\n    result.push({\n      low: clip.hi,\n      hi: src.hi\n    });\n  }\n\n  return result;\n}\n\n// Cuts 'src' range to be completely within 'clip' range.\n// Returns clipped range or null if 'src' is outside of 'clip'.\nexport function clipInRange(src, clip) {\n  if (clip.hi <= src.low || clip.low >= src.hi) {\n    // The src is completely outside of the clip, no intersection.\n    return null;\n  }\n\n  if (src.low >= clip.low && src.hi <= clip.hi) {\n    // Src is completely within the clip, return the entire src.\n    return src;\n  }\n\n  // Partial overlap.\n  return {\n    low: Math.max(src.low, clip.low),\n    hi: Math.min(src.hi, clip.hi)\n  };\n\n  return result;\n}\n","/**\n * @file Abstraction layer for websocket and long polling connections.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport CommError from './comm-error.js';\nimport {\n  jsonParseHelper\n} from './utils.js';\n\nlet WebSocketProvider;\nlet XHRProvider;\n\n// Error code to return in case of a network problem.\nconst NETWORK_ERROR = 503;\nconst NETWORK_ERROR_TEXT = \"Connection failed\";\n\n// Error code to return when user disconnected from server.\nconst NETWORK_USER = 418;\nconst NETWORK_USER_TEXT = \"Disconnected by client\";\n\n// Settings for exponential backoff\nconst _BOFF_BASE = 2000; // 2000 milliseconds, minimum delay between reconnects\nconst _BOFF_MAX_ITER = 10; // Maximum delay between reconnects 2^10 * 2000 ~ 34 minutes\nconst _BOFF_JITTER = 0.3; // Add random delay\n\n// Helper function for creating an endpoint URL.\nfunction makeBaseUrl(host, protocol, version, apiKey) {\n  let url = null;\n\n  if (['http', 'https', 'ws', 'wss'].includes(protocol)) {\n    url = `${protocol}://${host}`;\n    if (url.charAt(url.length - 1) !== '/') {\n      url += '/';\n    }\n    url += 'v' + version + '/channels';\n    if (['http', 'https'].includes(protocol)) {\n      // Long polling endpoint ends with \"lp\", i.e.\n      // '/v0/channels/lp' vs just '/v0/channels' for ws\n      url += '/lp';\n    }\n    url += '?apikey=' + apiKey;\n  }\n  return url;\n}\n\n/**\n * An abstraction for a websocket or a long polling connection.\n *\n * @class Connection\n * @memberof Tinode\n\n * @param {Object} config - configuration parameters.\n * @param {string} config.host - Host name and optional port number to connect to.\n * @param {string} config.apiKey - API key generated by <code>keygen</code>.\n * @param {string} config.transport - Network transport to use, either <code>\"ws\"<code>/<code>\"wss\"</code> for websocket or\n *      <code>lp</code> for long polling.\n * @param {boolean} config.secure - Use Secure WebSocket if <code>true</code>.\n * @param {string} version_ - Major value of the protocol version, e.g. '0' in '0.17.1'.\n * @param {boolean} autoreconnect_ - If connection is lost, try to reconnect automatically.\n */\nexport default class Connection {\n  // Logger, does nothing by default.\n  static #log = _ => {};\n\n  #boffTimer = null;\n  #boffIteration = 0;\n  #boffClosed = false; // Indicator if the socket was manually closed - don't autoreconnect if true.\n\n  // Websocket.\n  #socket = null;\n\n  host;\n  secure;\n  apiKey;\n\n  version;\n  autoreconnect;\n\n  initialized;\n\n  // (config.host, config.apiKey, config.transport, config.secure), PROTOCOL_VERSION, true\n  constructor(config, version_, autoreconnect_) {\n    this.host = config.host;\n    this.secure = config.secure;\n    this.apiKey = config.apiKey;\n\n    this.version = version_;\n    this.autoreconnect = autoreconnect_;\n\n    if (config.transport === 'lp') {\n      // explicit request to use long polling\n      this.#init_lp();\n      this.initialized = 'lp';\n    } else if (config.transport === 'ws') {\n      // explicit request to use web socket\n      // if websockets are not available, horrible things will happen\n      this.#init_ws();\n      this.initialized = 'ws';\n    }\n\n    if (!this.initialized) {\n      // Invalid or undefined network transport.\n      Connection.#log(\"Unknown or invalid network transport. Running under Node? Call 'Tinode.setNetworkProviders()'.\");\n      throw new Error(\"Unknown or invalid network transport. Running under Node? Call 'Tinode.setNetworkProviders()'.\");\n    }\n  }\n\n  /**\n   * To use Connection in a non browser context, supply WebSocket and XMLHttpRequest providers.\n   * @static\n   * @memberof Connection\n   * @param wsProvider WebSocket provider, e.g. for nodeJS , <code>require('ws')</code>.\n   * @param xhrProvider XMLHttpRequest provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProviders(wsProvider, xhrProvider) {\n    WebSocketProvider = wsProvider;\n    XHRProvider = xhrProvider;\n  }\n\n  /**\n   * Assign a non-default logger.\n   * @static\n   * @memberof Connection\n   * @param {function} l variadic logging function.\n   */\n  static set logger(l) {\n    Connection.#log = l;\n  }\n\n  /**\n   * Initiate a new connection\n   * @memberof Tinode.Connection#\n   * @param {string} host_ Host name to connect to; if <code>null</code> the old host name will be used.\n   * @param {boolean} force Force new connection even if one already exists.\n   * @return {Promise} Promise resolved/rejected when the connection call completes, resolution is called without\n   *  parameters, rejection passes the {Error} as parameter.\n   */\n  connect(host_, force) {\n    return Promise.reject(null);\n  }\n\n  /**\n   * Try to restore a network connection, also reset backoff.\n   * @memberof Tinode.Connection#\n   *\n   * @param {boolean} force - reconnect even if there is a live connection already.\n   */\n  reconnect(force) {}\n\n  /**\n   * Terminate the network connection\n   * @memberof Tinode.Connection#\n   */\n  disconnect() {}\n\n  /**\n   * Send a string to the server.\n   * @memberof Tinode.Connection#\n   *\n   * @param {string} msg - String to send.\n   * @throws Throws an exception if the underlying connection is not live.\n   */\n  sendText(msg) {}\n\n  /**\n   * Check if connection is alive.\n   * @memberof Tinode.Connection#\n   * @returns {boolean} <code>true</code> if connection is live, <code>false</code> otherwise.\n   */\n  isConnected() {\n    return false;\n  }\n\n  /**\n   * Get the name of the current network transport.\n   * @memberof Tinode.Connection#\n   * @returns {string} name of the transport such as <code>\"ws\"</code> or <code>\"lp\"</code>.\n   */\n  transport() {\n    return this.initialized;\n  }\n\n  /**\n   * Send network probe to check if connection is indeed live.\n   * @memberof Tinode.Connection#\n   */\n  probe() {\n    this.sendText('1');\n  }\n\n  /**\n   * Reset autoreconnect counter to zero.\n   * @memberof Tinode.Connection#\n   */\n  backoffReset() {\n    this.#boffReset();\n  }\n\n  // Backoff implementation - reconnect after a timeout.\n  #boffReconnect() {\n    // Clear timer\n    clearTimeout(this.#boffTimer);\n    // Calculate when to fire the reconnect attempt\n    const timeout = _BOFF_BASE * (Math.pow(2, this.#boffIteration) * (1.0 + _BOFF_JITTER * Math.random()));\n    // Update iteration counter for future use\n    this.#boffIteration = (this.#boffIteration >= _BOFF_MAX_ITER ? this.#boffIteration : this.#boffIteration + 1);\n    if (this.onAutoreconnectIteration) {\n      this.onAutoreconnectIteration(timeout);\n    }\n\n    this.#boffTimer = setTimeout(_ => {\n      Connection.#log(`Reconnecting, iter=${this.#boffIteration}, timeout=${timeout}`);\n      // Maybe the socket was closed while we waited for the timer?\n      if (!this.#boffClosed) {\n        const prom = this.connect();\n        if (this.onAutoreconnectIteration) {\n          this.onAutoreconnectIteration(0, prom);\n        } else {\n          // Suppress error if it's not used.\n          prom.catch(_ => {\n            /* do nothing */\n          });\n        }\n      } else if (this.onAutoreconnectIteration) {\n        this.onAutoreconnectIteration(-1);\n      }\n    }, timeout);\n  }\n\n  // Terminate auto-reconnect process.\n  #boffStop() {\n    clearTimeout(this.#boffTimer);\n    this.#boffTimer = null;\n  }\n\n  // Reset auto-reconnect iteration counter.\n  #boffReset() {\n    this.#boffIteration = 0;\n  }\n\n  // Initialization for long polling.\n  #init_lp() {\n    const XDR_UNSENT = 0; // Client has been created. open() not called yet.\n    const XDR_OPENED = 1; // open() has been called.\n    const XDR_HEADERS_RECEIVED = 2; // send() has been called, and headers and status are available.\n    const XDR_LOADING = 3; // Downloading; responseText holds partial data.\n    const XDR_DONE = 4; // The operation is complete.\n\n    // Fully composed endpoint URL, with API key & SID\n    let _lpURL = null;\n\n    let _poller = null;\n    let _sender = null;\n\n    let lp_sender = (url_) => {\n      const sender = new XHRProvider();\n      sender.onreadystatechange = (evt) => {\n        if (sender.readyState == XDR_DONE && sender.status >= 400) {\n          // Some sort of error response\n          throw new CommError(\"LP sender failed\", sender.status);\n        }\n      };\n\n      sender.open('POST', url_, true);\n      return sender;\n    }\n\n    let lp_poller = (url_, resolve, reject) => {\n      let poller = new XHRProvider();\n      let promiseCompleted = false;\n\n      poller.onreadystatechange = evt => {\n        if (poller.readyState == XDR_DONE) {\n          if (poller.status == 201) { // 201 == HTTP.Created, get SID\n            let pkt = JSON.parse(poller.responseText, jsonParseHelper);\n            _lpURL = url_ + '&sid=' + pkt.ctrl.params.sid;\n            poller = lp_poller(_lpURL);\n            poller.send(null);\n            if (this.onOpen) {\n              this.onOpen();\n            }\n\n            if (resolve) {\n              promiseCompleted = true;\n              resolve();\n            }\n\n            if (this.autoreconnect) {\n              this.#boffStop();\n            }\n          } else if (poller.status > 0 && poller.status < 400) { // 0 = network error; 400 = HTTP.BadRequest\n            if (this.onMessage) {\n              this.onMessage(poller.responseText);\n            }\n            poller = lp_poller(_lpURL);\n            poller.send(null);\n          } else {\n            // Don't throw an error here, gracefully handle server errors\n            if (reject && !promiseCompleted) {\n              promiseCompleted = true;\n              reject(poller.responseText);\n            }\n            if (this.onMessage && poller.responseText) {\n              this.onMessage(poller.responseText);\n            }\n            if (this.onDisconnect) {\n              const code = poller.status || (this.#boffClosed ? NETWORK_USER : NETWORK_ERROR);\n              const text = poller.responseText || (this.#boffClosed ? NETWORK_USER_TEXT : NETWORK_ERROR_TEXT);\n              this.onDisconnect(new CommError(text, code), code);\n            }\n\n            // Polling has stopped. Indicate it by setting poller to null.\n            poller = null;\n            if (!this.#boffClosed && this.autoreconnect) {\n              this.#boffReconnect();\n            }\n          }\n        }\n      };\n      // Using POST to avoid caching response by service worker.\n      poller.open('POST', url_, true);\n      return poller;\n    }\n\n    this.connect = (host_, force) => {\n      this.#boffClosed = false;\n\n      if (_poller) {\n        if (!force) {\n          return Promise.resolve();\n        }\n        _poller.onreadystatechange = undefined;\n        _poller.abort();\n        _poller = null;\n      }\n\n      if (host_) {\n        this.host = host_;\n      }\n\n      return new Promise((resolve, reject) => {\n        const url = makeBaseUrl(this.host, this.secure ? 'https' : 'http', this.version, this.apiKey);\n        Connection.#log(\"LP connecting to:\", url);\n        _poller = lp_poller(url, resolve, reject);\n        _poller.send(null);\n      }).catch(err => {\n        Connection.#log(\"LP connection failed:\", err);\n      });\n    };\n\n    this.reconnect = force => {\n      this.#boffStop();\n      this.connect(null, force);\n    };\n\n    this.disconnect = _ => {\n      this.#boffClosed = true;\n      this.#boffStop();\n\n      if (_sender) {\n        _sender.onreadystatechange = undefined;\n        _sender.abort();\n        _sender = null;\n      }\n      if (_poller) {\n        _poller.onreadystatechange = undefined;\n        _poller.abort();\n        _poller = null;\n      }\n\n      if (this.onDisconnect) {\n        this.onDisconnect(new CommError(NETWORK_USER_TEXT, NETWORK_USER), NETWORK_USER);\n      }\n      // Ensure it's reconstructed\n      _lpURL = null;\n    };\n\n    this.sendText = (msg) => {\n      _sender = lp_sender(_lpURL);\n      if (_sender && (_sender.readyState == XDR_OPENED)) {\n        _sender.send(msg);\n      } else {\n        throw new Error(\"Long poller failed to connect\");\n      }\n    };\n\n    this.isConnected = _ => {\n      return (_poller && true);\n    };\n  }\n\n  // Initialization for Websocket\n  #init_ws() {\n    this.connect = (host_, force) => {\n      this.#boffClosed = false;\n\n      if (this.#socket) {\n        if (!force && this.#socket.readyState == this.#socket.OPEN) {\n          // Issue a probe request to be sure the connection is live.\n          // This is a non-blocking call.\n          this.probe();\n          return Promise.resolve();\n        }\n        this.#socket.close();\n        this.#socket = null;\n      }\n\n      if (host_) {\n        this.host = host_;\n      }\n\n      return new Promise((resolve, reject) => {\n        const url = makeBaseUrl(this.host, this.secure ? 'wss' : 'ws', this.version, this.apiKey);\n\n        Connection.#log(\"WS connecting to: \", url);\n\n        // It throws when the server is not accessible but the exception cannot be caught:\n        // https://stackoverflow.com/questions/31002592/javascript-doesnt-catch-error-in-websocket-instantiation/31003057\n        const conn = new WebSocketProvider(url);\n\n        conn.onerror = err => {\n          reject(err);\n        };\n\n        conn.onopen = _ => {\n          if (this.autoreconnect) {\n            this.#boffStop();\n          }\n\n          if (this.onOpen) {\n            this.onOpen();\n          }\n\n          resolve();\n        };\n\n        conn.onclose = _ => {\n          this.#socket = null;\n\n          if (this.onDisconnect) {\n            const code = this.#boffClosed ? NETWORK_USER : NETWORK_ERROR;\n            this.onDisconnect(new CommError(this.#boffClosed ? NETWORK_USER_TEXT : NETWORK_ERROR_TEXT, code), code);\n          }\n\n          if (!this.#boffClosed && this.autoreconnect) {\n            this.#boffReconnect();\n          }\n        };\n\n        conn.onmessage = evt => {\n          if (this.onMessage) {\n            this.onMessage(evt.data);\n          }\n        };\n\n        this.#socket = conn;\n      });\n    }\n\n    this.reconnect = force => {\n      this.#boffStop();\n      this.connect(null, force);\n    };\n\n    this.disconnect = _ => {\n      this.#boffClosed = true;\n      this.#boffStop();\n\n      if (!this.#socket) {\n        return;\n      }\n      this.#socket.close();\n      this.#socket = null;\n    };\n\n    this.sendText = msg => {\n      if (this.#socket && (this.#socket.readyState == this.#socket.OPEN)) {\n        this.#socket.send(msg);\n      } else {\n        throw new Error(\"Websocket is not connected\");\n      }\n    };\n\n    this.isConnected = _ => {\n      return (this.#socket && (this.#socket.readyState == this.#socket.OPEN));\n    };\n  }\n\n  // Callbacks:\n\n  /**\n   * A callback to pass incoming messages to. See {@link Tinode.Connection#onMessage}.\n   * @callback Tinode.Connection.OnMessage\n   * @memberof Tinode.Connection\n   * @param {string} message - Message to process.\n   */\n  onMessage = undefined;\n\n  /**\n   * A callback for reporting a dropped connection.\n   * @type {function}\n   * @memberof Tinode.Connection#\n   */\n  onDisconnect = undefined;\n\n  /**\n   * A callback called when the connection is ready to be used for sending. For websockets it's socket open,\n   * for long polling it's <code>readyState=1</code> (OPENED)\n   * @type {function}\n   * @memberof Tinode.Connection#\n   */\n  onOpen = undefined;\n\n  /**\n   * A callback to notify of reconnection attempts. See {@link Tinode.Connection#onAutoreconnectIteration}.\n   * @memberof Tinode.Connection\n   * @callback AutoreconnectIterationType\n   * @param {string} timeout - time till the next reconnect attempt in milliseconds. <code>-1</code> means reconnect was skipped.\n   * @param {Promise} promise resolved or rejected when the reconnect attemp completes.\n   *\n   */\n  /**\n   * A callback to inform when the next attampt to reconnect will happen and to receive connection promise.\n   * @memberof Tinode.Connection#\n   * @type {Tinode.Connection.AutoreconnectIterationType}\n   */\n  onAutoreconnectIteration = undefined;\n}\n\nConnection.NETWORK_ERROR = NETWORK_ERROR;\nConnection.NETWORK_ERROR_TEXT = NETWORK_ERROR_TEXT;\nConnection.NETWORK_USER = NETWORK_USER;\nConnection.NETWORK_USER_TEXT = NETWORK_USER_TEXT;\n","/**\n * @file Helper methods for dealing with IndexedDB cache of messages, users, and topics.\n *\n * @copyright 2015-2025 Tinode LLC.\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nconst DB_VERSION = 3;\nconst DB_NAME = 'tinode-web';\n\nlet IDBProvider;\n\nexport default class DB {\n  #onError = _ => {};\n  #logger = _ => {};\n\n  // Instance of IndexDB.\n  db = null;\n  // Indicator that the cache is disabled.\n  disabled = true;\n\n  constructor(onError, logger) {\n    this.#onError = onError || this.#onError;\n    this.#logger = logger || this.#logger;\n  }\n\n  #mapObjects(source, callback, context) {\n    if (!this.db) {\n      return disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction([source]);\n      trx.onerror = event => {\n        this.#logger('PCache', 'mapObjects', source, event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore(source).getAll().onsuccess = event => {\n        if (callback) {\n          event.target.result.forEach(topic => {\n            callback.call(context, topic);\n          });\n        }\n        resolve(event.target.result);\n      };\n    });\n  }\n\n  /**\n   * Initialize persistent cache: open or create/upgrade if needed.\n   * @returns {Promise} promise to be resolved/rejected when the DB is initialized.\n   */\n  initDatabase() {\n    return new Promise((resolve, reject) => {\n      // Open the database and initialize callbacks.\n      const req = IDBProvider.open(DB_NAME, DB_VERSION);\n      req.onsuccess = event => {\n        this.db = event.target.result;\n        this.disabled = false;\n\n        // This handler is called when a different tab tries to upgrade the database.\n        this.db.onversionchange = _ => {\n          this.#logger('PCache', \"another tab tries to upgrade DB, shutting down\");\n          this.db.close();\n          this.db = null;\n          this.disabled = true;\n        };\n\n        resolve(this.db);\n      };\n      req.onerror = event => {\n        this.#logger('PCache', \"failed to initialize\", event);\n        reject(event.target.error);\n        this.#onError(event.target.error);\n      };\n      req.onupgradeneeded = event => {\n        this.db = event.target.result;\n\n        this.db.onerror = event => {\n          this.#logger('PCache', \"failed to create storage\", event);\n          this.#onError(event.target.error);\n        };\n\n        // Individual object stores.\n\n        // Alternatively could use event.oldVersion and event.newVersion\n        // to determine which object stores to create or upgrade.\n\n        if (!this.db.objectStoreNames.contains('topic')) {\n          // Object store (table) for topics. The primary key is the topic name.\n          this.db.createObjectStore('topic', {\n            keyPath: 'name'\n          });\n        }\n\n        if (!this.db.objectStoreNames.contains('user')) {\n          // Users object store. UID is the primary key.\n          this.db.createObjectStore('user', {\n            keyPath: 'uid'\n          });\n        }\n\n        if (!this.db.objectStoreNames.contains('subscription')) {\n          // Subscriptions object store topic <-> user. Topic name + UID is the primary key.\n          this.db.createObjectStore('subscription', {\n            keyPath: ['topic', 'uid']\n          });\n        }\n\n        if (!this.db.objectStoreNames.contains('message')) {\n          // Messages object store. The primary key is topic name + seq.\n          this.db.createObjectStore('message', {\n            keyPath: ['topic', 'seq']\n          });\n        }\n\n        if (!this.db.objectStoreNames.contains('dellog')) {\n          // Records of deleted message ranges. The primary key is topic name + low seq.\n          const dellog = this.db.createObjectStore('dellog', {\n            keyPath: ['topic', 'low', 'hi']\n          });\n          if (!dellog.indexNames.contains('topic_clear')) {\n            dellog.createIndex('topic_clear', ['topic', 'clear'], {\n              unique: false\n            });\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Delete persistent cache.\n   */\n  deleteDatabase() {\n    // Close connection, otherwise operations will fail with 'onblocked'.\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    return new Promise((resolve, reject) => {\n      const req = IDBProvider.deleteDatabase(DB_NAME);\n      req.onblocked = _ => {\n        if (this.db) {\n          this.db.close();\n        }\n        const err = new Error(\"blocked\");\n        this.#logger('PCache', 'deleteDatabase', err);\n        reject(err);\n      };\n      req.onsuccess = _ => {\n        this.db = null;\n        this.disabled = true;\n        resolve(true);\n      };\n      req.onerror = event => {\n        this.#logger('PCache', 'deleteDatabase', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  }\n\n  /**\n   * Check if persistent cache is ready for use.\n   * @memberOf DB\n   * @returns {boolean} <code>true</code> if cache is ready, <code>false</code> otherwise.\n   */\n  isReady() {\n    return !!this.db;\n  }\n\n  // Topics.\n\n  /**\n   * Save to cache or update topic in persistent cache.\n   * @memberOf DB\n   * @param {Topic} topic - topic to be added or updated.\n   * @returns {Promise} promise resolved/rejected on operation completion.\n   */\n  updTopic(topic) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updTopic', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('topic').get(topic.name);\n      req.onsuccess = _ => {\n        trx.objectStore('topic').put(DB.#serializeTopic(req.result, topic));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Mark or unmark topic as deleted.\n   * @memberOf DB\n   * @param {string} name - name of the topic to mark or unmark.\n   * @param {boolean} deleted - status\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  markTopicAsDeleted(name, deleted) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'markTopicAsDeleted', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('topic').get(name);\n      req.onsuccess = event => {\n        const topic = event.target.result;\n        if (topic && topic._deleted != deleted) {\n          topic._deleted = deleted;\n          trx.objectStore('topic').put(topic);\n        }\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Remove topic from persistent cache.\n   * @memberOf DB\n   * @param {string} name - name of the topic to remove from database.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remTopic(name) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic', 'subscription', 'message'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'remTopic', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('topic').delete(IDBKeyRange.only(name));\n      trx.objectStore('subscription').delete(IDBKeyRange.bound([name, '-'], [name, '~']));\n      trx.objectStore('message').delete(IDBKeyRange.bound([name, 0], [name, Number.MAX_SAFE_INTEGER]));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Execute a callback for each stored topic.\n   * @memberOf DB\n   * @param {function} callback - function to call for each topic.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapTopics(callback, context) {\n    return this.#mapObjects('topic', callback, context);\n  }\n\n  /**\n   * Copy data from serialized object to topic.\n   * @memberOf DB\n   * @param {Topic} topic - target to deserialize to.\n   * @param {Object} src - serialized data to copy from.\n   */\n  deserializeTopic(topic, src) {\n    DB.#deserializeTopic(topic, src);\n  }\n\n  // Users.\n  /**\n   * Add or update user object in the persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to save or update.\n   * @param {Object} pub - user's <code>public</code> information.\n   * @returns {Promise} promise resolved/rejected on operation completion.\n   */\n  updUser(uid, pub) {\n    if (arguments.length < 2 || pub === undefined) {\n      // No point inupdating user with invalid data.\n      return;\n    }\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').put({\n        uid: uid,\n        public: pub\n      });\n      trx.commit();\n    });\n  }\n\n  /**\n   * Remove user from persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to remove from the cache.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remUser(uid) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'remUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').delete(IDBKeyRange.only(uid));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Execute a callback for each stored user.\n   * @memberOf DB\n   * @param {function} callback - function to call for each topic.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapUsers(callback, context) {\n    return this.#mapObjects('user', callback, context);\n  }\n\n  /**\n   * Read a single user from persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to fetch from cache.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  getUser(uid) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user']);\n      trx.oncomplete = event => {\n        const user = event.target.result;\n        resolve({\n          user: user.uid,\n          public: user.public\n        });\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'getUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').get(uid);\n    });\n  }\n\n  // Subscriptions.\n  /**\n   * Add or update subscription in persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {string} uid - ID of the subscribed user.\n   * @param {Object} sub - subscription to save.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  updSubscription(topicName, uid, sub) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['subscription'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updSubscription', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('subscription').get([topicName, uid]).onsuccess = (event) => {\n        trx.objectStore('subscription').put(DB.#serializeSubscription(event.target.result, topicName, uid, sub));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Execute a callback for each cached subscription in a given topic.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the subscriptions.\n   * @param {function} callback - function to call for each subscription.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapSubscriptions(topicName, callback, context) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['subscription']);\n      trx.onerror = (event) => {\n        this.#logger('PCache', 'mapSubscriptions', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('subscription').getAll(IDBKeyRange.bound([topicName, '-'], [topicName, '~'])).onsuccess = (event) => {\n        if (callback) {\n          event.target.result.forEach((topic) => {\n            callback.call(context, topic);\n          });\n        }\n        resolve(event.target.result);\n      };\n    });\n  }\n\n  // Messages.\n\n  /**\n   * Save message to persistent cache.\n   * @memberOf DB\n   * @param {Object} msg - message to save.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  addMessage(msg) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'addMessage', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('message').add(DB.#serializeMessage(null, msg));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Update delivery status of a message stored in persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {number} seq - ID of the message to update\n   * @param {number} status - new delivery status of the message.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  updMessageStatus(topicName, seq, status) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updMessageStatus', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('message').get(IDBKeyRange.only([topicName, seq]));\n      req.onsuccess = event => {\n        const src = req.result || event.target.result;\n        if (!src || src._status == status) {\n          trx.commit();\n          return;\n        }\n        trx.objectStore('message').put(DB.#serializeMessage(src, {\n          topic: topicName,\n          seq: seq,\n          _status: status\n        }));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Remove one or more messages from persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {number} from - id of the message to remove or lower boundary when removing range (inclusive).\n   * @param {number=} to - upper boundary (exclusive) when removing a range of messages.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remMessages(topicName, from, to) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      if (!from && !to) {\n        from = 0;\n        to = Number.MAX_SAFE_INTEGER;\n      }\n      const range = to > 0 ? IDBKeyRange.bound([topicName, from], [topicName, to], false, true) :\n        IDBKeyRange.only([topicName, from]);\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'remMessages', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('message').delete(range);\n      trx.commit();\n    });\n  }\n\n  /**\n   * Retrieve messages from persistent store.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic to retrieve messages from.\n   * @param {function} callback to call for each retrieved message.\n   * @param {GetDataType} query - parameters of the message range to retrieve.\n   *\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  readMessages(topicName, query, callback, context) {\n    query = query || {};\n\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n\n    const trx = this.db.transaction(['message']);\n    let result = [];\n\n    // Handle individual message ranges.\n    if (Array.isArray(query.ranges)) {\n      return new Promise((resolve, reject) => {\n        trx.onerror = event => {\n          this.#logger('PCache', 'readMessages', event.target.error);\n          reject(event.target.error);\n        };\n\n        let count = 0;\n        query.ranges.forEach(range => {\n          const key = range.hi ? IDBKeyRange.bound([topicName, range.low], [topicName, range.hi], false, true) :\n            IDBKeyRange.only([topicName, range.low]);\n          trx.objectStore('message').getAll(key).onsuccess = event => {\n            const msgs = event.target.result;\n            if (msgs) {\n              if (callback) {\n                callback.call(context, msgs);\n              }\n              if (Array.isArray(msgs)) {\n                result = result.concat(msgs);\n              } else {\n                result.push(msgs);\n              }\n            }\n            count++;\n            if (count == query.ranges.length) {\n              resolve(result);\n            }\n          };\n        });\n      });\n    }\n\n    // Handle single range.\n    return new Promise((resolve, reject) => {\n      const since = query.since > 0 ? query.since : 0;\n      const before = query.before > 0 ? query.before : Number.MAX_SAFE_INTEGER;\n      const limit = query.limit | 0;\n\n      trx.onerror = event => {\n        this.#logger('PCache', 'readMessages', event.target.error);\n        reject(event.target.error);\n      };\n\n      const range = IDBKeyRange.bound([topicName, since], [topicName, before], false, true);\n      // Iterate in descending order.\n      trx.objectStore('message').openCursor(range, 'prev')\n        .onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            if (callback) {\n              callback.call(context, cursor.value);\n            }\n            result.push(cursor.value);\n            if (limit <= 0 || result.length < limit) {\n              cursor.continue();\n            } else {\n              resolve(result);\n            }\n          } else {\n            resolve(result);\n          }\n        };\n    });\n  }\n\n  // Delete log\n\n  /**\n   * Add records of deleted messages.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {number} delId - id of the deletion transaction.\n   * @param {Array.<IdRange>} ranges - message to save.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  addDelLog(topicName, delId, ranges) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['dellog'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'addDelLog', event.target.error);\n        reject(event.target.error);\n      };\n      ranges.forEach(r => trx.objectStore('dellog').add({\n        topic: topicName,\n        clear: delId,\n        low: r.low,\n        hi: r.hi || (r.low + 1)\n      }));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Retrieve deleted message records from persistent store.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic to retrieve records for.\n   * @param {GetDataType} query - parameters of the message range to retrieve.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  readDelLog(topicName, query) {\n    query = query || {};\n\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n\n    const trx = this.db.transaction(['dellog']);\n    let result = [];\n\n    // Handle individual message ranges.\n    if (Array.isArray(query.ranges)) {\n      return new Promise((resolve, reject) => {\n        trx.onerror = event => {\n          this.#logger('PCache', 'readDelLog', event.target.error);\n          reject(event.target.error);\n        };\n\n        let count = 0;\n        query.ranges.forEach(range => {\n          const hi = range.hi || (range.low + 1);\n          const key = IDBKeyRange.bound([topicName, 0, range.low], [topicName, hi, Number.MAX_SAFE_INTEGER], false, true);\n          trx.objectStore('dellog').getAll(key).onsuccess = event => {\n            const entries = event.target.result;\n            if (entries) {\n              if (Array.isArray(entries)) {\n                result = result.concat(entries.map(entry => {\n                  return {\n                    low: entry.low,\n                    hi: entry.hi\n                  };\n                }));\n              } else {\n                result.push({\n                  low: entries.low,\n                  hi: entries.hi\n                });\n              }\n            }\n            count++;\n            if (count == query.ranges.length) {\n              resolve(result);\n            }\n          };\n        });\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      const since = query.since > 0 ? query.since : 0;\n      const before = query.before > 0 ? query.before : Number.MAX_SAFE_INTEGER;\n      const limit = query.limit | 0;\n\n      trx.onerror = event => {\n        this.#logger('PCache', 'readDelLog', event.target.error);\n        reject(event.target.error);\n      };\n\n      let count = 0;\n      const result = [];\n      const range = IDBKeyRange.bound([topicName, 0, since], [topicName, before, Number.MAX_SAFE_INTEGER], false, true);\n      trx.objectStore('dellog').openCursor(range, 'prev')\n        .onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            result.push({\n              low: cursor.value.low,\n              hi: cursor.value.hi\n            });\n            count += cursor.value.hi - cursor.value.low;\n            if (limit <= 0 || count < limit) {\n              cursor.continue();\n            } else {\n              resolve(result);\n            }\n          } else {\n            resolve(result);\n          }\n        };\n    });\n  }\n\n  /**\n   * Retrieve the latest 'clear' ID for the given topic.\n   * @param {string} topicName\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  maxDelId(topicName) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve(0) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['dellog']);\n      trx.onerror = event => {\n        this.#logger('PCache', 'maxDelId', event.target.error);\n        reject(event.target.error);\n      };\n\n      const index = trx.objectStore('dellog').index('topic_clear');\n      index.openCursor(IDBKeyRange.bound([topicName, 0], [topicName, Number.MAX_SAFE_INTEGER]), 'prev')\n        .onsuccess = event => {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          }\n        };\n    });\n  }\n\n  // Private methods.\n\n  // Serializable topic fields.\n  static #topic_fields = ['created', 'updated', 'deleted', 'touched', 'read', 'recv', 'seq',\n    'clear', 'defacs', 'creds', 'public', 'trusted', 'private', '_aux', '_deleted'\n  ];\n\n  // Copy data from src to Topic object.\n  static #deserializeTopic(topic, src) {\n    DB.#topic_fields.forEach((f) => {\n      if (src.hasOwnProperty(f)) {\n        topic[f] = src[f];\n      }\n    });\n    if (Array.isArray(src.tags)) {\n      topic._tags = src.tags;\n    }\n    if (src.acs) {\n      topic.setAccessMode(src.acs);\n    }\n    topic.seq |= 0;\n    topic.read |= 0;\n    topic.unread = Math.max(0, topic.seq - topic.read);\n  }\n\n  // Copy values from 'src' to 'dst'. Allocate dst if it's null or undefined.\n  static #serializeTopic(dst, src) {\n    const res = dst || {\n      name: src.name\n    };\n    DB.#topic_fields.forEach(f => {\n      if (src.hasOwnProperty(f)) {\n        res[f] = src[f];\n      }\n    });\n    if (Array.isArray(src._tags)) {\n      res.tags = src._tags;\n    }\n    if (src.acs) {\n      res.acs = src.getAccessMode().jsonHelper();\n    }\n    return res;\n  }\n\n  static #serializeSubscription(dst, topicName, uid, sub) {\n    const fields = ['updated', 'mode', 'read', 'recv', 'clear', 'lastSeen', 'userAgent'];\n    const res = dst || {\n      topic: topicName,\n      uid: uid\n    };\n\n    fields.forEach((f) => {\n      if (sub.hasOwnProperty(f)) {\n        res[f] = sub[f];\n      }\n    });\n\n    return res;\n  }\n\n  static #serializeMessage(dst, msg) {\n    // Serializable fields.\n    const fields = ['topic', 'seq', 'ts', '_status', 'from', 'head', 'content'];\n    const res = dst || {};\n    fields.forEach((f) => {\n      if (msg.hasOwnProperty(f)) {\n        res[f] = msg[f];\n      }\n    });\n    return res;\n  }\n\n  /**\n   * To use DB in a non browser context, supply indexedDB provider.\n   * @static\n   * @memberof DB\n   * @param idbProvider indexedDB provider, e.g. for node <code>require('fake-indexeddb')</code>.\n   */\n  static setDatabaseProvider(idbProvider) {\n    IDBProvider = idbProvider;\n  }\n}\n","/**\n * @file Utilities for uploading and downloading files.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nimport CommError from './comm-error.js';\nimport {\n  isUrlRelative,\n  jsonParseHelper\n} from './utils.js';\n\nlet XHRProvider;\n\nfunction addURLParam(relUrl, key, value) {\n  const url = new URL(relUrl, window.location.origin);\n  url.searchParams.append(key, value);\n  return url.toString().substring(window.location.origin.length);\n}\n\n/**\n * @class LargeFileHelper - utilities for uploading and downloading files out of band.\n * Don't instantiate this class directly. Use {Tinode.getLargeFileHelper} instead.\n * @memberof Tinode\n *\n * @param {Tinode} tinode - the main Tinode object.\n * @param {string} version - protocol version, i.e. '0'.\n */\nexport default class LargeFileHelper {\n  constructor(tinode, version) {\n    this._tinode = tinode;\n    this._version = version;\n\n    this._apiKey = tinode._apiKey;\n    this._authToken = tinode.getAuthToken();\n\n    // Ongoing requests.\n    this.xhr = [];\n  }\n\n  /**\n   * Start uploading the file to an endpoint at baseUrl.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {string} baseUrl base URL of upload server.\n   * @param {File|Blob} data data to upload.\n   * @param {string} avatarFor topic name if the upload represents an avatar.\n   * @param {Callback} onProgress callback. Takes one {float} parameter 0..1\n   * @param {Callback} onSuccess callback. Called when the file is successfully uploaded.\n   * @param {Callback} onFailure callback. Called in case of a failure.\n   *\n   * @returns {Promise} resolved/rejected when the upload is completed/failed.\n   */\n  uploadWithBaseUrl(baseUrl, data, avatarFor, onProgress, onSuccess, onFailure) {\n    let url = `/v${this._version}/file/u/`;\n    if (baseUrl) {\n      let base = baseUrl;\n      if (base.endsWith('/')) {\n        // Removing trailing slash.\n        base = base.slice(0, -1);\n      }\n      if (base.startsWith('http://') || base.startsWith('https://')) {\n        url = base + url;\n      } else {\n        throw new Error(`Invalid base URL '${baseUrl}'`);\n      }\n    }\n\n    const instance = this;\n    const xhr = new XHRProvider();\n    this.xhr.push(xhr);\n\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Tinode-APIKey', this._apiKey);\n    if (this._authToken) {\n      xhr.setRequestHeader('X-Tinode-Auth', `Token ${this._authToken.token}`);\n    }\n\n    let toResolve = null;\n    let toReject = null;\n\n    const result = new Promise((resolve, reject) => {\n      toResolve = resolve;\n      toReject = reject;\n    });\n\n    xhr.upload.onprogress = e => {\n      if (e.lengthComputable) {\n        if (onProgress) {\n          onProgress(e.loaded / e.total);\n        }\n        if (this.onProgress) {\n          this.onProgress(e.loaded / e.total);\n        }\n      }\n    };\n\n    xhr.onload = function() {\n      let pkt;\n      try {\n        pkt = JSON.parse(this.response, jsonParseHelper);\n      } catch (err) {\n        instance._tinode.logger(\"ERROR: Invalid server response in LargeFileHelper\", this.response);\n        pkt = {\n          ctrl: {\n            code: this.status,\n            text: this.statusText\n          }\n        };\n      }\n\n      if (this.status >= 200 && this.status < 300) {\n        if (toResolve) {\n          toResolve(pkt.ctrl.params.url);\n        }\n        if (onSuccess) {\n          onSuccess(pkt.ctrl);\n        }\n      } else if (this.status >= 400) {\n        if (toReject) {\n          toReject(new CommError(pkt.ctrl.text, pkt.ctrl.code));\n        }\n        if (onFailure) {\n          onFailure(pkt.ctrl);\n        }\n      } else {\n        instance._tinode.logger(\"ERROR: Unexpected server response status\", this.status, this.response);\n      }\n    };\n\n    xhr.onerror = function(e) {\n      if (toReject) {\n        toReject(e || new Error(\"failed\"));\n      }\n      if (onFailure) {\n        onFailure(null);\n      }\n    };\n\n    xhr.onabort = function(e) {\n      if (toReject) {\n        toReject(new Error(\"upload cancelled by user\"));\n      }\n      if (onFailure) {\n        onFailure(null);\n      }\n    };\n\n    try {\n      const form = new FormData();\n      form.append('file', data);\n      form.set('id', this._tinode.getNextUniqueId());\n      if (avatarFor) {\n        form.set('topic', avatarFor);\n      }\n      xhr.send(form);\n    } catch (err) {\n      if (toReject) {\n        toReject(err);\n      }\n      if (onFailure) {\n        onFailure(null);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Start uploading the file to default endpoint.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {File|Blob} data to upload\n   * @param {string} avatarFor topic name if the upload represents an avatar.\n   * @param {Callback} onProgress callback. Takes one {float} parameter 0..1\n   * @param {Callback} onSuccess callback. Called when the file is successfully uploaded.\n   * @param {Callback} onFailure callback. Called in case of a failure.\n   *\n   * @returns {Promise} resolved/rejected when the upload is completed/failed.\n   */\n  upload(data, avatarFor, onProgress, onSuccess, onFailure) {\n    const baseUrl = (this._tinode._secure ? 'https://' : 'http://') + this._tinode._host;\n    return this.uploadWithBaseUrl(baseUrl, data, avatarFor, onProgress, onSuccess, onFailure);\n  }\n  /**\n   * Download the file from a given URL using GET request. This method works with the Tinode server only.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {string} relativeUrl - URL to download the file from. Must be relative url, i.e. must not contain the host.\n   * @param {string=} filename - file name to use for the downloaded file.\n   *\n   * @returns {Promise} resolved/rejected when the download is completed/failed.\n   */\n  download(relativeUrl, filename, mimetype, onProgress, onError) {\n    if (!isUrlRelative(relativeUrl)) {\n      // As a security measure refuse to download from an absolute URL.\n      if (onError) {\n        onError(`The URL '${relativeUrl}' must be relative, not absolute`);\n      }\n      return;\n    }\n    if (!this._authToken) {\n      if (onError) {\n        onError(\"Must authenticate first\");\n      }\n      return;\n    }\n    const instance = this;\n\n    const xhr = new XHRProvider();\n    this.xhr.push(xhr);\n\n    // Add '&asatt=1' to URL to request 'Content-Disposition: attachment' response header.\n    relativeUrl = addURLParam(relativeUrl, 'asatt', '1');\n\n    // Get data as blob (stored by the browser as a temporary file).\n    xhr.open('GET', relativeUrl, true);\n    xhr.setRequestHeader('X-Tinode-APIKey', this._apiKey);\n    xhr.setRequestHeader('X-Tinode-Auth', 'Token ' + this._authToken.token);\n    xhr.responseType = 'blob';\n\n    xhr.onprogress = function(e) {\n      if (onProgress) {\n        // Passing e.loaded instead of e.loaded/e.total because e.total\n        // is always 0 with gzip compression enabled by the server.\n        onProgress(e.loaded);\n      }\n    };\n\n    let toResolve = null;\n    let toReject = null;\n\n    const result = new Promise((resolve, reject) => {\n      toResolve = resolve;\n      toReject = reject;\n    });\n\n    // The blob needs to be saved as file. There is no known way to\n    // save the blob as file other than to fake a click on an <a href... download=...>.\n    xhr.onload = function() {\n      if (this.status == 200) {\n        const link = document.createElement('a');\n        // URL.createObjectURL is not available in non-browser environment. This call will fail.\n        link.href = window.URL.createObjectURL(new Blob([this.response], {\n          type: mimetype\n        }));\n        link.style.display = 'none';\n        link.setAttribute('download', filename);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(link.href);\n        if (toResolve) {\n          toResolve();\n        }\n      } else if (this.status >= 400 && toReject) {\n        // The this.responseText is undefined, must use this.response which is a blob.\n        // Need to convert this.response to JSON. The blob can only be accessed by the\n        // FileReader.\n        const reader = new FileReader();\n        reader.onload = function() {\n          try {\n            const pkt = JSON.parse(this.result, jsonParseHelper);\n            toReject(new CommError(pkt.ctrl.text, pkt.ctrl.code));\n          } catch (err) {\n            instance._tinode.logger(\"ERROR: Invalid server response in LargeFileHelper\", this.result);\n            toReject(err);\n          }\n        };\n        reader.readAsText(this.response);\n      }\n    };\n\n    xhr.onerror = function(e) {\n      if (toReject) {\n        toReject(new Error(\"failed\"));\n      }\n      if (onError) {\n        onError(e);\n      }\n    };\n\n    xhr.onabort = function() {\n      if (toReject) {\n        toReject(null);\n      }\n    };\n\n    try {\n      xhr.send();\n    } catch (err) {\n      if (toReject) {\n        toReject(err);\n      }\n      if (onError) {\n        onError(err);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Try to cancel all ongoing uploads or downloads.\n   * @memberof Tinode.LargeFileHelper#\n   */\n  cancel() {\n    this.xhr.forEach(req => {\n      if (req.readyState < 4) {\n        req.abort();\n      }\n    });\n  }\n  /**\n   * To use LargeFileHelper in a non browser context, supply XMLHttpRequest provider.\n   * @static\n   * @memberof LargeFileHelper\n   * @param xhrProvider XMLHttpRequest provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProvider(xhrProvider) {\n    XHRProvider = xhrProvider;\n  }\n}\n","/**\n * @module tinode-sdk\n *\n * @copyright 2015-2025 Tinode LLC.\n * @summary Javascript bindings for Tinode.\n * @license Apache 2.0\n * @version 0.24\n *\n * See <a href=\"https://github.com/tinode/webapp\">https://github.com/tinode/webapp</a> for real-life usage.\n *\n * @example\n * <head>\n * <script src=\".../tinode.js\"></script>\n * </head>\n *\n * <body>\n *  ...\n * <script>\n *  // Instantiate tinode.\n *  const tinode = new Tinode(config, _ => {\n *    // Called on init completion.\n *  });\n *  tinode.enableLogging(true);\n *  tinode.onDisconnect = err => {\n *    // Handle disconnect.\n *  };\n *  // Connect to the server.\n *  tinode.connect('https://example.com/').then(_ => {\n *    // Connected. Login now.\n *    return tinode.loginBasic(login, password);\n *  }).then(ctrl => {\n *    // Logged in fine, attach callbacks, subscribe to 'me'.\n *    const me = tinode.getMeTopic();\n *    me.onMetaDesc = function(meta) { ... };\n *    // Subscribe, fetch topic description and the list of contacts.\n *    me.subscribe({get: {desc: {}, sub: {}}});\n *  }).catch(err => {\n *    // Login or subscription failed, do something.\n *    ...\n *  });\n *  ...\n * </script>\n * </body>\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nimport AccessMode from './access-mode.js';\nimport * as Const from './config.js';\nimport CommError from './comm-error.js';\nimport Connection from './connection.js';\nimport DBCache from './db.js';\nimport Drafty from './drafty.js';\nimport LargeFileHelper from './large-file.js';\nimport MetaGetBuilder from './meta-builder.js';\nimport Topic from './topic.js';\nimport TopicFnd from './fnd-topic.js';\nimport TopicMe from './me-topic.js';\n\nimport {\n  isUrlRelative,\n  jsonParseHelper,\n  mergeObj,\n  rfc3339DateString,\n  simplify\n} from './utils.js';\n\n// Re-export AccessMode\nexport {\n  AccessMode\n};\n\nlet WebSocketProvider;\nif (typeof WebSocket != 'undefined') {\n  WebSocketProvider = WebSocket;\n}\n\nlet XHRProvider;\nif (typeof XMLHttpRequest != 'undefined') {\n  XHRProvider = XMLHttpRequest;\n}\n\nlet IndexedDBProvider;\nif (typeof indexedDB != 'undefined') {\n  IndexedDBProvider = indexedDB;\n}\n\n// Re-export Drafty.\nexport {\n  Drafty\n}\n\ninitForNonBrowserApp();\n\n// Utility functions\n\n// Polyfill for non-browser context, e.g. NodeJs.\nfunction initForNonBrowserApp() {\n  // Tinode requirement in native mode because react native doesn't provide Base64 method\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  if (typeof btoa == 'undefined') {\n    global.btoa = function(input = '') {\n      let str = input;\n      let output = '';\n\n      for (let block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n\n        charCode = str.charCodeAt(i += 3 / 4);\n\n        if (charCode > 0xFF) {\n          throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n        }\n        block = block << 8 | charCode;\n      }\n\n      return output;\n    };\n  }\n\n  if (typeof atob == 'undefined') {\n    global.atob = function(input = '') {\n      let str = input.replace(/=+$/, '');\n      let output = '';\n\n      if (str.length % 4 == 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n      }\n      for (let bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++);\n\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n      ) {\n        buffer = chars.indexOf(buffer);\n      }\n\n      return output;\n    };\n  }\n\n  if (typeof window == 'undefined') {\n    global.window = {\n      WebSocket: WebSocketProvider,\n      XMLHttpRequest: XHRProvider,\n      indexedDB: IndexedDBProvider,\n      URL: {\n        createObjectURL: function() {\n          throw new Error(\"Unable to use URL.createObjectURL in a non-browser application\");\n        }\n      }\n    }\n  }\n\n  Connection.setNetworkProviders(WebSocketProvider, XHRProvider);\n  LargeFileHelper.setNetworkProvider(XHRProvider);\n  DBCache.setDatabaseProvider(IndexedDBProvider);\n}\n\n// Detect find most useful network transport.\nfunction detectTransport() {\n  if (typeof window == 'object') {\n    if (window['WebSocket']) {\n      return 'ws';\n    } else if (window['XMLHttpRequest']) {\n      // The browser or node has no websockets, using long polling.\n      return 'lp';\n    }\n  }\n  return null;\n}\n\n// btoa replacement. Stock btoa fails on on non-Latin1 strings.\nfunction b64EncodeUnicode(str) {\n  // The encodeURIComponent percent-encodes UTF-8 string,\n  // then the percent encoding is converted into raw bytes which\n  // can be fed into btoa.\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n    function toSolidBytes(match, p1) {\n      return String.fromCharCode('0x' + p1);\n    }));\n}\n\n// JSON stringify helper - pre-processor for JSON.stringify\nfunction jsonBuildHelper(key, val) {\n  if (val instanceof Date) {\n    // Convert javascript Date objects to rfc3339 strings\n    val = rfc3339DateString(val);\n  } else if (val instanceof AccessMode) {\n    val = val.jsonHelper();\n  } else if (val === undefined || val === null || val === false ||\n    (Array.isArray(val) && val.length == 0) ||\n    ((typeof val == 'object') && (Object.keys(val).length == 0))) {\n    // strip out empty elements while serializing objects to JSON\n    return undefined;\n  }\n\n  return val;\n};\n\n// Trims very long strings (encoded images) to make logged packets more readable.\nfunction jsonLoggerHelper(key, val) {\n  if (typeof val == 'string' && val.length > 128) {\n    return '<' + val.length + ', bytes: ' + val.substring(0, 12) + '...' + val.substring(val.length - 12) + '>';\n  }\n  return jsonBuildHelper(key, val);\n};\n\n// Parse browser user agent to extract browser name and version.\nfunction getBrowserInfo(ua, product) {\n  ua = ua || '';\n  let reactnative = '';\n  // Check if this is a ReactNative app.\n  if (/reactnative/i.test(product)) {\n    reactnative = 'ReactNative; ';\n  }\n  let result;\n  // Remove useless string.\n  ua = ua.replace(' (KHTML, like Gecko)', '');\n  // Test for WebKit-based browser.\n  let m = ua.match(/(AppleWebKit\\/[.\\d]+)/i);\n  if (m) {\n    // List of common strings, from more useful to less useful.\n    // All unknown strings get the highest (-1) priority.\n    const priority = ['edg', 'chrome', 'safari', 'mobile', 'version'];\n    let tmp = ua.substr(m.index + m[0].length).split(' ');\n    let tokens = [];\n    let version; // 1.0 in Version/1.0 or undefined;\n    // Split string like 'Name/0.0.0' into ['Name', '0.0.0', 3] where the last element is the priority.\n    for (let i = 0; i < tmp.length; i++) {\n      let m2 = /([\\w.]+)[\\/]([\\.\\d]+)/.exec(tmp[i]);\n      if (m2) {\n        // Unknown values are highest priority (-1).\n        tokens.push([m2[1], m2[2], priority.findIndex((e) => {\n          return m2[1].toLowerCase().startsWith(e);\n        })]);\n        if (m2[1] == 'Version') {\n          version = m2[2];\n        }\n      }\n    }\n    // Sort by priority: more interesting is earlier than less interesting.\n    tokens.sort((a, b) => {\n      return a[2] - b[2];\n    });\n    if (tokens.length > 0) {\n      // Return the least common browser string and version.\n      if (tokens[0][0].toLowerCase().startsWith('edg')) {\n        tokens[0][0] = 'Edge';\n      } else if (tokens[0][0] == 'OPR') {\n        tokens[0][0] = 'Opera';\n      } else if (tokens[0][0] == 'Safari' && version) {\n        tokens[0][1] = version;\n      }\n      result = tokens[0][0] + '/' + tokens[0][1];\n    } else {\n      // Failed to ID the browser. Return the webkit version.\n      result = m[1];\n    }\n  } else if (/firefox/i.test(ua)) {\n    m = /Firefox\\/([.\\d]+)/g.exec(ua);\n    if (m) {\n      result = 'Firefox/' + m[1];\n    } else {\n      result = 'Firefox/?';\n    }\n  } else {\n    // Neither AppleWebKit nor Firefox. Try the last resort.\n    m = /([\\w.]+)\\/([.\\d]+)/.exec(ua);\n    if (m) {\n      result = m[1] + '/' + m[2];\n    } else {\n      m = ua.split(' ');\n      result = m[0];\n    }\n  }\n\n  // Shorten the version to one dot 'a.bb.ccc.d -> a.bb' at most.\n  m = result.split('/');\n  if (m.length > 1) {\n    const v = m[1].split('.');\n    const minor = v[1] ? '.' + v[1].substr(0, 2) : '';\n    result = `${m[0]}/${v[0]}${minor}`;\n  }\n  return reactnative + result;\n}\n\n/**\n * The main class for interacting with Tinode server.\n */\nexport class Tinode {\n  _host;\n  _secure;\n\n  _appName;\n\n  // API Key.\n  _apiKey;\n\n  // Name and version of the browser.\n  _browser = '';\n  _platform;\n  // Hardware\n  _hwos = 'undefined';\n  _humanLanguage = 'xx';\n\n  // Logging to console enabled\n  _loggingEnabled = false;\n  // When logging, trip long strings (base64-encoded images) for readability\n  _trimLongStrings = false;\n  // UID of the currently authenticated user.\n  _myUID = null;\n  // Status of connection: authenticated or not.\n  _authenticated = false;\n  // Login used in the last successful basic authentication\n  _login = null;\n  // Token which can be used for login instead of login/password.\n  _authToken = null;\n  // Counter of received packets\n  _inPacketCount = 0;\n  // Counter for generating unique message IDs\n  _messageId = Math.floor((Math.random() * 0xFFFF) + 0xFFFF);\n  // Information about the server, if connected\n  _serverInfo = null;\n  // Push notification token. Called deviceToken for consistency with the Android SDK.\n  _deviceToken = null;\n\n  // Cache of pending promises by message id.\n  _pendingPromises = {};\n  // The Timeout object returned by the reject expired promises setInterval.\n  _expirePromises = null;\n\n  // Websocket or long polling connection.\n  _connection = null;\n\n  // Use indexDB for caching topics and messages.\n  _persist = false;\n  // IndexedDB wrapper object.\n  _db = null;\n\n  // Tinode's cache of objects\n  _cache = {};\n\n  /**\n   * Create Tinode object.\n   *\n   * @param {Object} config - configuration parameters.\n   * @param {string} config.appName - Name of the calling application to be reported in the User Agent.\n   * @param {string} config.host - Host name and optional port number to connect to.\n   * @param {string} config.apiKey - API key generated by <code>keygen</code>.\n   * @param {string} config.transport - See {@link Tinode.Connection#transport}.\n   * @param {boolean} config.secure - Use Secure WebSocket if <code>true</code>.\n   * @param {string} config.platform - Optional platform identifier, one of <code>\"ios\"</code>, <code>\"web\"</code>, <code>\"android\"</code>.\n   * @param {boolen} config.persist - Use IndexedDB persistent storage.\n   * @param {function} onComplete - callback to call when initialization is completed.\n   */\n  constructor(config, onComplete) {\n    this._host = config.host;\n    this._secure = config.secure;\n\n    // Client-provided application name, format <Name>/<version number>\n    this._appName = config.appName || \"Undefined\";\n\n    // API Key.\n    this._apiKey = config.apiKey;\n\n    // Name and version of the browser.\n    this._platform = config.platform || 'web';\n    // Underlying OS.\n    if (typeof navigator != 'undefined') {\n      this._browser = getBrowserInfo(navigator.userAgent, navigator.product);\n      this._hwos = navigator.platform;\n      // This is the default language. It could be changed by client.\n      this._humanLanguage = navigator.language || 'en-US';\n    }\n\n    Connection.logger = this.logger;\n    Drafty.logger = this.logger;\n\n    // WebSocket or long polling network connection.\n    if (config.transport != 'lp' && config.transport != 'ws') {\n      config.transport = detectTransport();\n    }\n    this._connection = new Connection(config, Const.PROTOCOL_VERSION, /* autoreconnect */ true);\n    this._connection.onMessage = (data) => {\n      // Call the main message dispatcher.\n      this.#dispatchMessage(data);\n    }\n\n    // Ready to start sending.\n    this._connection.onOpen = _ => this.#connectionOpen();\n    this._connection.onDisconnect = (err, code) => this.#disconnected(err, code);\n\n    // Wrapper for the reconnect iterator callback.\n    this._connection.onAutoreconnectIteration = (timeout, promise) => {\n      if (this.onAutoreconnectIteration) {\n        this.onAutoreconnectIteration(timeout, promise);\n      }\n    }\n\n    this._persist = config.persist;\n    // Initialize object regardless. It simplifies the code.\n    this._db = new DBCache(this.logger, this.logger);\n\n    if (this._persist) {\n      // Create the persistent cache.\n      // Store promises to be resolved when messages load into memory.\n      const prom = [];\n      this._db.initDatabase().then(_ => {\n        // First load topics into memory.\n        return this._db.mapTopics(data => {\n          let topic = this.#cacheGet('topic', data.name);\n          if (topic) {\n            return;\n          }\n          if (data.name == Const.TOPIC_ME) {\n            topic = new TopicMe();\n          } else if (data.name == Const.TOPIC_FND) {\n            topic = new TopicFnd();\n          } else {\n            topic = new Topic(data.name);\n          }\n          this._db.deserializeTopic(topic, data);\n          this.#attachCacheToTopic(topic);\n          topic._cachePutSelf();\n          this._db.maxDelId(topic.name).then(clear => {\n            topic._maxDel = Math.max(topic._maxDel, clear || 0);\n          });\n          // Topic loaded from DB is not new.\n          delete topic._new;\n          // Request to load messages and save the promise.\n          prom.push(topic._loadMessages(this._db));\n        });\n      }).then(_ => {\n        // Then load users.\n        return this._db.mapUsers((data) => {\n          this.#cachePut('user', data.uid, mergeObj({}, data.public));\n        });\n      }).then(_ => {\n        // Now wait for all messages to finish loading.\n        return Promise.all(prom);\n      }).then(_ => {\n        if (onComplete) {\n          onComplete();\n        }\n        this.logger(\"Persistent cache initialized.\");\n      }).catch(err => {\n        if (onComplete) {\n          onComplete(err);\n        }\n        this.logger(\"Failed to initialize persistent cache:\", err);\n      });\n    } else {\n      this._db.deleteDatabase().then(_ => {\n        if (onComplete) {\n          onComplete();\n        }\n      });\n    }\n  }\n\n  // Private methods.\n\n  // Console logger. Babel somehow fails to parse '...rest' parameter.\n  logger(str, ...args) {\n    if (this._loggingEnabled) {\n      const d = new Date();\n      const dateString = ('0' + d.getUTCHours()).slice(-2) + ':' +\n        ('0' + d.getUTCMinutes()).slice(-2) + ':' +\n        ('0' + d.getUTCSeconds()).slice(-2) + '.' +\n        ('00' + d.getUTCMilliseconds()).slice(-3);\n\n      console.log('[' + dateString + ']', str, args.join(' '));\n    }\n  }\n\n  // Generator of default promises for sent packets.\n  #makePromise(id) {\n    let promise = null;\n    if (id) {\n      promise = new Promise((resolve, reject) => {\n        // Stored callbacks will be called when the response packet with this Id arrives\n        this._pendingPromises[id] = {\n          'resolve': resolve,\n          'reject': reject,\n          'ts': new Date()\n        };\n      });\n    }\n    return promise;\n  };\n\n  // Resolve or reject a pending promise.\n  // Unresolved promises are stored in _pendingPromises.\n  #execPromise(id, code, onOK, errorText) {\n    const callbacks = this._pendingPromises[id];\n    if (callbacks) {\n      delete this._pendingPromises[id];\n      if (code >= 200 && code < 400) {\n        if (callbacks.resolve) {\n          callbacks.resolve(onOK);\n        }\n      } else if (callbacks.reject) {\n        callbacks.reject(new CommError(errorText, code));\n      }\n    }\n  }\n\n  // Send a packet. If packet id is provided return a promise.\n  #send(pkt, id) {\n    let promise;\n    if (id) {\n      promise = this.#makePromise(id);\n    }\n    pkt = simplify(pkt);\n    let msg = JSON.stringify(pkt);\n    this.logger(\"out: \" + (this._trimLongStrings ? JSON.stringify(pkt, jsonLoggerHelper) : msg));\n    try {\n      this._connection.sendText(msg);\n    } catch (err) {\n      // If sendText throws, wrap the error in a promise or rethrow.\n      if (id) {\n        this.#execPromise(id, Connection.NETWORK_ERROR, null, err.message);\n      } else {\n        throw err;\n      }\n    }\n    return promise;\n  }\n\n  // The main message dispatcher.\n  #dispatchMessage(data) {\n    // Skip empty response. This happens when LP times out.\n    if (!data)\n      return;\n\n    this._inPacketCount++;\n\n    // Send raw message to listener\n    if (this.onRawMessage) {\n      this.onRawMessage(data);\n    }\n\n    if (data === '0') {\n      // Server response to a network probe.\n      if (this.onNetworkProbe) {\n        this.onNetworkProbe();\n      }\n      // No processing is necessary.\n      return;\n    }\n\n    let pkt = JSON.parse(data, jsonParseHelper);\n    if (!pkt) {\n      this.logger(\"in: \" + data);\n      this.logger(\"ERROR: failed to parse data\");\n    } else {\n      this.logger(\"in: \" + (this._trimLongStrings ? JSON.stringify(pkt, jsonLoggerHelper) : data));\n\n      // Send complete packet to listener\n      if (this.onMessage) {\n        this.onMessage(pkt);\n      }\n\n      if (pkt.ctrl) {\n        // Handling {ctrl} message\n        if (this.onCtrlMessage) {\n          this.onCtrlMessage(pkt.ctrl);\n        }\n\n        // Resolve or reject a pending promise, if any\n        if (pkt.ctrl.id) {\n          this.#execPromise(pkt.ctrl.id, pkt.ctrl.code, pkt.ctrl, pkt.ctrl.text);\n        }\n        setTimeout(_ => {\n          if (pkt.ctrl.code == 205 && pkt.ctrl.text == 'evicted') {\n            // User evicted from topic.\n            const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n            if (topic) {\n              topic._resetSub();\n              if (pkt.ctrl.params && pkt.ctrl.params.unsub) {\n                topic._gone();\n              }\n            }\n          } else if (pkt.ctrl.code < 300 && pkt.ctrl.params) {\n            if (pkt.ctrl.params.what == 'data') {\n              // code=208, all messages received: \"params\":{\"count\":11,\"what\":\"data\"},\n              const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n              if (topic) {\n                topic._allMessagesReceived(pkt.ctrl.params.count);\n              }\n            } else if (pkt.ctrl.params.what == 'sub') {\n              // code=204, the topic has no (refreshed) subscriptions.\n              const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n              if (topic) {\n                // Trigger topic.onSubsUpdated.\n                topic._processMetaSubs([]);\n              }\n            }\n          }\n        }, 0);\n      } else {\n        setTimeout(_ => {\n          if (pkt.meta) {\n            // Handling a {meta} message.\n            // Preferred API: Route meta to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.meta.topic);\n            if (topic) {\n              topic._routeMeta(pkt.meta);\n            }\n\n            if (pkt.meta.id) {\n              this.#execPromise(pkt.meta.id, 200, pkt.meta, 'META');\n            }\n\n            // Secondary API: callback\n            if (this.onMetaMessage) {\n              this.onMetaMessage(pkt.meta);\n            }\n          } else if (pkt.data) {\n            // Handling {data} message\n            // Preferred API: Route data to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.data.topic);\n            if (topic) {\n              topic._routeData(pkt.data);\n            }\n\n            // Secondary API: Call callback\n            if (this.onDataMessage) {\n              this.onDataMessage(pkt.data);\n            }\n          } else if (pkt.pres) {\n            // Handling {pres} message\n            // Preferred API: Route presence to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.pres.topic);\n            if (topic) {\n              topic._routePres(pkt.pres);\n            }\n\n            // Secondary API - callback\n            if (this.onPresMessage) {\n              this.onPresMessage(pkt.pres);\n            }\n          } else if (pkt.info) {\n            // {info} message - read/received notifications and key presses\n            // Preferred API: Route {info}} to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.info.topic);\n            if (topic) {\n              topic._routeInfo(pkt.info);\n            }\n\n            // Secondary API - callback\n            if (this.onInfoMessage) {\n              this.onInfoMessage(pkt.info);\n            }\n          } else {\n            this.logger(\"ERROR: Unknown packet received.\");\n          }\n        }, 0);\n      }\n    }\n  }\n\n  // Connection open, ready to start sending.\n  #connectionOpen() {\n    if (!this._expirePromises) {\n      // Reject promises which have not been resolved for too long.\n      this._expirePromises = setInterval(_ => {\n        const err = new CommError(\"timeout\", 504);\n        const expires = new Date(new Date().getTime() - Const.EXPIRE_PROMISES_TIMEOUT);\n        for (let id in this._pendingPromises) {\n          let callbacks = this._pendingPromises[id];\n          if (callbacks && callbacks.ts < expires) {\n            this.logger(\"Promise expired\", id);\n            delete this._pendingPromises[id];\n            if (callbacks.reject) {\n              callbacks.reject(err);\n            }\n          }\n        }\n      }, Const.EXPIRE_PROMISES_PERIOD);\n    }\n    this.hello();\n  }\n\n  #disconnected(err, code) {\n    this._inPacketCount = 0;\n    this._serverInfo = null;\n    this._authenticated = false;\n\n    if (this._expirePromises) {\n      clearInterval(this._expirePromises);\n      this._expirePromises = null;\n    }\n\n    // Mark all topics as unsubscribed\n    this.#cacheMap('topic', (topic, key) => {\n      topic._resetSub();\n    });\n\n    // Reject all pending promises\n    for (let key in this._pendingPromises) {\n      const callbacks = this._pendingPromises[key];\n      if (callbacks && callbacks.reject) {\n        callbacks.reject(err);\n      }\n    }\n    this._pendingPromises = {};\n\n    if (this.onDisconnect) {\n      this.onDisconnect(err);\n    }\n  }\n\n  // Get User Agent string\n  #getUserAgent() {\n    return this._appName + ' (' + (this._browser ? this._browser + '; ' : '') + this._hwos + '); ' + Const.LIBRARY;\n  }\n\n  // Generator of packets stubs\n  #initPacket(type, topic) {\n    switch (type) {\n      case 'hi':\n        return {\n          'hi': {\n            'id': this.getNextUniqueId(),\n            'ver': Const.VERSION,\n            'ua': this.#getUserAgent(),\n            'dev': this._deviceToken,\n            'lang': this._humanLanguage,\n            'platf': this._platform\n          }\n        };\n\n      case 'acc':\n        return {\n          'acc': {\n            'id': this.getNextUniqueId(),\n            'user': null,\n            'scheme': null,\n            'secret': null,\n            'tmpscheme': null,\n            'tmpsecret': null,\n            'login': false,\n            'tags': null,\n            'desc': {},\n            'cred': {}\n          }\n        };\n\n      case 'login':\n        return {\n          'login': {\n            'id': this.getNextUniqueId(),\n            'scheme': null,\n            'secret': null\n          }\n        };\n\n      case 'sub':\n        return {\n          'sub': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'set': {},\n            'get': {}\n          }\n        };\n\n      case 'leave':\n        return {\n          'leave': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'unsub': false\n          }\n        };\n\n      case 'pub':\n        return {\n          'pub': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'noecho': false,\n            'head': null,\n            'content': {}\n          }\n        };\n\n      case 'get':\n        return {\n          'get': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'what': null,\n            'desc': {},\n            'sub': {},\n            'data': {}\n          }\n        };\n\n      case 'set':\n        return {\n          'set': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'desc': {},\n            'sub': {},\n            'tags': [],\n            'aux': {}\n          }\n        };\n\n      case 'del':\n        return {\n          'del': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'what': null,\n            'delseq': null,\n            'user': null,\n            'hard': false\n          }\n        };\n\n      case 'note':\n        return {\n          'note': {\n            // no id by design (except calls).\n            'topic': topic,\n            'what': null, // one of \"recv\", \"read\", \"kp\", \"call\"\n            'seq': undefined // the server-side message id acknowledged as received or read.\n          }\n        };\n\n      default:\n        throw new Error(`Unknown packet type requested: ${type}`);\n    }\n  }\n\n  // Cache management\n  #cachePut(type, name, obj) {\n    this._cache[type + ':' + name] = obj;\n  }\n  #cacheGet(type, name) {\n    return this._cache[type + ':' + name];\n  }\n  #cacheDel(type, name) {\n    delete this._cache[type + ':' + name];\n  }\n\n  // Enumerate all items in cache, call func for each item.\n  // Enumeration stops if func returns true.\n  #cacheMap(type, func, context) {\n    const key = type ? type + ':' : undefined;\n    for (let idx in this._cache) {\n      if (!key || idx.indexOf(key) == 0) {\n        if (func.call(context, this._cache[idx], idx)) {\n          break;\n        }\n      }\n    }\n  }\n\n  // Make limited cache management available to topic.\n  // Caching user.public only. Everything else is per-topic.\n  #attachCacheToTopic(topic) {\n    topic._tinode = this;\n\n    topic._cacheGetUser = (uid) => {\n      const pub = this.#cacheGet('user', uid);\n      if (pub) {\n        return {\n          user: uid,\n          public: mergeObj({}, pub)\n        };\n      }\n      return undefined;\n    };\n    topic._cachePutUser = (uid, user) => {\n      this.#cachePut('user', uid, mergeObj({}, user.public));\n    };\n    topic._cacheDelUser = (uid) => {\n      this.#cacheDel('user', uid);\n    };\n    topic._cachePutSelf = _ => {\n      this.#cachePut('topic', topic.name, topic);\n    };\n    topic._cacheDelSelf = _ => {\n      this.#cacheDel('topic', topic.name);\n    };\n  }\n\n  // On successful login save server-provided data.\n  #loginSuccessful(ctrl) {\n    if (!ctrl.params || !ctrl.params.user) {\n      return ctrl;\n    }\n    // This is a response to a successful login,\n    // extract UID and security token, save it in Tinode module\n    this._myUID = ctrl.params.user;\n    this._authenticated = (ctrl && ctrl.code >= 200 && ctrl.code < 300);\n    if (ctrl.params && ctrl.params.token && ctrl.params.expires) {\n      this._authToken = {\n        token: ctrl.params.token,\n        expires: ctrl.params.expires\n      };\n    } else {\n      this._authToken = null;\n    }\n\n    if (this.onLogin) {\n      this.onLogin(ctrl.code, ctrl.text);\n    }\n\n    return ctrl;\n  }\n\n  // Static methods.\n  /**\n   * Helper method to package account credential.\n   *\n   * @param {string | Credential} meth - validation method or object with validation data.\n   * @param {string=} val - validation value (e.g. email or phone number).\n   * @param {Object=} params - validation parameters.\n   * @param {string=} resp - validation response.\n   *\n   * @returns {Array.<Credential>} array with a single credential or <code>null</code> if no valid credentials were given.\n   */\n  static credential(meth, val, params, resp) {\n    if (typeof meth == 'object') {\n      ({\n        val,\n        params,\n        resp,\n        meth\n      } = meth);\n    }\n    if (meth && (val || resp)) {\n      return [{\n        'meth': meth,\n        'val': val,\n        'resp': resp,\n        'params': params\n      }];\n    }\n    return null;\n  }\n\n  /**\n   * Determine topic type from topic's name: grp, p2p, me, fnd, sys.\n   * @param {string} name - Name of the topic to test.\n   * @returns {string} One of <code>\"me\"</code>, <code>\"fnd\"</code>, <code>\"sys\"</code>, <code>\"grp\"</code>,\n   *    <code>\"p2p\"</code> or <code>undefined</code>.\n   */\n  static topicType(name) {\n    return Topic.topicType(name);\n  }\n\n  /**\n   * Check if the given topic name is a name of a 'me' topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'me' topic, <code>false</code> otherwise.\n   */\n  static isMeTopicName(name) {\n    return Topic.isMeTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a 'slf' topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'slf' topic, <code>false</code> otherwise.\n   */\n  static isSelfTopicName(name) {\n    return Topic.isSelfTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a group topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a group topic, <code>false</code> otherwise.\n   */\n  static isGroupTopicName(name) {\n    return Topic.isGroupTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a p2p topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p topic, <code>false</code> otherwise.\n   */\n  static isP2PTopicName(name) {\n    return Topic.isP2PTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a communication topic, i.e. P2P or group.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p or group topic, <code>false</code> otherwise.\n   */\n  static isCommTopicName(name) {\n    return Topic.isCommTopicName(name);\n  }\n  /**\n   * Check if the topic name is a name of a new topic.\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a new topic, <code>false</code> otherwise.\n   */\n  static isNewGroupTopicName(name) {\n    return Topic.isNewGroupTopicName(name);\n  }\n  /**\n   * Check if the topic name is a name of a channel.\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a channel, <code>false</code> otherwise.\n   */\n  static isChannelTopicName(name) {\n    return Topic.isChannelTopicName(name);\n  }\n  /**\n   * Get information about the current version of this Tinode client library.\n   * @returns {string} semantic version of the library, e.g. <code>\"0.15.5-rc1\"</code>.\n   */\n  static getVersion() {\n    return Const.VERSION;\n  }\n  /**\n   * To use Tinode in a non browser context, supply WebSocket and XMLHttpRequest providers.\n   * @static\n   *\n   * @param wsProvider <code>WebSocket</code> provider, e.g. for nodeJS , <code>require('ws')</code>.\n   * @param xhrProvider <code>XMLHttpRequest</code> provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProviders(wsProvider, xhrProvider) {\n    WebSocketProvider = wsProvider;\n    XHRProvider = xhrProvider;\n\n    Connection.setNetworkProviders(WebSocketProvider, XHRProvider);\n    LargeFileHelper.setNetworkProvider(XHRProvider);\n  }\n  /**\n   * To use Tinode in a non browser context, supply <code>indexedDB</code> provider.\n   * @static\n   *\n   * @param idbProvider <code>indexedDB</code> provider, e.g. for nodeJS , <code>require('fake-indexeddb')</code>.\n   */\n  static setDatabaseProvider(idbProvider) {\n    IndexedDBProvider = idbProvider;\n\n    DBCache.setDatabaseProvider(IndexedDBProvider);\n  }\n  /**\n   * Return information about the current name and version of this Tinode library.\n   * @static\n   *\n   * @returns {string} the name of the library and it's version.\n   */\n  static getLibrary() {\n    return Const.LIBRARY;\n  }\n  /**\n   * Check if the given string represents <code>NULL</code> value as defined by Tinode (<code>'\\u2421'</code>).\n   * @param {string} str - string to check for <code>NULL</code> value.\n   * @returns {boolean} <code>true</code> if string represents <code>NULL</code> value, <code>false</code> otherwise.\n   */\n  static isNullValue(str) {\n    return str === Const.DEL_CHAR;\n  }\n  /**\n   * Check if the given seq ID is likely to be issued by the server as oppisite to being temporary locally assigned ID.\n   * @param {int} seq - seq ID to check.\n   * @returns {boolean} <code>true</code> if seq is likely server-issued, <code>false</code> otherwise.\n   */\n  static isServerAssignedSeq(seq) {\n    return seq > 0 && seq < Const.LOCAL_SEQID;\n  }\n\n  /**\n   * Check if the given string is a valid tag value.\n   * @param {string} tag - string to check.\n   * @returns {boolean} <code>true</code> if the string is a valid tag value, <code>false</code> otherwise.\n   */\n  static isValidTagValue(tag) {\n    // 4-24 characters, starting with letter or digit, then letters, digits, hyphen, underscore.\n    const ALIAS_REGEX = /^[a-z0-9][a-z0-9_\\-]{3,23}$/i;\n    return tag && typeof tag == 'string' && tag.length > 3 && tag.length < 24 && ALIAS_REGEX.test(tag);\n  }\n\n  /**\n   * Split fully-qualified tag into prefix and value.\n   */\n  static tagSplit(tag) {\n    if (!tag) {\n      return null;\n    }\n\n    tag = tag.trim();\n\n    const splitAt = tag.indexOf(':');\n    if (splitAt <= 0) {\n      // Invalid syntax.\n      return null;\n    }\n\n    const value = tag.substring(splitAt + 1);\n    if (!value) {\n      return null;\n    }\n    return {\n      prefix: tag.substring(0, splitAt),\n      value: value\n    };\n  }\n\n  /**\n   * Set a unique namespace tag.\n   * If the tag with this namespace is already present then it's replaced with the new tag.\n   * @param uniqueTag tag to add, must be fully-qualified; if null or empty, no action is taken.\n   */\n  static setUniqueTag(tags, uniqueTag) {\n    if (!tags || tags.length == 0) {\n      // No tags, just add the new one.\n      return [uniqueTag];\n    }\n\n    const parts = Tinode.tagSplit(uniqueTag)\n    if (!parts) {\n      // Invalid tag.\n      return tags;\n    }\n\n    // Remove the old tag with the same prefix.\n    tags = tags.filter(tag => tag && !tag.startsWith(parts.prefix));\n    // Add the new tag.\n    tags.push(uniqueTag);\n    return tags;\n  }\n\n  /**\n   * Remove a unique tag with the given prefix.\n   * @param prefix prefix to remove\n   */\n  static clearTagPrefix(tags, prefix) {\n    if (!tags || tags.length == 0) {\n      return [];\n    }\n    return tags.filter(tag => tag && !tag.startsWith(prefix));\n  }\n\n  /**\n   * Find the first tag with the given prefix.\n   * @param prefix prefix to search for.\n   * @return the first tag with the given prefix if found or <code>undefined</code>.\n   */\n  static tagByPrefix(tags, prefix) {\n    if (!tags) {\n      return undefined;\n    }\n\n    return tags.find(tag => tag && tag.startsWith(prefix));\n  }\n\n  // Instance methods.\n\n  // Generates unique message IDs\n  getNextUniqueId() {\n    return (this._messageId != 0) ? '' + this._messageId++ : undefined;\n  };\n\n  /**\n   * Connect to the server.\n   *\n   * @param {string} host_ - name of the host to connect to.\n   * @return {Promise} Promise resolved/rejected when the connection call completes:\n   *    <code>resolve()</code> is called without parameters, <code>reject()</code> receives the\n   *    <code>Error</code> as a single parameter.\n   */\n  connect(host_) {\n    return this._connection.connect(host_);\n  }\n\n  /**\n   * Attempt to reconnect to the server immediately.\n   *\n   * @param {string} force - if <code>true</code>, reconnect even if there is a connection already.\n   */\n  reconnect(force) {\n    this._connection.reconnect(force);\n  }\n\n  /**\n   * Disconnect from the server.\n   */\n  disconnect() {\n    this._connection.disconnect();\n  }\n\n  /**\n   * Clear persistent cache: remove IndexedDB.\n   *\n   * @return {Promise} Promise resolved/rejected when the operation is completed.\n   */\n  clearStorage() {\n    if (this._db.isReady()) {\n      return this._db.deleteDatabase();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Initialize persistent cache: create IndexedDB cache.\n   *\n   * @return {Promise} Promise resolved/rejected when the operation is completed.\n   */\n  initStorage() {\n    if (!this._db.isReady()) {\n      return this._db.initDatabase();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Send a network probe message to make sure the connection is alive.\n   */\n  networkProbe() {\n    this._connection.probe();\n  }\n\n  /**\n   * Check for live connection to server.\n   *\n   * @returns {boolean} <code>true</code> if there is a live connection, <code>false</code> otherwise.\n   */\n  isConnected() {\n    return this._connection.isConnected();\n  }\n\n  /**\n   * Check if connection is authenticated (last login was successful).\n   *\n   * @returns {boolean} <code>true</code> if authenticated, <code>false</code> otherwise.\n   */\n  isAuthenticated() {\n    return this._authenticated;\n  }\n\n  /**\n   * Add API key and auth token to the relative URL making it usable for getting data\n   * from the server in a simple <code>HTTP GET</code> request.\n   *\n   * @param {string} URL - URL to wrap.\n   * @returns {string} URL with appended API key and token, if valid token is present.\n   */\n  authorizeURL(url) {\n    if (typeof url != 'string') {\n      return url;\n    }\n\n    if (isUrlRelative(url)) {\n      // Fake base to make the relative URL parseable.\n      const base = 'scheme://host/';\n      const parsed = new URL(url, base);\n      if (this._apiKey) {\n        parsed.searchParams.append('apikey', this._apiKey);\n      }\n      if (this._authToken && this._authToken.token) {\n        parsed.searchParams.append('auth', 'token');\n        parsed.searchParams.append('secret', this._authToken.token);\n      }\n      // Convert back to string and strip fake base URL except for the root slash.\n      url = parsed.toString().substring(base.length - 1);\n    }\n    return url;\n  }\n\n  /**\n   * @typedef AccountParams\n   * @type {Object}\n   * @property {DefAcs=} defacs - Default access parameters for user's <code>me</code> topic.\n   * @property {Object=} public - Public application-defined data exposed on <code>me</code> topic.\n   * @property {Object=} private - Private application-defined data accessible on <code>me</code> topic.\n   * @property {Object=} trusted - Trusted user data which can be set by a root user only.\n   * @property {Array.<string>} tags - array of string tags for user discovery.\n   * @property {string} scheme - Temporary authentication scheme for password reset.\n   * @property {string} secret - Temporary authentication secret for password reset.\n   * @property {Array.<string>=} attachments - Array of references to out of band attachments used in account description.\n   */\n  /**\n   * @typedef DefAcs\n   * @type {Object}\n   * @property {string=} auth - Access mode for <code>me</code> for authenticated users.\n   * @property {string=} anon - Access mode for <code>me</code> for anonymous users.\n   */\n\n  /**\n   * Create or update an account.\n   *\n   * @param {string} uid - User id to update\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> and <code>\"anonymous\"</code> are the currently supported schemes.\n   * @param {string} secret - Authentication secret, assumed to be already base64 encoded.\n   * @param {boolean=} login - Use new account to authenticate current session\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  account(uid, scheme, secret, login, params) {\n    const pkt = this.#initPacket('acc');\n    pkt.acc.user = uid;\n    pkt.acc.scheme = scheme;\n    pkt.acc.secret = secret;\n    // Log in to the new account using selected scheme\n    pkt.acc.login = login;\n\n    if (params) {\n      pkt.acc.desc.defacs = params.defacs;\n      pkt.acc.desc.public = params.public;\n      pkt.acc.desc.private = params.private;\n      pkt.acc.desc.trusted = params.trusted;\n\n      pkt.acc.tags = params.tags;\n      pkt.acc.cred = params.cred;\n\n      pkt.acc.tmpscheme = params.scheme;\n      pkt.acc.tmpsecret = params.secret;\n\n      if (Array.isArray(params.attachments) && params.attachments.length > 0) {\n        pkt.extra = {\n          attachments: params.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n    }\n\n    return this.#send(pkt, pkt.acc.id);\n  }\n\n  /**\n   * Create a new user. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> is the only currently supported scheme.\n   * @param {string} secret - Authentication.\n   * @param {boolean=} login - Use new account to authenticate current session\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  createAccount(scheme, secret, login, params) {\n    let promise = this.account(Const.USER_NEW, scheme, secret, login, params);\n    if (login) {\n      promise = promise.then(ctrl => this.#loginSuccessful(ctrl));\n    }\n    return promise;\n  }\n\n  /**\n   * Create user with <code>'basic'</code> authentication scheme and immediately\n   * use it for authentication. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} username - Login to use for the new account.\n   * @param {string} password - User's password.\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  createAccountBasic(username, password, params) {\n    // Make sure we are not using 'null' or 'undefined';\n    username = username || '';\n    password = password || '';\n    return this.createAccount('basic',\n      b64EncodeUnicode(username + ':' + password), true, params);\n  }\n\n  /**\n   * Update user's credentials for <code>'basic'</code> authentication scheme. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} uid - User ID to update.\n   * @param {string} username - Login to use for the new account.\n   * @param {string} password - User's password.\n   * @param {AccountParams=} params - data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  updateAccountBasic(uid, username, password, params) {\n    // Make sure we are not using 'null' or 'undefined';\n    username = username || '';\n    password = password || '';\n    return this.account(uid, 'basic',\n      b64EncodeUnicode(username + ':' + password), false, params);\n  }\n\n  /**\n   * Send handshake to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  hello() {\n    const pkt = this.#initPacket('hi');\n\n    return this.#send(pkt, pkt.hi.id)\n      .then(ctrl => {\n        // Reset backoff counter on successful connection.\n        this._connection.backoffReset();\n\n        // Server response contains server protocol version, build, constraints,\n        // session ID for long polling. Save them.\n        if (ctrl.params) {\n          this._serverInfo = ctrl.params;\n        }\n\n        if (this.onConnect) {\n          this.onConnect();\n        }\n\n        return ctrl;\n      }).catch(err => {\n        this._connection.reconnect(true);\n\n        if (this.onDisconnect) {\n          this.onDisconnect(err);\n        }\n      });\n  }\n\n  /**\n   * Set or refresh the push notifications/device token. If the client is connected,\n   * the deviceToken can be sent to the server.\n   *\n   * @param {string} dt - token obtained from the provider or <code>false</code>,\n   *    <code>null</code> or <code>undefined</code> to clear the token.\n   *\n   * @returns <code>true</code> if attempt was made to send the update to the server.\n   */\n  setDeviceToken(dt) {\n    let sent = false;\n    // Convert any falsish value to null.\n    dt = dt || null;\n    if (dt != this._deviceToken) {\n      this._deviceToken = dt;\n      if (this.isConnected() && this.isAuthenticated()) {\n        this.#send({\n          'hi': {\n            'dev': dt || Tinode.DEL_CHAR\n          }\n        });\n        sent = true;\n      }\n    }\n    return sent;\n  }\n\n  /**\n   * @typedef Credential\n   * @type {Object}\n   * @property {string} meth - validation method.\n   * @property {string} val - value to validate (e.g. email or phone number).\n   * @property {string} resp - validation response.\n   * @property {Object} params - validation parameters.\n   */\n  /**\n   * Authenticate current session.\n   *\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> is the only currently supported scheme.\n   * @param {string} secret - Authentication secret, assumed to be already base64 encoded.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  login(scheme, secret, cred) {\n    const pkt = this.#initPacket('login');\n    pkt.login.scheme = scheme;\n    pkt.login.secret = secret;\n    pkt.login.cred = cred;\n\n    return this.#send(pkt, pkt.login.id)\n      .then(ctrl => this.#loginSuccessful(ctrl));\n  }\n\n  /**\n   * Wrapper for {@link Tinode#login} with basic authentication\n   *\n   * @param {string} uname - User name.\n   * @param {string} password  - Password.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  loginBasic(uname, password, cred) {\n    return this.login('basic', b64EncodeUnicode(uname + ':' + password), cred)\n      .then(ctrl => {\n        this._login = uname;\n        return ctrl;\n      });\n  }\n\n  /**\n   * Wrapper for {@link Tinode#login} with token authentication\n   *\n   * @param {string} token - Token received in response to earlier login.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  loginToken(token, cred) {\n    return this.login('token', token, cred);\n  }\n\n  /**\n   * Send a request for resetting an authentication secret.\n   *\n   * @param {string} scheme - authentication scheme to reset.\n   * @param {string} method - method to use for resetting the secret, such as \"email\" or \"tel\".\n   * @param {string} value - value of the credential to use, a specific email address or a phone number.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving the server reply.\n   */\n  requestResetAuthSecret(scheme, method, value) {\n    return this.login('reset', b64EncodeUnicode(scheme + ':' + method + ':' + value));\n  }\n\n  /**\n   * @typedef AuthToken\n   * @type {Object}\n   * @property {string} token - Token value.\n   * @property {Date} expires - Token expiration time.\n   */\n  /**\n   * Get stored authentication token.\n   *\n   * @returns {AuthToken} authentication token.\n   */\n  getAuthToken() {\n    if (this._authToken && (this._authToken.expires.getTime() > Date.now())) {\n      return this._authToken;\n    } else {\n      this._authToken = null;\n    }\n    return null;\n  }\n\n  /**\n   * Application may provide a saved authentication token.\n   *\n   * @param {AuthToken} token - authentication token.\n   */\n  setAuthToken(token) {\n    this._authToken = token;\n  }\n\n  /**\n   * @typedef SetParams\n   * @type {Object}\n   * @property {SetDesc=} desc - Topic initialization parameters when creating a new topic or a new subscription.\n   * @property {SetSub=} sub - Subscription initialization parameters.\n   * @property {Array.<string>=} tags - Search tags.\n   * @property {Object} aux - Auxiliary topic data.\n   * @property {Array.<string>=} attachments - URLs of out of band attachments used in parameters.\n   */\n  /**\n   * @typedef SetDesc\n   * @type {Object}\n   * @property {DefAcs=} defacs - Default access mode.\n   * @property {Object=} public - Free-form topic description, publically accessible.\n   * @property {Object=} private - Free-form topic description accessible only to the owner.\n   * @property {Object=} trusted - Trusted user data which can be set by a root user only.\n   */\n  /**\n   * @typedef SetSub\n   * @type {Object}\n   * @property {string=} user - UID of the user affected by the request. Default (empty) - current user.\n   * @property {string=} mode - User access mode, either requested or assigned dependent on context.\n   */\n  /**\n   * Send a topic subscription request.\n   *\n   * @param {string} topic - Name of the topic to subscribe to.\n   * @param {GetQuery=} getParams - Optional subscription metadata query\n   * @param {SetParams=} setParams - Optional initialization parameters\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  subscribe(topicName, getParams, setParams) {\n    const pkt = this.#initPacket('sub', topicName)\n    if (!topicName) {\n      topicName = Const.TOPIC_NEW;\n    }\n\n    pkt.sub.get = getParams;\n\n    if (setParams) {\n      if (setParams.sub) {\n        pkt.sub.set.sub = setParams.sub;\n      }\n\n      if (setParams.desc) {\n        const desc = setParams.desc;\n        if (Tinode.isNewGroupTopicName(topicName)) {\n          // Full set.desc params are used for new topics only\n          pkt.sub.set.desc = desc;\n        } else if (Tinode.isP2PTopicName(topicName) && desc.defacs) {\n          // Use optional default permissions only.\n          pkt.sub.set.desc = {\n            defacs: desc.defacs\n          };\n        }\n      }\n\n      // See if external objects were used in topic description.\n      if (Array.isArray(setParams.attachments) && setParams.attachments.length > 0) {\n        pkt.extra = {\n          attachments: setParams.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n\n      if (setParams.tags) {\n        pkt.sub.set.tags = setParams.tags;\n      }\n      if (setParams.aux) {\n        pkt.sub.set.aux = setParams.aux;\n      }\n    }\n    return this.#send(pkt, pkt.sub.id);\n  }\n\n  /**\n   * Detach and optionally unsubscribe from the topic\n   *\n   * @param {string} topic - Topic to detach from.\n   * @param {boolean} unsub - If <code>true</code>, detach and unsubscribe, otherwise just detach.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  leave(topic, unsub) {\n    const pkt = this.#initPacket('leave', topic);\n    pkt.leave.unsub = unsub;\n\n    return this.#send(pkt, pkt.leave.id);\n  }\n\n  /**\n   * Create message draft without sending it to the server.\n   *\n   * @param {string} topic - Name of the topic to publish to.\n   * @param {Object} content - Payload to publish.\n   * @param {boolean=} noEcho - If <code>true</code>, tell the server not to echo the message to the original session.\n   *\n   * @returns {Object} new message which can be sent to the server or otherwise used.\n   */\n  createMessage(topic, content, noEcho) {\n    const pkt = this.#initPacket('pub', topic);\n\n    let dft = typeof content == 'string' ? Drafty.parse(content) : content;\n    if (dft && !Drafty.isPlainText(dft)) {\n      pkt.pub.head = {\n        mime: Drafty.getContentType()\n      };\n      content = dft;\n    }\n    pkt.pub.noecho = noEcho;\n    pkt.pub.content = content;\n\n    return pkt.pub;\n  }\n\n  /**\n   * Publish {data} message to topic.\n   *\n   * @param {string} topicName - Name of the topic to publish to.\n   * @param {Object} content - Payload to publish.\n   * @param {boolean=} noEcho - If <code>true</code>, tell the server not to echo the message to the original session.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  publish(topicName, content, noEcho) {\n    return this.publishMessage(\n      this.createMessage(topicName, content, noEcho)\n    );\n  }\n\n  /**\n   * Publish message to topic. The message should be created by {@link Tinode#createMessage}.\n   *\n   * @param {Object} pub - Message to publish.\n   * @param {Array.<string>=} attachments - array of URLs with attachments.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  publishMessage(pub, attachments) {\n    // Make a shallow copy. Needed in order to clear locally-assigned temp values;\n    pub = Object.assign({}, pub);\n    pub.seq = undefined;\n    pub.from = undefined;\n    pub.ts = undefined;\n    const msg = {\n      pub: pub,\n    };\n    if (attachments) {\n      msg.extra = {\n        attachments: attachments.filter(ref => isUrlRelative(ref))\n      };\n    }\n    return this.#send(msg, pub.id);\n  }\n\n  /**\n   * Out of band notification: notify topic that an external (push) notification was recived by the client.\n   *\n   * @param {object} data - notification payload.\n   * @param {string} data.what - notification type, 'msg', 'read', 'sub'.\n   * @param {string} data.topic - name of the updated topic.\n   * @param {number=} data.seq - seq ID of the affected message.\n   * @param {string=} data.xfrom - UID of the sender.\n   * @param {object=} data.given - new subscription 'given', e.g. 'ASWP...'.\n   * @param {object=} data.want - new subscription 'want', e.g. 'RWJ...'.\n   */\n  oobNotification(data) {\n    this.logger('oob: ' + (this._trimLongStrings ? JSON.stringify(data, jsonLoggerHelper) : data));\n\n    switch (data.what) {\n      case 'msg':\n        if (!data.seq || data.seq < 1 || !data.topic) {\n          // Server sent invalid data.\n          break;\n        }\n\n        if (!this.isConnected()) {\n          // Let's ignore the message if there is no connection: no connection means there are no open\n          // tabs with Tinode.\n          break;\n        }\n\n        const topic = this.#cacheGet('topic', data.topic);\n        if (!topic) {\n          // TODO: check if there is a case when a message can arrive from an unknown topic.\n          break;\n        }\n\n        if (topic.isSubscribed()) {\n          // No need to fetch: topic is already subscribed and got data through normal channel.\n          break;\n        }\n\n        if (topic.maxMsgSeq() < data.seq) {\n          if (topic.isChannelType()) {\n            topic._updateReceived(data.seq, 'fake-uid');\n          }\n\n          // New message.\n          if (data.xfrom && !this.#cacheGet('user', data.xfrom)) {\n            // Message from unknown sender, fetch description from the server.\n            // Sending asynchronously without a subscription.\n            this.getMeta(data.xfrom, new MetaGetBuilder().withDesc().build()).catch(err => {\n              this.logger(\"Failed to get the name of a new sender\", err);\n            });\n          }\n\n          topic.subscribe(null).then(_ => {\n            return topic.getMeta(new MetaGetBuilder(topic).withLaterData(24).withLaterDel(24).build());\n          }).then(_ => {\n            // Allow data fetch to complete and get processed successfully.\n            topic.leaveDelayed(false, 1000);\n          }).catch(err => {\n            this.logger(\"On push data fetch failed\", err);\n          }).finally(_ => {\n            this.getMeTopic()._refreshContact('msg', topic);\n          });\n        }\n        break;\n\n      case 'read':\n        this.getMeTopic()._routePres({\n          what: 'read',\n          seq: data.seq\n        });\n        break;\n\n      case 'sub':\n        if (!this.isMe(data.xfrom)) {\n          // TODO: handle updates from other users.\n          break;\n        }\n\n        const mode = {\n          given: data.modeGiven,\n          want: data.modeWant\n        };\n        const acs = new AccessMode(mode);\n        const pres = (!acs.mode || acs.mode == AccessMode._NONE) ?\n          // Subscription deleted.\n          {\n            what: 'gone',\n            src: data.topic\n          } :\n          // New subscription or subscription updated.\n          {\n            what: 'acs',\n            src: data.topic,\n            dacs: mode\n          };\n        this.getMeTopic()._routePres(pres);\n        break;\n\n      default:\n        this.logger(\"Unknown push type ignored\", data.what);\n    }\n  }\n\n  /**\n   * @typedef GetOptsType\n   * @type {Object}\n   * @property {Date=} ims - \"If modified since\", fetch data only it was was modified since stated date.\n   * @property {number=} limit - Maximum number of results to return. Ignored when querying topic description.\n   */\n\n  /**\n   * @typedef GetDataType\n   * @type {Object}\n   * @property {number=} since - Load messages with seq ID equal or greater than this value.\n   * @property {number=} before - Load messages with seq ID lower than this number.\n   * @property {number=} limit - Maximum number of results to return.\n   * @property {Array.<SeqRange>=} range - Ranges of seq IDs to fetch.\n   */\n\n  /**\n   * @typedef GetQuery\n   * @type {Object}\n   * @property {GetOptsType=} desc - If provided (even if empty), fetch topic description.\n   * @property {GetOptsType=} sub - If provided (even if empty), fetch topic subscriptions.\n   * @property {GetDataType=} data - If provided (even if empty), get messages.\n   */\n\n  /**\n   * Request topic metadata\n   *\n   * @param {string} topic - Name of the topic to query.\n   * @param {GetQuery} params - Parameters of the query. Use {@link Tinode.MetaGetBuilder} to generate.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  getMeta(topic, params) {\n    const pkt = this.#initPacket('get', topic);\n\n    pkt.get = mergeObj(pkt.get, params);\n\n    return this.#send(pkt, pkt.get.id);\n  }\n\n  /**\n   * Update topic's metadata: description, subscribtions.\n   *\n   * @param {string} topic - Topic to update.\n   * @param {SetParams} params - topic metadata to update.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  setMeta(topic, params) {\n    const pkt = this.#initPacket('set', topic);\n    const what = [];\n\n    if (params) {\n      ['desc', 'sub', 'tags', 'cred', 'aux'].forEach(key => {\n        if (params.hasOwnProperty(key)) {\n          what.push(key);\n          pkt.set[key] = params[key];\n        }\n      });\n\n      if (Array.isArray(params.attachments) && params.attachments.length > 0) {\n        pkt.extra = {\n          attachments: params.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n    }\n\n    if (what.length == 0) {\n      return Promise.reject(new Error(\"Invalid {set} parameters\"));\n    }\n\n    return this.#send(pkt, pkt.set.id);\n  }\n\n  /**\n   * Range of message IDs.\n   *\n   * @typedef SeqRange\n   * @type {Object}\n   * @property {number} low - low end of the range, inclusive (closed).\n   * @property {number=} hi - high end of the range, exclusive (open).\n   */\n  /**\n   * Delete some or all messages in a topic.\n   *\n   * @param {string} topic - Topic name to delete messages from.\n   * @param {Array.<SeqRange>} list - Ranges of message IDs to delete.\n   * @param {boolean=} hard - Hard or soft delete\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delMessages(topic, ranges, hard) {\n    const pkt = this.#initPacket('del', topic);\n\n    pkt.del.what = 'msg';\n    pkt.del.delseq = ranges;\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete the topic alltogether. Requires Owner permission.\n   *\n   * @param {string} topicName - Name of the topic to delete\n   * @param {boolean} hard - hard-delete topic.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delTopic(topicName, hard) {\n    const pkt = this.#initPacket('del', topicName);\n    pkt.del.what = 'topic';\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete subscription. Requires Share permission.\n   *\n   * @param {string} topicName - Name of the topic to delete\n   * @param {string} user - User ID to remove.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delSubscription(topicName, user) {\n    const pkt = this.#initPacket('del', topicName);\n    pkt.del.what = 'sub';\n    pkt.del.user = user;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete credential. Always sent on <code>'me'</code> topic.\n   *\n   * @param {string} method - validation method such as <code>'email'</code> or <code>'tel'</code>.\n   * @param {string} value - validation value, i.e. <code>'alice@example.com'</code>.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCredential(method, value) {\n    const pkt = this.#initPacket('del', Const.TOPIC_ME);\n    pkt.del.what = 'cred';\n    pkt.del.cred = {\n      meth: method,\n      val: value\n    };\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Request to delete account of the current user.\n   *\n   * @param {boolean} hard - hard-delete user.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCurrentUser(hard) {\n    const pkt = this.#initPacket('del', null);\n    pkt.del.what = 'user';\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id).then(_ => {\n      this._myUID = null;\n    });\n  }\n\n  /**\n   * Notify server that a message or messages were read or received. Does NOT return promise.\n   *\n   * @param {string} topicName - Name of the topic where the mesage is being aknowledged.\n   * @param {string} what - Action being aknowledged, either <code>\"read\"</code> or <code>\"recv\"</code>.\n   * @param {number} seq - Maximum id of the message being acknowledged.\n   * @throws {Error} if <code>seq</code> is invalid.\n   */\n  note(topicName, what, seq) {\n    if (seq <= 0 || seq >= Const.LOCAL_SEQID) {\n      throw new Error(`Invalid message id ${seq}`);\n    }\n\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.what = what;\n    pkt.note.seq = seq;\n    this.#send(pkt);\n  }\n\n  /**\n   * Broadcast a key-press notification to topic subscribers. Used to show\n   * typing notifications \"user X is typing...\".\n   *\n   * @param {string} topicName - Name of the topic to broadcast to.\n   * @param {string=} type - notification to send, default is 'kp'.\n   */\n  noteKeyPress(topicName, type) {\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.what = type || 'kp';\n    this.#send(pkt);\n  }\n\n  /**\n   * Send a video call notification to topic subscribers (including dialing,\n   * hangup, etc.).\n   *\n   * @param {string} topicName - Name of the topic to broadcast to.\n   * @param {int} seq - ID of the call message the event pertains to.\n   * @param {string} evt - Call event.\n   * @param {string} payload - Payload associated with this event (e.g. SDP string).\n   *\n   * @returns {Promise} Promise (for some call events) which will\n   *                    be resolved/rejected on receiving server reply\n   */\n  videoCall(topicName, seq, evt, payload) {\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.seq = seq;\n    pkt.note.what = 'call';\n    pkt.note.event = evt;\n    pkt.note.payload = payload;\n    this.#send(pkt, pkt.note.id);\n  }\n\n  /**\n   * Get a named topic, either pull it from cache or create a new instance.\n   * There is a single instance of topic for each name.\n   *\n   * @param {string} topicName - Name of the topic to get.\n   *\n   * @returns {Topic} Requested or newly created topic or <code>undefined</code> if topic name is invalid.\n   */\n  getTopic(topicName) {\n    let topic = this.#cacheGet('topic', topicName);\n    if (!topic && topicName) {\n      if (topicName == Const.TOPIC_ME) {\n        topic = new TopicMe();\n      } else if (topicName == Const.TOPIC_FND) {\n        topic = new TopicFnd();\n      } else {\n        topic = new Topic(topicName);\n      }\n      // Cache management.\n      this.#attachCacheToTopic(topic);\n      topic._cachePutSelf();\n      // Don't save to DB here: a record will be added when the topic is subscribed.\n    }\n    return topic;\n  }\n\n  /**\n   * Get a named topic from cache.\n   *\n   * @param {string} topicName - Name of the topic to get.\n   *\n   * @returns {Topic} Requested topic or <code>undefined</code> if topic is not found in cache.\n   */\n  cacheGetTopic(topicName) {\n    return this.#cacheGet('topic', topicName);\n  }\n\n  /**\n   * Remove named topic from cache.\n   *\n   * @param {string} topicName - Name of the topic to remove from cache.\n   */\n  cacheRemTopic(topicName) {\n    this.#cacheDel('topic', topicName);\n  }\n\n  /**\n   * Iterate over cached topics.\n   *\n   * @param {Function} func - callback to call for each topic.\n   * @param {Object} context - 'this' inside the 'func'.\n   */\n  mapTopics(func, context) {\n    this.#cacheMap('topic', func, context);\n  }\n\n  /**\n   * Check if named topic is already present in cache.\n   *\n   * @param {string} topicName - Name of the topic to check.\n   * @returns {boolean} true if topic is found in cache, false otherwise.\n   */\n  isTopicCached(topicName) {\n    return !!this.#cacheGet('topic', topicName);\n  }\n\n  /**\n   * Generate unique name like <code>'new123456'</code> suitable for creating a new group topic.\n   *\n   * @param {boolean} isChan - if the topic is channel-enabled.\n   * @returns {string} name which can be used for creating a new group topic.\n   */\n  newGroupTopicName(isChan) {\n    return (isChan ? Const.TOPIC_NEW_CHAN : Const.TOPIC_NEW) + this.getNextUniqueId();\n  }\n\n  /**\n   * Instantiate <code>'me'</code> topic or get it from cache.\n   *\n   * @returns {TopicMe} Instance of <code>'me'</code> topic.\n   */\n  getMeTopic() {\n    return this.getTopic(Const.TOPIC_ME);\n  }\n\n  /**\n   * Instantiate <code>'fnd'</code> (find) topic or get it from cache.\n   *\n   * @returns {Topic} Instance of <code>'fnd'</code> topic.\n   */\n  getFndTopic() {\n    return this.getTopic(Const.TOPIC_FND);\n  }\n\n  /**\n   * Create a new {@link LargeFileHelper} instance\n   *\n   * @returns {LargeFileHelper} instance of a {@link Tinode.LargeFileHelper}.\n   */\n  getLargeFileHelper() {\n    return new LargeFileHelper(this, Const.PROTOCOL_VERSION);\n  }\n\n  /**\n   * Get the UID of the the current authenticated user.\n   *\n   * @returns {string} UID of the current user or <code>undefined</code> if the session is not yet\n   * authenticated or if there is no session.\n   */\n  getCurrentUserID() {\n    return this._myUID;\n  }\n\n  /**\n   * Check if the given user ID is equal to the current user's UID.\n   *\n   * @param {string} uid - UID to check.\n   *\n   * @returns {boolean} true if the given UID belongs to the current logged in user.\n   */\n  isMe(uid) {\n    return this._myUID === uid;\n  }\n\n  /**\n   * Get login used for last successful authentication.\n   *\n   * @returns {string} login last used successfully or <code>undefined</code>.\n   */\n  getCurrentLogin() {\n    return this._login;\n  }\n\n  /**\n   * Return information about the server: protocol version and build timestamp.\n   *\n   * @returns {Object} build and version of the server or <code>null</code> if there is no connection or\n   * if the first server response has not been received yet.\n   */\n  getServerInfo() {\n    return this._serverInfo;\n  }\n\n  /**\n   * Report a topic for abuse. Wrapper for {@link Tinode#publish}.\n   *\n   * @param {string} action - the only supported action is 'report'.\n   * @param {string} target - name of the topic being reported.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  report(action, target) {\n    return this.publish(Const.TOPIC_SYS, Drafty.attachJSON(null, {\n      'action': action,\n      'target': target\n    }));\n  }\n\n  /**\n   * Return server-provided configuration value.\n   *\n   * @param {string} name of the value to return.\n   * @param {Object} defaultValue to return in case the parameter is not set or not found.\n   *\n   * @returns {Object} named value.\n   */\n  getServerParam(name, defaultValue) {\n    return this._serverInfo && this._serverInfo[name] || defaultValue;\n  }\n\n  /**\n   * Toggle console logging. Logging is off by default.\n   *\n   * @param {boolean} enabled - Set to <code>true</code> to enable logging to console.\n   * @param {boolean} trimLongStrings - Set to <code>true</code> to trim long strings.\n   */\n  enableLogging(enabled, trimLongStrings) {\n    this._loggingEnabled = enabled;\n    this._trimLongStrings = enabled && trimLongStrings;\n  }\n\n  /**\n   * Set UI language to report to the server. Must be called before <code>'hi'</code> is sent, otherwise it will not be used.\n   *\n   * @param {string} hl - human (UI) language, like <code>\"en_US\"</code> or <code>\"zh-Hans\"</code>.\n   */\n  setHumanLanguage(hl) {\n    if (hl) {\n      this._humanLanguage = hl;\n    }\n  }\n\n  /**\n   * Check if given topic is online.\n   *\n   * @param {string} name of the topic to test.\n   * @returns {boolean} true if topic is online, false otherwise.\n   */\n  isTopicOnline(name) {\n    const topic = this.#cacheGet('topic', name);\n    return topic && topic.online;\n  }\n\n  /**\n   * Get access mode for the given contact.\n   *\n   * @param {string} name of the topic to query.\n   * @returns {AccessMode} access mode if topic is found, null otherwise.\n   */\n  getTopicAccessMode(name) {\n    const topic = this.#cacheGet('topic', name);\n    return topic ? topic.acs : null;\n  }\n\n  /**\n   * Include message ID into all subsequest messages to server instructin it to send aknowledgemens.\n   * Required for promises to function. Default is <code>\"on\"</code>.\n   *\n   * @param {boolean} status - Turn aknowledgemens on or off.\n   * @deprecated\n   */\n  wantAkn(status) {\n    if (status) {\n      this._messageId = Math.floor((Math.random() * 0xFFFFFF) + 0xFFFFFF);\n    } else {\n      this._messageId = 0;\n    }\n  }\n\n  // Callbacks:\n  /**\n   * Callback to report when the websocket is opened. The callback has no parameters.\n   *\n   * @type {onWebsocketOpen}\n   */\n  onWebsocketOpen = undefined;\n\n  /**\n   * @typedef ServerParams\n   *\n   * @type {Object}\n   * @property {string} ver - Server version\n   * @property {string} build - Server build\n   * @property {string=} sid - Session ID, long polling connections only.\n   */\n\n  /**\n   * @callback onConnect\n   * @param {number} code - Result code\n   * @param {string} text - Text epxplaining the completion, i.e \"OK\" or an error message.\n   * @param {ServerParams} params - Parameters returned by the server.\n   */\n  /**\n   * Callback to report when connection with Tinode server is established.\n   * @type {onConnect}\n   */\n  onConnect = undefined;\n\n  /**\n   * Callback to report when connection is lost. The callback has no parameters.\n   * @type {onDisconnect}\n   */\n  onDisconnect = undefined;\n\n  /**\n   * @callback onLogin\n   * @param {number} code - NUmeric completion code, same as HTTP status codes.\n   * @param {string} text - Explanation of the completion code.\n   */\n  /**\n   * Callback to report login completion.\n   * @type {onLogin}\n   */\n  onLogin = undefined;\n\n  /**\n   * Callback to receive <code>{ctrl}</code> (control) messages.\n   * @type {onCtrlMessage}\n   */\n  onCtrlMessage = undefined;\n\n  /**\n   * Callback to recieve <code>{data}</code> (content) messages.\n   * @type {onDataMessage}\n   */\n  onDataMessage = undefined;\n\n  /**\n   * Callback to receive <code>{pres}</code> (presence) messages.\n   * @type {onPresMessage}\n   */\n  onPresMessage = undefined;\n\n  /**\n   * Callback to receive all messages as objects.\n   * @type {onMessage}\n   */\n  onMessage = undefined;\n\n  /**\n   * Callback to receive all messages as unparsed text.\n   * @type {onRawMessage}\n   */\n  onRawMessage = undefined;\n\n  /**\n   * Callback to receive server responses to network probes. See {@link Tinode#networkProbe}\n   * @type {onNetworkProbe}\n   */\n  onNetworkProbe = undefined;\n\n  /**\n   * Callback to be notified when exponential backoff is iterating.\n   * @type {onAutoreconnectIteration}\n   */\n  onAutoreconnectIteration = undefined;\n};\n\n// Exported constants\nTinode.MESSAGE_STATUS_NONE = Const.MESSAGE_STATUS_NONE;\nTinode.MESSAGE_STATUS_QUEUED = Const.MESSAGE_STATUS_QUEUED;\nTinode.MESSAGE_STATUS_SENDING = Const.MESSAGE_STATUS_SENDING;\nTinode.MESSAGE_STATUS_FAILED = Const.MESSAGE_STATUS_FAILED;\nTinode.MESSAGE_STATUS_FATAL = Const.MESSAGE_STATUS_FATAL;\nTinode.MESSAGE_STATUS_SENT = Const.MESSAGE_STATUS_SENT;\nTinode.MESSAGE_STATUS_RECEIVED = Const.MESSAGE_STATUS_RECEIVED;\nTinode.MESSAGE_STATUS_READ = Const.MESSAGE_STATUS_READ;\nTinode.MESSAGE_STATUS_TO_ME = Const.MESSAGE_STATUS_TO_ME;\n\n// Unicode [del] symbol.\nTinode.DEL_CHAR = Const.DEL_CHAR;\n\n// Names of keys to server-provided configuration limits.\nTinode.MAX_MESSAGE_SIZE = 'maxMessageSize';\nTinode.MAX_SUBSCRIBER_COUNT = 'maxSubscriberCount';\nTinode.MIN_TAG_LENGTH = 'minTagLength';\nTinode.MAX_TAG_LENGTH = 'maxTagLength';\nTinode.MAX_TAG_COUNT = 'maxTagCount';\nTinode.MAX_FILE_UPLOAD_SIZE = 'maxFileUploadSize';\nTinode.REQ_CRED_VALIDATORS = 'reqCred';\nTinode.MSG_DELETE_AGE = 'msgDelAge';\n\n// Tinode URI topic ID prefix, 'scheme:path/'.\nTinode.URI_TOPIC_ID_PREFIX = 'tinode:topic/';\n\n// Tag prefixes for alias, email, phone.\nTinode.TAG_ALIAS = Const.TAG_ALIAS;\nTinode.TAG_EMAIL = Const.TAG_EMAIL;\nTinode.TAG_PHONE = Const.TAG_PHONE;\n","/**\n * @file Helper class for constructing {@link Tinode.GetQuery}.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nimport {\n  listToRanges,\n  normalizeRanges\n} from './utils';\n\n/**\n * Helper class for constructing {@link Tinode.GetQuery}.\n *\n * @class MetaGetBuilder\n * @memberof Tinode\n *\n * @param {Tinode.Topic} parent topic which instantiated this builder.\n */\nexport default class MetaGetBuilder {\n  constructor(parent) {\n    this.topic = parent;\n    this.what = {};\n  }\n\n  // Get timestamp of the most recent desc update.\n  #get_desc_ims() {\n    return this.topic._deleted ? undefined : this.topic.updated;\n  }\n\n  // Get timestamp of the most recent subs update.\n  #get_subs_ims() {\n    if (this.topic.isP2PType()) {\n      return this.#get_desc_ims();\n    }\n    return this.topic._deleted ? undefined : this.topic._lastSubsUpdate;\n  }\n  /**\n   * Add query parameters to fetch messages within explicit limits.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} since - messages newer than this (inclusive);\n   * @param {number=} before - older than this (exclusive)\n   * @param {number=} limit - number of messages to fetch\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withData(since, before, limit) {\n    this.what['data'] = {\n      since: since,\n      before: before,\n      limit: limit\n    };\n    return this;\n  }\n  /**\n   * Add query parameters to fetch messages newer than the latest saved message.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - number of messages to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterData(limit) {\n    return this.withData(this.topic._maxSeq > 0 ? this.topic._maxSeq + 1 : undefined, undefined, limit);\n  }\n  /**\n   * Add query parameters to fetch messages within ID ranges.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Array.<SeqRange>} ranges - ranges of seq IDs to fetch.\n   * @param {number=} limit - maximum number of messages to fetch.\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDataRanges(ranges, limit) {\n    this.what['data'] = {\n      ranges: normalizeRanges(ranges, this.topic._maxSeq),\n      limit: limit\n    };\n    return this;\n  }\n  /**\n   * Add query parameters to fetch messages by an array of IDs.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number[]} list - array of seq IDs to fetch.\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDataList(list) {\n    return this.withDataRanges(listToRanges(list));\n  }\n  /**\n   * Add query parameters to fetch messages older than the earliest saved message.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - maximum number of messages to fetch.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withEarlierData(limit) {\n    return this.withData(undefined, this.topic._minSeq > 0 ? this.topic._minSeq : undefined, limit);\n  }\n  /**\n   * Add query parameters to fetch topic description if it's newer than the given timestamp.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch messages newer than this timestamp.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDesc(ims) {\n    this.what['desc'] = {\n      ims: ims\n    };\n    return this;\n  }\n  /**\n   * Add query parameters to fetch topic description if it's newer than the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterDesc() {\n    return this.withDesc(this.#get_desc_ims());\n  }\n  /**\n   * Add query parameters to fetch subscriptions.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch subscriptions modified more recently than this timestamp\n   * @param {number=} limit - maximum number of subscriptions to fetch.\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withSub(ims, limit, userOrTopic) {\n    const opts = {\n      ims: ims,\n      limit: limit\n    };\n    if (this.topic.getType() == 'me') {\n      opts.topic = userOrTopic;\n    } else {\n      opts.user = userOrTopic;\n    }\n    this.what['sub'] = opts;\n    return this;\n  }\n  /**\n   * Add query parameters to fetch a single subscription.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch subscriptions modified more recently than this timestamp\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withOneSub(ims, userOrTopic) {\n    return this.withSub(ims, undefined, userOrTopic);\n  }\n  /**\n   * Add query parameters to fetch a single subscription if it's been updated since the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterOneSub(userOrTopic) {\n    return this.withOneSub(this.topic._lastSubsUpdate, userOrTopic);\n  }\n  /**\n   * Add query parameters to fetch subscriptions updated since the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - maximum number of subscriptions to fetch.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterSub(limit) {\n    return this.withSub(this.#get_subs_ims(), limit);\n  }\n  /**\n   * Add query parameters to fetch topic tags.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withTags() {\n    this.what['tags'] = true;\n    return this;\n  }\n  /**\n   * Add query parameters to fetch user's credentials. <code>'me'</code> topic only.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withCred() {\n    if (this.topic.getType() == 'me') {\n      this.what['cred'] = true;\n    } else {\n      this.topic._tinode.logger(\"ERROR: Invalid topic type for MetaGetBuilder:withCreds\", this.topic.getType());\n    }\n    return this;\n  }\n  /**\n   * Add query parameters to fetch topic tags.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withAux() {\n    this.what['aux'] = true;\n    return this;\n  }\n  /**\n   * Add query parameters to fetch deleted messages within explicit limits. Any/all parameters can be null.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} since - ids of messages deleted since this 'del' id (inclusive)\n   * @param {number=} limit - number of deleted message ids to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDel(since, limit) {\n    if (since || limit) {\n      this.what['del'] = {\n        since: since,\n        limit: limit\n      };\n    }\n    return this;\n  }\n  /**\n   * Add query parameters to fetch messages deleted after the saved <code>'del'</code> id.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - number of deleted message ids to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterDel(limit) {\n    // Specify 'since' only if we have already received some messages. If\n    // we have no locally cached messages then we don't care if any messages were deleted.\n    return this.withDel(this.topic._maxSeq > 0 ? this.topic._maxDel + 1 : undefined, limit);\n  }\n\n  /**\n   * Extract subquery: get an object that contains specified subquery.\n   * @memberof Tinode.MetaGetBuilder#\n   * @param {string} what - subquery to return: one of 'data', 'sub', 'desc', 'tags', 'cred', 'del'.\n   * @returns {Object} requested subquery or <code>undefined</code>.\n   */\n  extract(what) {\n    return this.what[what];\n  }\n\n  /**\n   * Construct parameters.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.GetQuery} Get query\n   */\n  build() {\n    const what = [];\n    let params = {};\n    ['data', 'sub', 'desc', 'tags', 'cred', 'aux', 'del'].forEach((key) => {\n      if (this.what.hasOwnProperty(key)) {\n        what.push(key);\n        if (Object.getOwnPropertyNames(this.what[key]).length > 0) {\n          params[key] = this.what[key];\n        }\n      }\n    });\n    if (what.length > 0) {\n      params.what = what.join(' ');\n    } else {\n      params = undefined;\n    }\n    return params;\n  }\n}\n","/**\n * @file In-memory sorted cache of objects.\n *\n * @copyright 2015-2025 Tinode LLC.\n */\n'use strict';\n\n/**\n * In-memory sorted cache of objects.\n *\n * @class CBuffer\n * @memberof Tinode\n * @protected\n *\n * @param {function} compare custom comparator of objects. Takes two parameters <code>a</code> and <code>b</code>;\n *    returns <code>-1</code> if <code>a < b</code>, <code>0</code> if <code>a == b</code>, <code>1</code> otherwise.\n * @param {boolean} unique enforce element uniqueness: when <code>true</code> replace existing element with a new\n *    one on conflict; when <code>false</code> keep both elements.\n */\nexport default class CBuffer {\n  #comparator = undefined;\n  #unique = false;\n  buffer = [];\n\n  constructor(compare_, unique_) {\n    this.#comparator = compare_ || ((a, b) => {\n      return a === b ? 0 : a < b ? -1 : 1;\n    });\n    this.#unique = unique_;\n  }\n\n  #findNearest(elem, arr, exact) {\n    let start = 0;\n    let end = arr.length - 1;\n    let pivot = 0;\n    let diff = 0;\n    let found = false;\n\n    while (start <= end) {\n      pivot = (start + end) / 2 | 0;\n      diff = this.#comparator(arr[pivot], elem);\n      if (diff < 0) {\n        start = pivot + 1;\n      } else if (diff > 0) {\n        end = pivot - 1;\n      } else {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      return {\n        idx: pivot,\n        exact: true\n      };\n    }\n    if (exact) {\n      return {\n        idx: -1\n      };\n    }\n    // Not exact - insertion point\n    return {\n      idx: diff < 0 ? pivot + 1 : pivot\n    };\n  }\n\n  // Insert element into a sorted array.\n  #insertSorted(elem, arr) {\n    const found = this.#findNearest(elem, arr, false);\n    const count = (found.exact && this.#unique) ? 1 : 0;\n    arr.splice(found.idx, count, elem);\n    return arr;\n  }\n\n  /**\n   * Get an element at the given position.\n   * @memberof Tinode.CBuffer#\n   * @param {number} at - Position to fetch from.\n   * @returns {Object} Element at the given position or <code>undefined</code>.\n   */\n  getAt(at) {\n    return this.buffer[at];\n  }\n\n  /**\n   * Convenience method for getting the last element from the buffer.\n   * @memberof Tinode.CBuffer#\n   * @param {function} filter - optional filter to apply to elements. If filter is provided, the search\n   *   for the last element starts from the end of the buffer and goes backwards until the filter returns true.\n   * @returns {Object} The last element in the buffer or <code>undefined</code> if buffer is empty.\n   */\n  getLast(filter) {\n    return filter ?\n      this.buffer.findLast(filter) :\n      this.buffer[this.buffer.length - 1];\n  }\n\n  /**\n   * Insert new element(s) to the buffer at the correct position according to the sort method.\n   * Variadic: takes one or more arguments. If an array is passed as a single argument, its\n   * elements are inserted individually.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {...Object|Array} - One or more objects to insert.\n   */\n  put() {\n    let insert;\n    // inspect arguments: if array, insert its elements, if one or more non-array arguments, insert them one by one\n    if (arguments.length == 1 && Array.isArray(arguments[0])) {\n      insert = arguments[0];\n    } else {\n      insert = arguments;\n    }\n    for (let idx in insert) {\n      this.#insertSorted(insert[idx], this.buffer);\n    }\n  }\n\n  /**\n   * Remove element at the given position.\n   * @memberof Tinode.CBuffer#\n   * @param {number} at - Position to delete at.\n   * @returns {Object} Element at the given position or <code>undefined</code>.\n   */\n  delAt(at) {\n    at |= 0;\n    let r = this.buffer.splice(at, 1);\n    if (r && r.length > 0) {\n      return r[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove elements between two positions.\n   * @memberof Tinode.CBuffer#\n   * @param {number} since - Position to delete from (inclusive).\n   * @param {number} before - Position to delete to (exclusive).\n   *\n   * @returns {Array} array of removed elements (could be zero length).\n   */\n  delRange(since, before) {\n    return this.buffer.splice(since, before - since);\n  }\n\n  /**\n   * Return the number of elements the buffer holds.\n   * @memberof Tinode.CBuffer#\n   * @return {number} Number of elements in the buffer.\n   */\n  length() {\n    return this.buffer.length;\n  }\n\n  /**\n   * Reset the buffer discarding all elements\n   * @memberof Tinode.CBuffer#\n   */\n  reset() {\n    this.buffer = [];\n  }\n\n  /**\n   * Callback for iterating contents of buffer. See {@link Tinode.CBuffer#forEach}.\n   * @callback ForEachCallbackType\n   * @memberof Tinode.CBuffer#\n   * @param {Object} elem - Current element of the buffer.\n   * @param {Object} prev - Previous element of the buffer.\n   * @param {Object} next - Next element of the buffer.\n   * @param {number} index - Index of the current element.\n   */\n\n  /**\n   * Apply given <code>callback</code> to all elements of the buffer.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Tinode.ForEachCallbackType} callback - Function to call for each element.\n   * @param {number} startIdx - Optional index to start iterating from (inclusive), default: 0.\n   * @param {number} beforeIdx - Optional index to stop iterating before (exclusive), default: length of the buffer.\n   * @param {Object} context - calling context (i.e. value of <code>this</code> in callback)\n   */\n  forEach(callback, startIdx, beforeIdx, context) {\n    startIdx = Math.max(0, startIdx | 0);\n    beforeIdx = Math.min(beforeIdx || this.buffer.length, this.buffer.length);\n\n    for (let i = startIdx; i < beforeIdx; i++) {\n      callback.call(context, this.buffer[i],\n        (i > startIdx ? this.buffer[i - 1] : undefined),\n        (i < beforeIdx - 1 ? this.buffer[i + 1] : undefined), i);\n    }\n  }\n\n  /**\n   * Find element in buffer using buffer's comparison function.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Object} elem - element to find.\n   * @param {boolean=} nearest - when true and exact match is not found, return the nearest element (insertion point).\n   * @returns {number} index of the element in the buffer or -1.\n   */\n  find(elem, nearest) {\n    const {\n      idx\n    } = this.#findNearest(elem, this.buffer, !nearest);\n    return idx;\n  }\n\n  /**\n   * Callback for filtering the buffer. See {@link Tinode.CBuffer#filter}.\n   * @callback FilterCallbackType\n   * @memberof Tinode.CBuffer#\n   * @param {Object} elem - Current element of the buffer.\n   * @param {number} index - Index of the current element.\n   * @returns {boolen} <code>true</code> to keep the element, <code>false</code> to remove.\n   */\n\n  /**\n   * Remove all elements that do not pass the test implemented by the provided callback function.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Tinode.FilterCallbackType} callback - Function to call for each element.\n   * @param {Object} context - calling context (i.e. value of <code>this</code> in the callback)\n   */\n  filter(callback, context) {\n    let count = 0;\n    for (let i = 0; i < this.buffer.length; i++) {\n      if (callback.call(context, this.buffer[i], i)) {\n        this.buffer[count] = this.buffer[i];\n        count++;\n      }\n    }\n\n    this.buffer.splice(count);\n  }\n\n  /**\n   * Check if buffer is empty.\n   * @returns {boolean} <code>true</code> if the buffer is empty, <code>false</code> otherwise.\n   */\n  isEmpty() {\n    return this.buffer.length == 0;\n  }\n}\n","/**\n * @file Topic management.\n *\n * @copyright 2015-2025 Tinode LLC.\n */\n'use strict';\n\nimport AccessMode from './access-mode.js';\nimport CBuffer from './cbuffer.js';\nimport CommError from './comm-error.js';\nimport * as Const from './config.js';\nimport Drafty from './drafty.js';\nimport MetaGetBuilder from './meta-builder.js';\nimport {\n  listToRanges,\n  mergeObj,\n  mergeToCache,\n  normalizeArray,\n  normalizeRanges\n} from './utils.js';\n\n/**\n * Topic is a class representing a logical communication channel.\n */\nexport default class Topic {\n  /**\n   * @callback onData\n   * @param {Data} data - Data packet\n   */\n\n  /**\n   * Create topic.\n   * @param {string} name - Name of the topic to create.\n   * @param {Object=} callbacks - Object with various event callbacks.\n   * @param {onData} callbacks.onData - Callback which receives a <code>{data}</code> message.\n   * @param {callback} callbacks.onMeta - Callback which receives a <code>{meta}</code> message.\n   * @param {callback} callbacks.onPres - Callback which receives a <code>{pres}</code> message.\n   * @param {callback} callbacks.onInfo - Callback which receives an <code>{info}</code> message.\n   * @param {callback} callbacks.onMetaDesc - Callback which receives changes to topic desctioption {@link desc}.\n   * @param {callback} callbacks.onMetaSub - Called for a single subscription record change.\n   * @param {callback} callbacks.onSubsUpdated - Called after a batch of subscription changes have been recieved and cached.\n   * @param {callback} callbacks.onDeleteTopic - Called after the topic is deleted.\n   * @param {callback} callbacls.onAllMessagesReceived - Called when all requested <code>{data}</code> messages have been recived.\n   */\n  constructor(name, callbacks) {\n    // Parent Tinode object.\n    this._tinode = null;\n\n    // Server-provided data, locally immutable.\n    // topic name\n    this.name = name;\n    // Timestamp when the topic was created.\n    this.created = null;\n    // Timestamp when the topic was last updated.\n    this.updated = null;\n    // Timestamp of the last messages\n    this.touched = new Date(0);\n    // Access mode, see AccessMode\n    this.acs = new AccessMode(null);\n    // Per-topic private data (accessible by current user only).\n    this.private = null;\n    // Per-topic public data (accessible by all users).\n    this.public = null;\n    // Per-topic system-provided data (accessible by all users).\n    this.trusted = null;\n\n    // Locally cached data\n    // Subscribed users, for tracking read/recv/msg notifications.\n    this._users = {};\n\n    // Current value of locally issued seqId, used for pending messages.\n    this._queuedSeqId = Const.LOCAL_SEQID;\n\n    // The maximum known {data.seq} value.\n    this._maxSeq = 0;\n    // The minimum known {data.seq} value.\n    this._minSeq = 0;\n    // Indicator that the last request for earlier messages returned 0.\n    this._noEarlierMsgs = false;\n    // The maximum known deletion ID.\n    this._maxDel = 0;\n    // Timer object used to send 'recv' notifications.\n    this._recvNotificationTimer = null;\n\n    // User discovery tags\n    this._tags = [];\n    // Credentials such as email or phone number.\n    this._credentials = [];\n    // Auxiliary data\n    this._aux = {};\n\n    // Message versions cache (e.g. for edited messages).\n    // Keys: original message seq ID.\n    // Values: CBuffers containing newer versions of the original message\n    // ordered by seq id.\n    this._messageVersions = {};\n    // Message cache, sorted by message seq values, from old to new.\n    this._messages = new CBuffer((a, b) => {\n      return a.seq - b.seq;\n    }, true);\n    // Boolean, true if the topic is currently live\n    this._attached = false;\n    // Timestap of the most recently updated subscription.\n    this._lastSubsUpdate = new Date(0);\n    // Topic created but not yet synced with the server. Used only during initialization.\n    this._new = true;\n    // The topic is deleted at the server, this is a local copy.\n    this._deleted = false;\n\n    // Timer used to trgger {leave} request after a delay.\n    this._delayedLeaveTimer = null;\n\n    // Callbacks\n    if (callbacks) {\n      this.onData = callbacks.onData;\n      this.onMeta = callbacks.onMeta;\n      this.onPres = callbacks.onPres;\n      this.onInfo = callbacks.onInfo;\n      // A single desc update;\n      this.onMetaDesc = callbacks.onMetaDesc;\n      // A single subscription record;\n      this.onMetaSub = callbacks.onMetaSub;\n      // All subscription records received;\n      this.onSubsUpdated = callbacks.onSubsUpdated;\n      this.onTagsUpdated = callbacks.onTagsUpdated;\n      this.onCredsUpdated = callbacks.onCredsUpdated;\n      this.onAuxUpdated = callbacks.onAuxUpdated;\n      this.onDeleteTopic = callbacks.onDeleteTopic;\n      this.onAllMessagesReceived = callbacks.onAllMessagesReceived;\n    }\n  }\n\n  // Static methods.\n\n  /**\n   * Determine topic type from topic's name: grp, p2p, me, fnd, sys.\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {string} One of <code>\"me\"</code>, <code>\"fnd\"</code>, <code>\"sys\"</code>, <code>\"grp\"</code>,\n   *    <code>\"p2p\"</code> or <code>undefined</code>.\n   */\n  static topicType(name) {\n    const types = {\n      'me': Const.TOPIC_ME,\n      'fnd': Const.TOPIC_FND,\n      'grp': Const.TOPIC_GRP,\n      'new': Const.TOPIC_GRP,\n      'nch': Const.TOPIC_GRP,\n      'chn': Const.TOPIC_GRP,\n      'usr': Const.TOPIC_P2P,\n      'sys': Const.TOPIC_SYS,\n      'slf': Const.TOPIC_SLF\n    };\n    return types[(typeof name == 'string') ? name.substring(0, 3) : 'xxx'];\n  }\n\n  /**\n   * Check if the given topic name is a name of a 'me' topic.\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'me' topic, <code>false</code> otherwise.\n   */\n  static isMeTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_ME;\n  }\n\n  /**\n   * Check if the given topic name is a name of a 'slf' topic.\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'slf' topic, <code>false</code> otherwise.\n   */\n  static isSelfTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_SLF;\n  }\n\n  /**\n   * Check if the given topic name is a name of a group topic.\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a group topic, <code>false</code> otherwise.\n   */\n  static isGroupTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_GRP;\n  }\n\n  /**\n   * Check if the given topic name is a name of a p2p topic.\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p topic, <code>false</code> otherwise.\n   */\n  static isP2PTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_P2P;\n  }\n\n  /**\n   * Check if the given topic name is a name of a communication topic, i.e. P2P or group.\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p or group topic, <code>false</code> otherwise.\n   */\n  static isCommTopicName(name) {\n    return Topic.isP2PTopicName(name) || Topic.isGroupTopicName(name) || Topic.isSelfTopicName(name);\n  }\n\n  /**\n   * Check if the topic name is a name of a new topic.\n   * @static\n   *\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a new topic, <code>false</code> otherwise.\n   */\n  static isNewGroupTopicName(name) {\n    return (typeof name == 'string') &&\n      (name.substring(0, 3) == Const.TOPIC_NEW || name.substring(0, 3) == Const.TOPIC_NEW_CHAN);\n  }\n\n  /**\n   * Check if the topic name is a name of a channel.\n   * @static\n   *\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a channel, <code>false</code> otherwise.\n   */\n  static isChannelTopicName(name) {\n    return (typeof name == 'string') &&\n      (name.substring(0, 3) == Const.TOPIC_CHAN || name.substring(0, 3) == Const.TOPIC_NEW_CHAN);\n  }\n\n  // Returns true if pub is meant to replace another message (e.g. original message was edited).\n  static #isReplacementMsg(pub) {\n    return pub.head && pub.head.replace;\n  }\n\n  /**\n   * Check if the topic is subscribed.\n   * @returns {boolean} True is topic is attached/subscribed, false otherwise.\n   */\n  isSubscribed() {\n    return this._attached;\n  }\n\n  /**\n   * Request topic to subscribe. Wrapper for {@link Tinode#subscribe}.\n   *\n   * @param {Tinode.GetQuery=} getParams - get query parameters.\n   * @param {Tinode.SetParams=} setParams - set parameters.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  subscribe(getParams, setParams) {\n    // Clear request to leave topic.\n    clearTimeout(this._delayedLeaveTimer);\n    this._delayedLeaveTimer = null;\n\n    // If the topic is already subscribed, return resolved promise\n    if (this._attached) {\n      return Promise.resolve(this);\n    }\n\n    // Send subscribe message, handle async response.\n    // If topic name is explicitly provided, use it. If no name, then it's a new group topic,\n    // use \"new\".\n    return this._tinode.subscribe(this.name || Const.TOPIC_NEW, getParams, setParams).then(ctrl => {\n      if (ctrl.code >= 300) {\n        // Do nothing if subscription status has not changed.\n        return ctrl;\n      }\n\n      this._attached = true;\n      this._deleted = false;\n      this.acs = (ctrl.params && ctrl.params.acs) ? ctrl.params.acs : this.acs;\n\n      // Set topic name for new topics and add it to cache.\n      if (this._new) {\n        delete this._new;\n\n        if (this.name != ctrl.topic) {\n          // Name may change new123456 -> grpAbCdEf. Remove from cache under the old name.\n          this._cacheDelSelf();\n          this.name = ctrl.topic;\n        }\n        this._cachePutSelf();\n\n        this.created = ctrl.ts;\n        this.updated = ctrl.ts;\n\n        if (this.name != Const.TOPIC_ME && this.name != Const.TOPIC_FND) {\n          // Add the new topic to the list of contacts maintained by the 'me' topic.\n          const me = this._tinode.getMeTopic();\n          if (me.onMetaSub) {\n            me.onMetaSub(this);\n          }\n          if (me.onSubsUpdated) {\n            me.onSubsUpdated([this.name], 1);\n          }\n        }\n\n        if (setParams && setParams.desc) {\n          setParams.desc._noForwarding = true;\n          this._processMetaDesc(setParams.desc);\n        }\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * Create a draft of a message without sending it to the server.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string | Object} data - Content to wrap in a draft.\n   * @param {boolean=} noEcho - If <code>true</code> server will not echo message back to originating\n   * session. Otherwise the server will send a copy of the message to sender.\n   *\n   * @returns {Object} message draft.\n   */\n  createMessage(data, noEcho) {\n    return this._tinode.createMessage(this.name, data, noEcho);\n  }\n\n  /**\n   * Immediately publish data to topic. Wrapper for {@link Tinode#publish}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string | Object} data - Message to publish, either plain string or a Drafty object.\n   * @param {boolean=} noEcho - If <code>true</code> server will not echo message back to originating\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  publish(data, noEcho) {\n    return this.publishMessage(this.createMessage(data, noEcho));\n  }\n\n  /**\n   * Publish message created by {@link Tinode.Topic#createMessage}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub - {data} object to publish. Must be created by {@link Tinode.Topic#createMessage}\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  publishMessage(pub) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot publish on inactive topic\"));\n    }\n    if (this._sending) {\n      return Promise.reject(new Error(\"The message is already being sent\"));\n    }\n\n    // Send data.\n    pub._sending = true;\n    pub._failed = false;\n\n    // Extract refereces to attachments and out of band image records.\n    let attachments = null;\n    if (Drafty.hasEntities(pub.content)) {\n      attachments = [];\n      Drafty.entities(pub.content, data => {\n        if (data) {\n          if (data.ref) {\n            attachments.push(data.ref);\n          }\n          if (data.preref) {\n            attachments.push(data.preref);\n          }\n        }\n      });\n      if (attachments.length == 0) {\n        attachments = null;\n      }\n    }\n\n    return this._tinode.publishMessage(pub, attachments).then(ctrl => {\n      pub._sending = false;\n      pub.ts = ctrl.ts;\n      this.swapMessageId(pub, ctrl.params.seq);\n      this._maybeUpdateMessageVersionsCache(pub);\n      this._routeData(pub);\n      return ctrl;\n    }).catch(err => {\n      this._tinode.logger(\"WARNING: Message rejected by the server\", err);\n      pub._sending = false;\n      pub._failed = true;\n      if (this.onData) {\n        this.onData();\n      }\n    });\n  }\n\n  /**\n   * Add message to local message cache, send to the server when the promise is resolved.\n   * If promise is null or undefined, the message will be sent immediately.\n   * The message is sent when the\n   * The message should be created by {@link Tinode.Topic#createMessage}.\n   * This is probably not the final API.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub - Message to use as a draft.\n   * @param {Promise} prom - Message will be sent when this promise is resolved, discarded if rejected.\n   *\n   * @returns {Promise} derived promise.\n   */\n  publishDraft(pub, prom) {\n    const seq = pub.seq || this._getQueuedSeqId();\n    if (!pub._noForwarding) {\n      // The 'seq', 'ts', and 'from' are added to mimic {data}. They are removed later\n      // before the message is sent.\n      pub._noForwarding = true;\n      pub.seq = seq;\n      pub.ts = new Date();\n      pub.from = this._tinode.getCurrentUserID();\n\n      // Don't need an echo message because the message is added to local cache right away.\n      pub.noecho = true;\n      // Add to cache.\n      this._messages.put(pub);\n      this._tinode._db.addMessage(pub);\n\n      if (this.onData) {\n        this.onData(pub);\n      }\n    }\n    // If promise is provided, send the queued message when it's resolved.\n    // If no promise is provided, create a resolved one and send immediately.\n    return (prom || Promise.resolve())\n      .then(_ => {\n        if (pub._cancelled) {\n          return {\n            code: 300,\n            text: \"cancelled\"\n          };\n        }\n        return this.publishMessage(pub);\n      }).catch(err => {\n        this._tinode.logger(\"WARNING: Message draft rejected\", err);\n        pub._sending = false;\n        pub._failed = true;\n        pub._fatal = err instanceof CommError ? (err.code >= 400 && err.code < 500) : false;\n        if (this.onData) {\n          this.onData();\n        }\n        // Rethrow to let caller know that the operation failed.\n        throw err;\n      });\n  }\n\n  /**\n   * Leave the topic, optionally unsibscribe. Leaving the topic means the topic will stop\n   * receiving updates from the server. Unsubscribing will terminate user's relationship with the topic.\n   * Wrapper for {@link Tinode#leave}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean=} unsub - If true, unsubscribe, otherwise just leave.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  leave(unsub) {\n    // It's possible to unsubscribe (unsub==true) from inactive topic.\n    if (!this._attached && !unsub) {\n      return Promise.reject(new Error(\"Cannot leave inactive topic\"));\n    }\n\n    // Send a 'leave' message, handle async response\n    return this._tinode.leave(this.name, unsub).then(ctrl => {\n      this._resetSub();\n      if (unsub) {\n        this._gone();\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * Leave the topic, optionally unsibscribe after a delay. Leaving the topic means the topic will stop\n   * receiving updates from the server. Unsubscribing will terminate user's relationship with the topic.\n   * Wrapper for {@link Tinode#leave}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} unsub - If true, unsubscribe, otherwise just leave.\n   * @param {number} delay - time in milliseconds to delay leave request.\n   */\n  leaveDelayed(unsub, delay) {\n    clearTimeout(this._delayedLeaveTimer);\n    this._delayedLeaveTimer = setTimeout(_ => {\n      this._delayedLeaveTimer = null;\n      this.leave(unsub)\n    }, delay);\n  }\n\n  /**\n   * Request topic metadata from the local cache or from the server.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.GetQuery} request parameters\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  getMeta(params) {\n    // Send {get} message, return promise.\n    return this._tinode.getMeta(this.name, params);\n  }\n\n  /**\n   * Request more messages from the server. The goal is to load continous range of messages\n   * covering at least between 'min' and 'max' + one full page forward (newer = true) or backwards\n   * (newer=false).\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} limit number of messages to get.\n   * @param {Array.<Range>} gaps - ranges of messages to load.\n   * @param {number} min if non-negative, request newer messages with seq >= min.\n   * @param {number} max if positive, request older messages with seq < max.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  getMessagesPage(limit, gaps, min, max, newer) {\n    let query = gaps ?\n      this.startMetaQuery().withDataRanges(gaps, limit) :\n      newer ?\n      this.startMetaQuery().withData(min, undefined, limit) :\n      this.startMetaQuery().withData(undefined, max, limit);\n    // First try fetching from DB, then from the server.\n    return this._loadMessages(this._tinode._db, query.extract('data'))\n      .then(count => {\n        // Recalculate missing ranges.\n        gaps = this.msgHasMoreMessages(min, max, newer);\n        if (gaps.length == 0) {\n          // All messages loaded.\n          return Promise.resolve({\n            topic: this.name,\n            code: 200,\n            params: {\n              count: count\n            }\n          });\n        }\n\n        // Reduce the count of requested messages.\n        limit -= count;\n        // Update query with new values loaded from DB.\n        query = this.startMetaQuery().withDataRanges(gaps, limit);\n        return this.getMeta(query.build());\n      });\n  }\n\n  /**\n   * Request to get pinned messages from the local cache or from the server.\n   * @memberof Tinode.Topic#\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  getPinnedMessages() {\n    const pins = this.aux('pins');\n    if (!Array.isArray(pins)) {\n      return Promise.resolve(0);\n    }\n\n    const loaded = [];\n    let remains = pins;\n    // First try fetching from DB, then check deleted log, then ask the server.\n    return this._tinode._db.readMessages(this.name, {\n        ranges: listToRanges(remains)\n      })\n      .then(msgs => {\n        msgs.forEach(data => {\n          // The 'data' could be undefined.\n          if (data) {\n            loaded.push(data.seq);\n            this._messages.put(data);\n            this._maybeUpdateMessageVersionsCache(data);\n          }\n        });\n        if (loaded.length < pins.length) {\n          // Some messages are missing, try dellog.\n          remains = pins.filter(seq => !loaded.includes(seq));\n          return this._tinode._db.readMessages(this.name, {\n            ranges: listToRanges(remains)\n          });\n        }\n        return null;\n      })\n      .then(ranges => {\n        if (ranges) {\n          // Found some deleted ranges in dellog.\n          remains.forEach(seq => {\n            if (ranges.find(r => r.low <= seq && r.hi > seq)) {\n              loaded.push(seq);\n            }\n          });\n        }\n        if (loaded.length == pins.length) {\n          // Got all pinned messages from the local cache.\n          return Promise.resolve({\n            topic: this.name,\n            code: 200,\n            params: {\n              count: loaded.length\n            }\n          });\n        }\n\n        remains = pins.filter(seq => !loaded.includes(seq));\n        return this.getMeta(this.startMetaQuery().withDataList(remains).build());\n      });\n  }\n\n  /**\n   * Update topic metadata.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.SetParams} params parameters to update.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  setMeta(params) {\n    if (params.tags) {\n      params.tags = normalizeArray(params.tags);\n    }\n    // Send Set message, handle async response.\n    return this._tinode.setMeta(this.name, params)\n      .then(ctrl => {\n        if (ctrl && ctrl.code >= 300) {\n          // Not modified\n          return ctrl;\n        }\n\n        if (params.sub) {\n          params.sub.topic = this.name;\n          if (ctrl.params && ctrl.params.acs) {\n            params.sub.acs = ctrl.params.acs;\n            params.sub.updated = ctrl.ts;\n          }\n          if (!params.sub.user) {\n            // This is a subscription update of the current user.\n            // Assign user ID otherwise the update will be ignored by _processMetaSubs.\n            params.sub.user = this._tinode.getCurrentUserID();\n            if (!params.desc) {\n              // Force update to topic's asc.\n              params.desc = {};\n            }\n          }\n          params.sub._noForwarding = true;\n          this._processMetaSubs([params.sub]);\n        }\n\n        if (params.desc) {\n          if (ctrl.params && ctrl.params.acs) {\n            params.desc.acs = ctrl.params.acs;\n            params.desc.updated = ctrl.ts;\n          }\n          this._processMetaDesc(params.desc);\n        }\n\n        if (params.tags) {\n          this._processMetaTags(params.tags);\n        }\n        if (params.cred) {\n          this._processMetaCreds([params.cred], true);\n        }\n        if (params.aux) {\n          this._processMetaAux(params.aux);\n        }\n\n        return ctrl;\n      });\n  }\n  /**\n   * Update access mode of the current user or of another topic subsriber.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - UID of the user to update or null to update current user.\n   * @param {string} update - the update value, full or delta.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  updateMode(uid, update) {\n    const user = uid ? this.subscriber(uid) : null;\n    const am = user ?\n      user.acs.updateGiven(update).getGiven() :\n      this.getAccessMode().updateWant(update).getWant();\n\n    return this.setMeta({\n      sub: {\n        user: uid,\n        mode: am\n      }\n    });\n  }\n  /**\n   * Create new topic subscription. Wrapper for {@link Tinode#setMeta}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - ID of the user to invite\n   * @param {string=} mode - Access mode. <code>null</code> means to use default.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  invite(uid, mode) {\n    return this.setMeta({\n      sub: {\n        user: uid,\n        mode: mode\n      }\n    });\n  }\n  /**\n   * Archive or un-archive the topic. Wrapper for {@link Tinode#setMeta}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} arch - true to archive the topic, false otherwise.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  archive(arch) {\n    if (this.private && (!this.private.arch == !arch)) {\n      return Promise.resolve(arch);\n    }\n    return this.setMeta({\n      desc: {\n        private: {\n          arch: arch ? true : Const.DEL_CHAR\n        }\n      }\n    });\n  }\n  /**\n   * Set message as pinned or unpinned by adding it to aux.pins array. Wrapper for {@link Tinode#setMeta}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - seq ID of the message to pin or un-pin.\n   * @param {boolean} pin - true to pin the message, false to un-pin.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  pinMessage(seq, pin) {\n    let pinned = this.aux('pins');\n    if (!Array.isArray(pinned)) {\n      pinned = [];\n    }\n    let changed = false;\n    if (pin) {\n      if (!pinned.includes(seq)) {\n        changed = true;\n        if (pinned.length == Const.MAX_PINNED_COUNT) {\n          pinned.shift();\n        }\n        pinned.push(seq);\n      }\n    } else {\n      if (pinned.includes(seq)) {\n        changed = true;\n        pinned = pinned.filter(id => id != seq);\n        if (pinned.length == 0) {\n          pinned = Const.DEL_CHAR;\n        }\n      }\n    }\n    if (changed) {\n      return this.setMeta({\n        aux: {\n          pins: pinned\n        }\n      });\n    }\n    return Promise.resolve();\n  }\n  /**\n   * Delete messages. Hard-deleting messages requires Deleter (D) permission.\n   * Wrapper for {@link Tinode#delMessages}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Array.<Tinode.SeqRange>} ranges - Ranges of message IDs to delete.\n   * @param {boolean=} hard - Hard or soft delete\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessages(ranges, hard) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete messages in inactive topic\"));\n    }\n\n    const tosend = normalizeRanges(ranges, this._maxSeq)\n\n    // Send {del} message, return promise\n    let result;\n    if (tosend.length > 0) {\n      result = this._tinode.delMessages(this.name, tosend, hard);\n    } else {\n      result = Promise.resolve({\n        params: {\n          del: 0\n        }\n      });\n    }\n    // Update local cache.\n    return result.then(ctrl => {\n      if (ctrl.params.del > this._maxDel) {\n        this._maxDel = Math.max(ctrl.params.del, this._maxDel);\n        this.clear = Math.max(ctrl.params.del, this.clear);\n      }\n\n      ranges.forEach(rec => {\n        if (rec.hi) {\n          this.flushMessageRange(rec.low, rec.hi);\n        } else {\n          this.flushMessage(rec.low);\n        }\n        this._messages.put({\n          seq: rec.low,\n          low: rec.low,\n          hi: rec.hi,\n          _deleted: true\n        });\n      });\n\n      // Make a record.\n      this._tinode._db.addDelLog(this.name, ctrl.params.del, ranges);\n\n      if (this.onData) {\n        // Calling with no parameters to indicate the messages were deleted.\n        this.onData();\n      }\n      return ctrl;\n    });\n  }\n  /**\n   * Delete all messages. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessagesAll(hardDel) {\n    if (!this._maxSeq || this._maxSeq <= 0) {\n      // There are no messages to delete.\n      return Promise.resolve();\n    }\n    return this.delMessages([{\n      low: 1,\n      hi: this._maxSeq + 1,\n      _all: true\n    }], hardDel);\n  }\n\n  /**\n   * Delete multiple messages defined by their IDs. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Array.<number>} list - list of seq IDs to delete.\n   * @param {boolean=} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessagesList(list, hardDel) {\n    // Send {del} message, return promise\n    return this.delMessages(listToRanges(list), hardDel);\n  }\n\n  /**\n   * Delete original message and edited variants. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - original seq ID of the message to delete.\n   * @param {boolean=} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  delMessagesEdits(seq, hardDel) {\n    const list = [seq];\n    this.messageVersions(seq, msg => list.push(msg.seq));\n    // Send {del} message, return promise\n    return this.delMessagesList(list, hardDel);\n  }\n\n  /**\n   * Delete topic. Requires Owner permission. Wrapper for {@link Tinode#delTopic}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} hard - had-delete topic.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  delTopic(hard) {\n    if (this._deleted) {\n      // The topic is already deleted at the server, just remove from DB.\n      this._gone();\n      return Promise.resolve(null);\n    }\n\n    return this._tinode.delTopic(this.name, hard).then(ctrl => {\n      this._deleted = true;\n      this._resetSub();\n      this._gone();\n      return ctrl;\n    });\n  }\n  /**\n   * Delete subscription. Requires Share permission. Wrapper for {@link Tinode#delSubscription}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} user - ID of the user to remove subscription for.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delSubscription(user) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete subscription in inactive topic\"));\n    }\n    // Send {del} message, return promise\n    return this._tinode.delSubscription(this.name, user).then(ctrl => {\n      // Remove the object from the subscription cache;\n      delete this._users[user];\n      // Notify listeners\n      if (this.onSubsUpdated) {\n        this.onSubsUpdated(Object.keys(this._users));\n      }\n      return ctrl;\n    });\n  }\n  /**\n   * Send a read/recv notification.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} what - what notification to send: <code>recv</code>, <code>read</code>.\n   * @param {number} seq - ID or the message read or received.\n   */\n  note(what, seq) {\n    if (!this._attached) {\n      // Cannot sending {note} on an inactive topic\".\n      return;\n    }\n\n    // Update local cache with the new count.\n    const user = this._users[this._tinode.getCurrentUserID()];\n    let update = false;\n    if (user) {\n      // Self-subscription is found.\n      if (!user[what] || user[what] < seq) {\n        user[what] = seq;\n        update = true;\n      }\n    } else {\n      // Self-subscription is not found.\n      update = (this[what] | 0) < seq;\n    }\n\n    if (update) {\n      // Send notification to the server.\n      this._tinode.note(this.name, what, seq);\n      // Update locally cached contact with the new count.\n      this._updateMyReadRecv(what, seq);\n\n      if (this.acs != null && !this.acs.isMuted()) {\n        const me = this._tinode.getMeTopic();\n        // Sent a notification to 'me' listeners.\n        me._refreshContact(what, this);\n      }\n    }\n  }\n\n  /**\n   * Send a 'recv' receipt. Wrapper for {@link Tinode#noteRecv}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - ID of the message to aknowledge.\n   */\n  noteRecv(seq) {\n    this.note('recv', seq);\n  }\n  /**\n   * Send a 'read' receipt. Wrapper for {@link Tinode#noteRead}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - ID of the message to aknowledge or 0/undefined to acknowledge the latest messages.\n   */\n  noteRead(seq) {\n    seq = seq || this._maxSeq;\n    if (seq > 0) {\n      this.note('read', seq);\n    }\n  }\n  /**\n   * Send a key-press notification. Wrapper for {@link Tinode#noteKeyPress}.\n   * @memberof Tinode.Topic#\n   */\n  noteKeyPress() {\n    if (this._attached) {\n      this._tinode.noteKeyPress(this.name);\n    } else {\n      this._tinode.logger(\"INFO: Cannot send notification in inactive topic\");\n    }\n  }\n  /**\n   * Send a notification than a video or audio message is . Wrapper for {@link Tinode#noteKeyPress}.\n   * @memberof Tinode.Topic#\n   * @param audioOnly - true if the recording is audio-only, false if it's a video recording.\n   */\n  noteRecording(audioOnly) {\n    if (this._attached) {\n      this._tinode.noteKeyPress(this.name, audioOnly ? 'kpa' : 'kpv');\n    } else {\n      this._tinode.logger(\"INFO: Cannot send notification in inactive topic\");\n    }\n  }\n\n  /**\n   * Send a {note what='call'}. Wrapper for {@link Tinode#videoCall}.\n   * @memberof Tinode#\n   *\n   * @param {string} evt - Call event.\n   * @param {int} seq - ID of the call message the event pertains to.\n   * @param {string} payload - Payload associated with this event (e.g. SDP string).\n   *\n   * @returns {Promise} Promise (for some call events) which will\n   *                    be resolved/rejected on receiving server reply\n   */\n  videoCall(evt, seq, payload) {\n    if (!this._attached && !['ringing', 'hang-up'].includes(evt)) {\n      // Cannot {call} on an inactive topic\".\n      return;\n    }\n    return this._tinode.videoCall(this.name, seq, evt, payload);\n  }\n\n  // Update cached read/recv/unread counts for the current user.\n  _updateMyReadRecv(what, seq, ts) {\n    let oldVal, doUpdate = false;\n\n    seq = seq | 0;\n    this.seq = this.seq | 0;\n    this.read = this.read | 0;\n    this.recv = this.recv | 0;\n    switch (what) {\n      case 'recv':\n        oldVal = this.recv;\n        this.recv = Math.max(this.recv, seq);\n        doUpdate = (oldVal != this.recv);\n        break;\n      case 'read':\n        oldVal = this.read;\n        this.read = Math.max(this.read, seq);\n        doUpdate = (oldVal != this.read);\n        break;\n      case 'msg':\n        oldVal = this.seq;\n        this.seq = Math.max(this.seq, seq);\n        if (!this.touched || this.touched < ts) {\n          this.touched = ts;\n        }\n        doUpdate = (oldVal != this.seq);\n        break;\n    }\n\n    // Sanity checks.\n    if (this.recv < this.read) {\n      this.recv = this.read;\n      doUpdate = true;\n    }\n    if (this.seq < this.recv) {\n      this.seq = this.recv;\n      if (!this.touched || this.touched < ts) {\n        this.touched = ts;\n      }\n      doUpdate = true;\n    }\n    this.unread = this.seq - this.read;\n    return doUpdate;\n  }\n  /**\n   * Get user description from global cache. The user does not need to be a\n   * subscriber of this topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - ID of the user to fetch.\n   * @return {Object} user description or undefined.\n   */\n  userDesc(uid) {\n    // TODO: handle asynchronous requests\n    const user = this._cacheGetUser(uid);\n    if (user) {\n      return user; // Promise.resolve(user)\n    }\n  }\n  /**\n   * Get description of the p2p peer from subscription cache.\n   * @memberof Tinode.Topic#\n   *\n   * @return {Object} peer's description or undefined.\n   */\n  p2pPeerDesc() {\n    if (!this.isP2PType()) {\n      return undefined;\n    }\n    return this._users[this.name];\n  }\n  /**\n   * Iterate over cached subscribers. If callback is undefined, use this.onMetaSub.\n   * @memberof Tinode.Topic#\n   *\n   * @param {function} callback - Callback which will receive subscribers one by one.\n   * @param {Object=} context - Value of `this` inside the `callback`.\n   */\n  subscribers(callback, context) {\n    const cb = (callback || this.onMetaSub);\n    if (cb) {\n      for (let idx in this._users) {\n        cb.call(context, this._users[idx], idx, this._users);\n      }\n    }\n  }\n  /**\n   * Get a copy of cached tags.\n   * @memberof Tinode.Topic#\n   *\n   * @return {Array.<string>} a copy of tags\n   */\n  tags() {\n    // Return a copy.\n    return this._tags.slice(0);\n  }\n  /**\n   * Get auxiliary entry by key.\n   * @memberof Tinode.Topic#\n   * @param {string} key - auxiliary data key to retrieve.\n   * @return {Object} value for the <code>key</code> or <code>undefined</code>.\n   */\n  aux(key) {\n    return this._aux[key];\n  }\n  /**\n   * Get alias value (unique tag with alias: prefix), if present.\n   * The prefix is stripped off.\n   * @memberof Tinode.Topic#\n   * @return {string} alias or <code>undefined</code>.\n   */\n  alias() {\n    const alias = this._tags && this._tags.find(t => t.startsWith(Const.TAG_ALIAS));\n    if (!alias) {\n      return undefined;\n    }\n    // Remove 'alias:' prefix.\n    return alias.substring(Const.TAG_ALIAS.length);\n  }\n\n  /**\n   * Get cached subscription for the given user ID.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - id of the user to query for\n   * @return user description or undefined.\n   */\n  subscriber(uid) {\n    return this._users[uid];\n  }\n  /**\n   * Iterate over versions of a message: call <code>callback</code> for each version (excluding original).\n   * If <code>callback</code> is undefined, does nothing.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} origSeq - seq ID of the original message.\n   * @param {Tinode.ForEachCallbackType} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {Object} context - Value of `this` inside the `callback`.\n   */\n  messageVersions(origSeq, callback, context) {\n    if (!callback) {\n      // No callback? We are done then.\n      return;\n    }\n    const versions = this._messageVersions[origSeq];\n    if (!versions) {\n      return;\n    }\n    versions.forEach(callback, undefined, undefined, context);\n  }\n  /**\n   * Iterate over cached messages: call <code>callback</code> for each message in the range [sinceIdx, beforeIdx).\n   * If <code>callback</code> is undefined, use <code>this.onData</code>.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.ForEachCallbackType} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {number} sinceId - Optional seqId to start iterating from (inclusive).\n   * @param {number} beforeId - Optional seqId to stop iterating before it is reached (exclusive).\n   * @param {Object} context - Value of `this` inside the `callback`.\n   */\n  messages(callback, sinceId, beforeId, context) {\n    const cb = (callback || this.onData);\n    if (cb) {\n      const startIdx = typeof sinceId == 'number' ? this._messages.find({\n        seq: sinceId\n      }, true) : undefined;\n      const beforeIdx = typeof beforeId == 'number' ? this._messages.find({\n        seq: beforeId\n      }, true) : undefined;\n      if (startIdx != -1 && beforeIdx != -1) {\n        // Step 1. Filter out all replacement messages and\n        // save displayable messages in a temporary buffer.\n        let msgs = [];\n        this._messages.forEach((msg, unused1, unused2, i) => {\n          if (Topic.#isReplacementMsg(msg)) {\n            // Skip replacements.\n            return;\n          }\n          if (msg._deleted) {\n            // Skip deleted ranges.\n            return;\n          }\n          // In case the massage was edited, replace timestamp of the version with the original's timestamp.\n          const latest = this.latestMsgVersion(msg.seq) || msg;\n          if (!latest._origTs) {\n            latest._origTs = latest.ts;\n            latest._origSeq = latest.seq;\n            latest.ts = msg.ts;\n            latest.seq = msg.seq;\n          }\n          msgs.push({\n            data: latest,\n            idx: i\n          });\n        }, startIdx, beforeIdx, {});\n        // Step 2. Loop over displayble messages invoking cb on each of them.\n        msgs.forEach((val, i) => {\n          cb.call(context, val.data,\n            (i > 0 ? msgs[i - 1].data : undefined),\n            (i < msgs.length - 1 ? msgs[i + 1].data : undefined), val.idx);\n        });\n      }\n    }\n  }\n  /**\n   * Get the message from cache by literal <code>seq</code> (does not resolve message edits).\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - message seqId to search for.\n   * @returns {Object} the message with the given <code>seq</code> or <code>undefined</code>, if no such message is found.\n   */\n  findMessage(seq) {\n    const idx = this._messages.find({\n      seq: seq\n    });\n    if (idx >= 0) {\n      return this._messages.getAt(idx);\n    }\n    return undefined;\n  }\n  /**\n   * Get the most recent non-deleted message from cache.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Object} the most recent cached message or <code>undefined</code>, if no messages are cached.\n   */\n  latestMessage() {\n    return this._messages.getLast(msg => !msg._deleted);\n  }\n  /**\n   * Get the latest version for message.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - original seq ID of the message.\n   * @returns {Object} the latest version of the message or null if message not found.\n   */\n  latestMsgVersion(seq) {\n    const versions = this._messageVersions[seq];\n    return versions ? versions.getLast() : null;\n  }\n  /**\n   * Get the maximum cached seq ID.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} the greatest seq ID in cache.\n   */\n  maxMsgSeq() {\n    return this._maxSeq;\n  }\n  /**\n   * Get the minimum cached seq ID.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} the smallest seq ID in cache or 0.\n   */\n  minMsgSeq() {\n    return this._minSeq;\n  }\n  /**\n   * Get the maximum deletion ID.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} the greatest deletion ID.\n   */\n  maxClearId() {\n    return this._maxDel;\n  }\n  /**\n   * Get the number of messages in the cache.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} count of cached messages.\n   */\n  messageCount() {\n    return this._messages.length();\n  }\n  /**\n   * Iterate over cached unsent messages. Wraps {@link Tinode.Topic#messages}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {function} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {Object} context - Value of <code>this</code> inside the <code>callback</code>.\n   */\n  queuedMessages(callback, context) {\n    if (!callback) {\n      throw new Error(\"Callback must be provided\");\n    }\n    this.messages(callback, Const.LOCAL_SEQID, undefined, context);\n  }\n  /**\n   * Get the number of topic subscribers who marked this message as either recv or read\n   * Current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} what - what action to consider: received <code>\"recv\"</code> or read <code>\"read\"</code>.\n   * @param {number} seq - ID or the message read or received.\n   *\n   * @returns {number} the number of subscribers who marked the message with the given ID as read or received.\n   */\n  msgReceiptCount(what, seq) {\n    let count = 0;\n    if (seq > 0) {\n      const me = this._tinode.getCurrentUserID();\n      for (let idx in this._users) {\n        const user = this._users[idx];\n        if (user.user !== me && user[what] >= seq) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n  /**\n   * Get the number of topic subscribers who marked this message (and all older messages) as read.\n   * The current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - message id to check.\n   * @returns {number} number of subscribers who claim to have received the message.\n   */\n  msgReadCount(seq) {\n    return this.msgReceiptCount('read', seq);\n  }\n  /**\n   * Get the number of topic subscribers who marked this message (and all older messages) as received.\n   * The current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - Message id to check.\n   * @returns {number} Number of subscribers who claim to have received the message.\n   */\n  msgRecvCount(seq) {\n    return this.msgReceiptCount('recv', seq);\n  }\n  /**\n   * Check if cached message IDs indicate that the server may have more messages.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} min - smallest seq ID loaded range.\n   * @param {number} max - greatest seq ID in loaded range.\n   * @param {boolean} newer - if <code>true</code>, check for newer messages only.\n   * @returns {Array.<Range>} - missing ranges in the selected direction.\n   */\n  msgHasMoreMessages(min, max, newer) {\n    // Find gaps in cached messages.\n    const gaps = [];\n    if (min >= max) {\n      return gaps;\n    }\n    let maxSeq = 0;\n    let gap;\n    this._messages.forEach((msg, prev) => {\n      const p = prev || {\n        seq: 0\n      };\n      const expected = p._deleted ? p.hi : p.seq + 1;\n      if (msg.seq > expected) {\n        gap = {\n          low: expected,\n          hi: msg.seq\n        };\n      } else {\n        gap = null;\n      }\n      // If newer: collect all gaps from min to infinity.\n      // If older: collect all gaps from max to zero.\n      if (gap && (newer ? gap.hi >= min : gap.low < max)) {\n        gaps.push(gap);\n      }\n      maxSeq = expected;\n    });\n\n    if (maxSeq < this.seq) {\n      gap = {\n        low: maxSeq + 1,\n        hi: this.seq + 1\n      };\n      if (newer ? gap.hi >= min : gap.low < max) {\n        gaps.push(gap);\n      }\n    }\n    return gaps;\n  }\n  /**\n   * Check if the given seq Id is id of the most recent message.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to check\n   */\n  isNewMessage(seqId) {\n    return this._maxSeq <= seqId;\n  }\n  /**\n   * Remove one message from local cache.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to remove from cache.\n   * @returns {Message} removed message or undefined if such message was not found.\n   */\n  flushMessage(seqId) {\n    const idx = this._messages.find({\n      seq: seqId\n    });\n    delete this._messageVersions[seqId];\n    if (idx >= 0) {\n      this._tinode._db.remMessages(this.name, seqId);\n      return this._messages.delAt(idx);\n    }\n    return undefined;\n  }\n  /**\n   * Remove a range of messages from the local cache.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} fromId seq ID of the first message to remove (inclusive).\n   * @param {number} untilId seqID of the last message to remove (exclusive).\n   *\n   * @returns {Message[]} array of removed messages (could be empty).\n   */\n  flushMessageRange(fromId, untilId) {\n    // Remove range from persistent cache.\n    this._tinode._db.remMessages(this.name, fromId, untilId);\n\n    // Remove all versions keyed by IDs in the range.\n    for (let i = fromId; i < untilId; i++) {\n      delete this._messageVersions[i];\n    }\n\n    // start, end: find insertion points (nearest == true).\n    const since = this._messages.find({\n      seq: fromId\n    }, true);\n    return since >= 0 ? this._messages.delRange(since, this._messages.find({\n      seq: untilId\n    }, true)) : [];\n  }\n  /**\n   * Update message's seqId.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub message object.\n   * @param {number} newSeqId new seq id for pub.\n   */\n  swapMessageId(pub, newSeqId) {\n    const idx = this._messages.find(pub);\n    const numMessages = this._messages.length();\n    if (0 <= idx && idx < numMessages) {\n      // Remove message with the old seq ID.\n      this._messages.delAt(idx);\n      this._tinode._db.remMessages(this.name, pub.seq);\n      // Add message with the new seq ID.\n      pub.seq = newSeqId;\n      this._messages.put(pub);\n      this._tinode._db.addMessage(pub);\n    }\n  }\n  /**\n   * Attempt to stop message from being sent.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to stop sending and remove from cache.\n   *\n   * @returns {boolean} <code>true</code> if message was cancelled, <code>false</code> otherwise.\n   */\n  cancelSend(seqId) {\n    const idx = this._messages.find({\n      seq: seqId\n    });\n    if (idx >= 0) {\n      const msg = this._messages.getAt(idx);\n      const status = this.msgStatus(msg);\n      if (status == Const.MESSAGE_STATUS_QUEUED ||\n        status == Const.MESSAGE_STATUS_FAILED ||\n        status == Const.MESSAGE_STATUS_FATAL) {\n        this._tinode._db.remMessages(this.name, seqId);\n        msg._cancelled = true;\n        this._messages.delAt(idx);\n        if (this.onData) {\n          // Calling with no parameters to indicate the message was deleted.\n          this.onData();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Get type of the topic: me, p2p, grp, fnd...\n   * @memberof Tinode.Topic#\n   *\n   * @returns {string} One of 'me', 'p2p', 'grp', 'fnd', 'sys' or <code>undefined</code>.\n   */\n  getType() {\n    return Topic.topicType(this.name);\n  }\n  /**\n   * Get current user's access mode of the topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.AccessMode} - user's access mode\n   */\n  getAccessMode() {\n    return this.acs;\n  }\n  /**\n   * Set current user's access mode of the topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {AccessMode | Object} acs - access mode to set.\n   */\n  setAccessMode(acs) {\n    return this.acs = new AccessMode(acs);\n  }\n  /**\n   * Get topic's default access mode.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.DefAcs} - access mode, such as {auth: `RWP`, anon: `N`}.\n   */\n  getDefaultAccess() {\n    return this.defacs;\n  }\n  /**\n   * Initialize new meta {@link Tinode.GetQuery} builder. The query is attched to the current topic.\n   * It will not work correctly if used with a different topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.MetaGetBuilder} query attached to the current topic.\n   */\n  startMetaQuery() {\n    return new MetaGetBuilder(this);\n  }\n  /**\n   * Check if topic is archived, i.e. private.arch == true.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is archived, <code>false</code> otherwise.\n   */\n  isArchived() {\n    return this.private && !!this.private.arch;\n  }\n  /**\n   * Check if topic is a 'me' topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a 'me' topic, <code>false</code> otherwise.\n   */\n  isMeType() {\n    return Topic.isMeTopicName(this.name);\n  }\n  /**\n   * Check if topic is a 'slf' topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a 'slf' topic, <code>false</code> otherwise.\n   */\n  isSelfType() {\n    return Topic.isSelfTopicName(this.name);\n  }\n  /**\n   * Check if topic is a channel.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a channel, <code>false</code> otherwise.\n   */\n  isChannelType() {\n    return Topic.isChannelTopicName(this.name);\n  }\n  /**\n   * Check if topic is a group topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a group, <code>false</code> otherwise.\n   */\n  isGroupType() {\n    return Topic.isGroupTopicName(this.name);\n  }\n  /**\n   * Check if topic is a p2p topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a p2p topic, <code>false</code> otherwise.\n   */\n  isP2PType() {\n    return Topic.isP2PTopicName(this.name);\n  }\n  /**\n   * Check if topic is a communication topic, i.e. a group or p2p topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a p2p or group topic, <code>false</code> otherwise.\n   */\n  isCommType() {\n    return Topic.isCommTopicName(this.name);\n  }\n  /**\n   * Get status (queued, sent, received etc) of a given message in the context\n   * of this topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Message} msg - message to check for status.\n   * @param {boolean} upd - update chached message status.\n   *\n   * @returns message status constant.\n   */\n  msgStatus(msg, upd) {\n    let status = Const.MESSAGE_STATUS_NONE;\n    if (this._tinode.isMe(msg.from)) {\n      if (msg._sending) {\n        status = Const.MESSAGE_STATUS_SENDING;\n      } else if (msg._fatal || msg._cancelled) {\n        status = Const.MESSAGE_STATUS_FATAL;\n      } else if (msg._failed) {\n        status = Const.MESSAGE_STATUS_FAILED;\n      } else if (msg.seq >= Const.LOCAL_SEQID) {\n        status = Const.MESSAGE_STATUS_QUEUED;\n      } else if (this.msgReadCount(msg.seq) > 0) {\n        status = Const.MESSAGE_STATUS_READ;\n      } else if (this.msgRecvCount(msg.seq) > 0) {\n        status = Const.MESSAGE_STATUS_RECEIVED;\n      } else if (msg.seq > 0) {\n        status = Const.MESSAGE_STATUS_SENT;\n      }\n    } else {\n      status = Const.MESSAGE_STATUS_TO_ME;\n    }\n\n    if (upd && msg._status != status) {\n      msg._status = status;\n      this._tinode._db.updMessageStatus(this.name, msg.seq, status);\n    }\n\n    return status;\n  }\n\n  // If msg is a replacement for another message, save the msg in the message versions cache\n  // as a newer version for the message it's supposed to replace.\n  _maybeUpdateMessageVersionsCache(msg) {\n    if (!Topic.#isReplacementMsg(msg)) {\n      // Check if this message is the original in the chain of edits and if so\n      // ensure all version have the same sender.\n      if (this._messageVersions[msg.seq]) {\n        // Remove versions with different 'from'.\n        this._messageVersions[msg.seq].filter(version => version.from == msg.from);\n        if (this._messageVersions[msg.seq].isEmpty()) {\n          delete this._messageVersions[msg.seq];\n        }\n      }\n      return;\n    }\n\n    const targetSeq = parseInt(msg.head.replace.split(':')[1]);\n    if (targetSeq > msg.seq) {\n      // Substitutes are supposed to have higher seq ids.\n      return;\n    }\n    const targetMsg = this.findMessage(targetSeq);\n    if (targetMsg && targetMsg.from != msg.from) {\n      // Substitute cannot change the sender.\n      return;\n    }\n    const versions = this._messageVersions[targetSeq] || new CBuffer((a, b) => {\n      return a.seq - b.seq;\n    }, true);\n    versions.put(msg);\n    this._messageVersions[targetSeq] = versions;\n  }\n\n  // Process data message\n  _routeData(data) {\n    if (data.content) {\n      if (!this.touched || this.touched < data.ts) {\n        this.touched = data.ts;\n        this._tinode._db.updTopic(this);\n      }\n    }\n\n    if (data.seq > this._maxSeq) {\n      this._maxSeq = data.seq;\n      this.msgStatus(data, true);\n      // Ackn receiving the message.\n      clearTimeout(this._recvNotificationTimer);\n      this._recvNotificationTimer = setTimeout(_ => {\n        this._recvNotificationTimer = null;\n        this.noteRecv(this._maxSeq);\n      }, Const.RECV_TIMEOUT);\n    }\n\n    if (data.seq < this._minSeq || this._minSeq == 0) {\n      this._minSeq = data.seq;\n    }\n\n    const outgoing = ((!this.isChannelType() && !data.from) || this._tinode.isMe(data.from));\n\n    if (data.head && data.head.webrtc && data.head.mime == Drafty.getContentType() && data.content) {\n      // Rewrite VC body with info from the headers.\n      const upd = {\n        state: data.head.webrtc,\n        duration: data.head['webrtc-duration'],\n        incoming: !outgoing,\n      };\n      if (data.head.vc) {\n        upd.vc = true;\n      }\n      data.content = Drafty.updateVideoCall(data.content, upd);\n    }\n\n    if (!data._noForwarding) {\n      this._messages.put(data);\n      this._tinode._db.addMessage(data);\n      this._maybeUpdateMessageVersionsCache(data);\n    }\n\n    if (this.onData) {\n      this.onData(data);\n    }\n\n    // Update locally cached contact with the new message count.\n    const what = outgoing ? 'read' : 'msg';\n    this._updateMyReadRecv(what, data.seq, data.ts);\n\n    if (!outgoing && data.from) {\n      // Mark messages as read by the sender.\n      this._routeInfo({\n        what: 'read',\n        from: data.from,\n        seq: data.seq,\n        _noForwarding: true\n      });\n    }\n\n    // Notify 'me' listeners of the change.\n    this._tinode.getMeTopic()._refreshContact(what, this);\n  }\n\n  // Process metadata message\n  _routeMeta(meta) {\n    if (meta.desc) {\n      this._processMetaDesc(meta.desc);\n    }\n    if (meta.sub && meta.sub.length > 0) {\n      this._processMetaSubs(meta.sub);\n    }\n    if (meta.del) {\n      this._processDelMessages(meta.del.clear, meta.del.delseq);\n    }\n    if (meta.tags) {\n      this._processMetaTags(meta.tags);\n    }\n    if (meta.cred) {\n      this._processMetaCreds(meta.cred);\n    }\n    if (meta.aux) {\n      this._processMetaAux(meta.aux);\n    }\n    if (this.onMeta) {\n      this.onMeta(meta);\n    }\n  }\n  // Process presence change message\n  _routePres(pres) {\n    let user, uid;\n    switch (pres.what) {\n      case 'del':\n        // Delete cached messages.\n        this._processDelMessages(pres.clear, pres.delseq);\n        break;\n      case 'on':\n      case 'off':\n        // Update online status of a subscription.\n        user = this._users[pres.src];\n        if (user) {\n          user.online = pres.what == 'on';\n        } else {\n          this._tinode.logger(\"WARNING: Presence update for an unknown user\", this.name, pres.src);\n        }\n        break;\n      case 'term':\n        // Attachment to topic is terminated probably due to cluster rehashing.\n        this._resetSub();\n        break;\n      case 'upd':\n        // A topic subscriber has updated his description.\n        // Issue {get sub} only if the current user has no p2p topics with the updated user (p2p name is not in cache).\n        // Otherwise 'me' will issue a {get desc} request.\n        if (pres.src && !this._tinode.isTopicCached(pres.src)) {\n          this.getMeta(this.startMetaQuery().withOneSub(undefined, pres.src).build());\n        }\n        break;\n      case 'aux':\n        // Auxiliary data updated.\n        this.getMeta(this.startMetaQuery().withAux().build());\n        break;\n      case 'acs':\n        uid = pres.src || this._tinode.getCurrentUserID();\n        user = this._users[uid];\n        if (!user) {\n          // Update for an unknown user: notification of a new subscription.\n          const acs = new AccessMode().updateAll(pres.dacs);\n          if (acs && acs.mode != AccessMode._NONE) {\n            user = this._cacheGetUser(uid);\n            if (!user) {\n              user = {\n                user: uid,\n                acs: acs\n              };\n              this.getMeta(this.startMetaQuery().withOneSub(undefined, uid).build());\n            } else {\n              user.acs = acs;\n            }\n            user.updated = new Date();\n            this._processMetaSubs([user]);\n          }\n        } else {\n          // Known user\n          user.acs.updateAll(pres.dacs);\n          // Update user's access mode.\n          this._processMetaSubs([{\n            user: uid,\n            updated: new Date(),\n            acs: user.acs\n          }]);\n        }\n        break;\n      default:\n        this._tinode.logger(\"INFO: Ignored presence update\", pres.what);\n    }\n\n    if (this.onPres) {\n      this.onPres(pres);\n    }\n  }\n  // Process {info} message\n  _routeInfo(info) {\n    switch (info.what) {\n      case 'recv':\n      case 'read':\n        const user = this._users[info.from];\n        if (user) {\n          user[info.what] = info.seq;\n          if (user.recv < user.read) {\n            user.recv = user.read;\n          }\n        }\n        const msg = this.latestMessage();\n        if (msg) {\n          this.msgStatus(msg, true);\n        }\n\n        // If this is an update from the current user, update the cache with the new count.\n        if (this._tinode.isMe(info.from) && !info._noForwarding) {\n          this._updateMyReadRecv(info.what, info.seq);\n        }\n\n        // Notify 'me' listener of the status change.\n        this._tinode.getMeTopic()._refreshContact(info.what, this);\n        break;\n      case 'kp':\n      case 'kpa':\n      case 'kpv':\n        // Typing or audio/video recording notification. Do nothing.\n        break;\n      case 'call':\n        // Do nothing here.\n        break;\n      default:\n        this._tinode.logger(\"INFO: Ignored info update\", info.what);\n    }\n\n    if (this.onInfo) {\n      this.onInfo(info);\n    }\n  }\n  // Called by Tinode when meta.desc packet is received.\n  // Called by 'me' topic on contact update (desc._noForwarding is true).\n  _processMetaDesc(desc) {\n    if (this.isP2PType()) {\n      // Synthetic desc may include defacs for p2p topics which is useless.\n      // Remove it.\n      delete desc.defacs;\n\n      // Update to p2p desc is the same as user update. Update cached user.\n      this._tinode._db.updUser(this.name, desc.public);\n    }\n\n    // Copy parameters from desc object to this topic.\n    mergeObj(this, desc);\n    // Update persistent cache.\n    this._tinode._db.updTopic(this);\n\n    // Notify 'me' listener, if available:\n    if (this.name !== Const.TOPIC_ME && !desc._noForwarding) {\n      const me = this._tinode.getMeTopic();\n      if (me.onMetaSub) {\n        me.onMetaSub(this);\n      }\n      if (me.onSubsUpdated) {\n        me.onSubsUpdated([this.name], 1);\n      }\n    }\n\n    if (this.onMetaDesc) {\n      this.onMetaDesc(this);\n    }\n  }\n  // Called by Tinode when meta.sub is recived or in response to received\n  // {ctrl} after setMeta-sub.\n  _processMetaSubs(subs) {\n    for (let idx in subs) {\n      const sub = subs[idx];\n\n      // Fill defaults.\n      sub.online = !!sub.online;\n      // Update timestamp of the most recent subscription update.\n      this._lastSubsUpdate = new Date(Math.max(this._lastSubsUpdate, sub.updated));\n\n      let user = null;\n      if (!sub.deleted) {\n        // If this is a change to user's own permissions, update them in topic too.\n        // Desc will update 'me' topic.\n        if (this._tinode.isMe(sub.user) && sub.acs) {\n          this._processMetaDesc({\n            updated: sub.updated,\n            touched: sub.touched,\n            acs: sub.acs\n          });\n        }\n        user = this._updateCachedUser(sub.user, sub);\n      } else {\n        // Subscription is deleted, remove it from topic (but leave in Users cache)\n        delete this._users[sub.user];\n        user = sub;\n      }\n\n      if (this.onMetaSub) {\n        this.onMetaSub(user);\n      }\n    }\n\n    if (this.onSubsUpdated) {\n      this.onSubsUpdated(Object.keys(this._users));\n    }\n  }\n  // Called by Tinode when meta.tags is recived.\n  _processMetaTags(tags) {\n    if (tags == Const.DEL_CHAR || (tags.length == 1 && tags[0] == Const.DEL_CHAR)) {\n      tags = [];\n    }\n    this._tags = tags;\n    this._tinode._db.updTopic(this);\n    if (this.onTagsUpdated) {\n      this.onTagsUpdated(tags);\n    }\n  }\n  // Do nothing for topics other than 'me'\n  _processMetaCreds(creds) {}\n\n  // Called by Tinode when meta.aux is recived.\n  _processMetaAux(aux) {\n    aux = (!aux || aux == Const.DEL_CHAR) ? {} : aux;\n    this._aux = mergeObj(this._aux, aux);\n    this._tinode._db.updTopic(this);\n    if (this.onAuxUpdated) {\n      this.onAuxUpdated(this._aux);\n    }\n  }\n\n  // Delete cached messages and update cached transaction IDs\n  _processDelMessages(clear, delseq) {\n    this._maxDel = Math.max(clear, this._maxDel);\n    this.clear = Math.max(clear, this.clear);\n    let count = 0;\n    if (Array.isArray(delseq)) {\n      delseq.forEach(rec => {\n        if (!rec.hi) {\n          count++;\n          this.flushMessage(rec.low);\n        } else {\n          count += rec.hi - rec.low;\n          this.flushMessageRange(rec.low, rec.hi);\n        }\n        this._messages.put({\n          seq: rec.low,\n          low: rec.low,\n          hi: rec.hi,\n          _deleted: true\n        });\n      });\n\n      this._tinode._db.addDelLog(this.name, clear, delseq);\n    }\n\n    if (count > 0) {\n      if (this.onData) {\n        this.onData();\n      }\n    }\n  }\n  // Topic is informed that the entire response to {get what=data} has been received.\n  _allMessagesReceived(count) {\n\n    if (this.onAllMessagesReceived) {\n      this.onAllMessagesReceived(count);\n    }\n  }\n  // Reset subscribed state\n  _resetSub() {\n    this._attached = false;\n  }\n  // This topic is either deleted or unsubscribed from.\n  _gone() {\n    this._messages.reset();\n    this._tinode._db.remMessages(this.name);\n    this._users = {};\n    this.acs = new AccessMode(null);\n    this.private = null;\n    this.public = null;\n    this.trusted = null;\n    this._maxSeq = 0;\n    this._minSeq = 0;\n    this._attached = false;\n\n    const me = this._tinode.getMeTopic();\n    if (me) {\n      me._routePres({\n        _noForwarding: true,\n        what: 'gone',\n        topic: Const.TOPIC_ME,\n        src: this.name\n      });\n    }\n    if (this.onDeleteTopic) {\n      this.onDeleteTopic();\n    }\n  }\n  // Update global user cache and local subscribers cache.\n  // Don't call this method for non-subscribers.\n  _updateCachedUser(uid, obj) {\n    // Fetch user object from the global cache.\n    // This is a clone of the stored object\n    let cached = this._cacheGetUser(uid);\n    cached = mergeObj(cached || {}, obj);\n    // Save to global cache\n    this._cachePutUser(uid, cached);\n    // Save to the list of topic subsribers.\n    return mergeToCache(this._users, uid, cached);\n  }\n  // Get local seqId for a queued message.\n  _getQueuedSeqId() {\n    return this._queuedSeqId++;\n  }\n\n  // Load most recent messages from persistent cache.\n  _loadMessages(db, query) {\n    query = query || {};\n    query.limit = query.limit || Const.DEFAULT_MESSAGES_PAGE;\n\n    // Count of message loaded from DB.\n    let count = 0;\n    return db.readMessages(this.name, query)\n      .then(msgs => {\n        msgs.forEach(data => {\n          if (data.seq > this._maxSeq) {\n            this._maxSeq = data.seq;\n          }\n          if (data.seq < this._minSeq || this._minSeq == 0) {\n            this._minSeq = data.seq;\n          }\n          this._messages.put(data);\n          this._maybeUpdateMessageVersionsCache(data);\n        });\n        count = msgs.length;\n      })\n      .then(_ => db.readDelLog(this.name, query))\n      .then(dellog => {\n        return dellog.forEach(rec => {\n          this._messages.put({\n            seq: rec.low,\n            low: rec.low,\n            hi: rec.hi,\n            _deleted: true\n          });\n        });\n      })\n      .then(_ => {\n        // DEBUG\n        return count;\n      });\n  }\n\n  // Push or {pres}: message received.\n  _updateReceived(seq, act) {\n    this.touched = new Date();\n    this.seq = seq | 0;\n    // Check if message is sent by the current user. If so it's been read already.\n    if (!act || this._tinode.isMe(act)) {\n      this.read = this.read ? Math.max(this.read, this.seq) : this.seq;\n      this.recv = this.recv ? Math.max(this.read, this.recv) : this.read;\n    }\n    this.unread = this.seq - (this.read | 0);\n    this._tinode._db.updTopic(this);\n  }\n}\n","/**\n * @file Definition of 'fnd' topic.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nimport * as Const from './config.js';\nimport Topic from './topic.js';\nimport {\n  mergeToCache\n} from './utils.js';\n\n\n/**\n * Special case of {@link Tinode.Topic} for searching for contacts and group topics\n * @extends Tinode.Topic\n *\n */\nexport default class TopicFnd extends Topic {\n  // List of users and topics uid or topic_name -> Contact object)\n  _contacts = {};\n\n  /**\n   * Create TopicFnd.\n   *\n   * @param {TopicFnd.Callbacks} callbacks - Callbacks to receive various events.\n   */\n  constructor(callbacks) {\n    super(Const.TOPIC_FND, callbacks);\n  }\n\n  // Override the original Topic._processMetaSubs\n  _processMetaSubs(subs) {\n    let updateCount = Object.getOwnPropertyNames(this._contacts).length;\n    // Reset contact list.\n    this._contacts = {};\n    for (let idx in subs) {\n      let sub = subs[idx];\n      const indexBy = sub.topic ? sub.topic : sub.user;\n\n      sub = mergeToCache(this._contacts, indexBy, sub);\n      updateCount++;\n\n      if (this.onMetaSub) {\n        this.onMetaSub(sub);\n      }\n    }\n\n    if (updateCount > 0 && this.onSubsUpdated) {\n      this.onSubsUpdated(Object.keys(this._contacts));\n    }\n  }\n\n  /**\n   * Publishing to TopicFnd is not supported. {@link Topic#publish} is overriden and thows an {Error} if called.\n   * @memberof Tinode.TopicFnd#\n   * @throws {Error} Always throws an error.\n   */\n  publish() {\n    return Promise.reject(new Error(\"Publishing to 'fnd' is not supported\"));\n  }\n\n  /**\n   * setMeta to TopicFnd resets contact list in addition to sending the message.\n   * @memberof Tinode.TopicFnd#\n   * @param {Tinode.SetParams} params parameters to update.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  setMeta(params) {\n    return Object.getPrototypeOf(TopicFnd.prototype).setMeta.call(this, params).then(_ => {\n      if (Object.keys(this._contacts).length > 0) {\n        this._contacts = {};\n        if (this.onSubsUpdated) {\n          this.onSubsUpdated([]);\n        }\n      }\n    });\n  }\n\n  /**\n   * Check if the given tag is unique by asking the server.\n   * @param tag tag to check.\n   * @return promise to be resolved with true if the tag is unique, false otherwise.\n   */\n  checkTagUniqueness(tag, caller) {\n    return new Promise((resolve, reject) => {\n      this.subscribe()\n        .then(_ => this.setMeta({\n          desc: {\n            public: tag\n          }\n        }))\n        .then(_ => this.getMeta(this.startMetaQuery().withTags().build()))\n        .then(meta => {\n          if (!meta || !Array.isArray(meta.tags) || meta.tags.length == 0) {\n            resolve(true);\n          }\n          const tags = meta.tags.filter(t => t !== caller);\n          resolve(tags.length == 0);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Iterate over found contacts. If callback is undefined, use {@link this.onMetaSub}.\n   * @function\n   * @memberof Tinode.TopicFnd#\n   * @param {TopicFnd.ContactCallback} callback - Callback to call for each contact.\n   * @param {Object} context - Context to use for calling the `callback`, i.e. the value of `this` inside the callback.\n   */\n  contacts(callback, context) {\n    const cb = (callback || this.onMetaSub);\n    if (cb) {\n      for (let idx in this._contacts) {\n        cb.call(context, this._contacts[idx], idx, this._contacts);\n      }\n    }\n  }\n}\n","/**\n * @file Definition of 'me' topic.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nimport AccessMode from './access-mode.js';\nimport * as Const from './config.js';\nimport Topic from './topic.js';\nimport {\n  mergeObj\n} from './utils.js';\n\n/**\n * @class TopicMe - special case of {@link Tinode.Topic} for\n * managing data of the current user, including contact list.\n * @extends Tinode.Topic\n * @memberof Tinode\n *\n * @param {TopicMe.Callbacks} callbacks - Callbacks to receive various events.\n */\nexport default class TopicMe extends Topic {\n  onContactUpdate;\n\n  constructor(callbacks) {\n    super(Const.TOPIC_ME, callbacks);\n\n    // me-specific callbacks\n    if (callbacks) {\n      this.onContactUpdate = callbacks.onContactUpdate;\n    }\n  }\n\n  // Override the original Topic._processMetaDesc.\n  _processMetaDesc(desc) {\n    // Check if online contacts need to be turned off because P permission was removed.\n    const turnOff = (desc.acs && !desc.acs.isPresencer()) && (this.acs && this.acs.isPresencer());\n\n    // Copy parameters from desc object to this topic.\n    mergeObj(this, desc);\n    this._tinode._db.updTopic(this);\n    // Update current user's record in the global cache.\n    this._updateCachedUser(this._tinode._myUID, desc);\n\n    // 'P' permission was removed. All topics are offline now.\n    if (turnOff) {\n      this._tinode.mapTopics((cont) => {\n        if (cont.online) {\n          cont.online = false;\n          cont.seen = Object.assign(cont.seen || {}, {\n            when: new Date()\n          });\n          this._refreshContact('off', cont);\n        }\n      });\n    }\n\n    if (this.onMetaDesc) {\n      this.onMetaDesc(this);\n    }\n  }\n\n  // Override the original Topic._processMetaSubs\n  _processMetaSubs(subs) {\n    let updateCount = 0;\n    subs.forEach((sub) => {\n      const topicName = sub.topic;\n      // Don't show 'me' and 'fnd' topics in the list of contacts.\n      if (topicName == Const.TOPIC_FND || topicName == Const.TOPIC_ME) {\n        return;\n      }\n      sub.online = !!sub.online;\n\n      let cont = null;\n      if (sub.deleted) {\n        cont = sub;\n        this._tinode.cacheRemTopic(topicName);\n        this._tinode._db.remTopic(topicName);\n      } else {\n        // Ensure the values are defined and are integers.\n        if (typeof sub.seq != 'undefined') {\n          sub.seq = sub.seq | 0;\n          sub.recv = sub.recv | 0;\n          sub.read = sub.read | 0;\n          sub.unread = sub.seq - sub.read;\n        }\n\n        const topic = this._tinode.getTopic(topicName);\n        if (topic._new) {\n          delete topic._new;\n        }\n\n        cont = mergeObj(topic, sub);\n        this._tinode._db.updTopic(cont);\n\n        if (Topic.isP2PTopicName(topicName)) {\n          this._cachePutUser(topicName, cont);\n          this._tinode._db.updUser(topicName, cont.public);\n        }\n        // Notify topic of the update if it's an external update.\n        if (!sub._noForwarding && topic) {\n          sub._noForwarding = true;\n          topic._processMetaDesc(sub);\n        }\n      }\n\n      updateCount++;\n\n      if (this.onMetaSub) {\n        this.onMetaSub(cont);\n      }\n    });\n\n    if (this.onSubsUpdated && updateCount > 0) {\n      const keys = [];\n      subs.forEach((s) => {\n        keys.push(s.topic);\n      });\n      this.onSubsUpdated(keys, updateCount);\n    }\n  }\n\n  // Called by Tinode when meta.sub is recived.\n  _processMetaCreds(creds, upd) {\n    if (creds.length == 1 && creds[0] == Const.DEL_CHAR) {\n      creds = [];\n    }\n    if (upd) {\n      creds.forEach((cr) => {\n        if (cr.val) {\n          // Adding a credential.\n          let idx = this._credentials.findIndex((el) => {\n            return el.meth == cr.meth && el.val == cr.val;\n          });\n          if (idx < 0) {\n            // Not found.\n            if (!cr.done) {\n              // Unconfirmed credential replaces previous unconfirmed credential of the same method.\n              idx = this._credentials.findIndex((el) => {\n                return el.meth == cr.meth && !el.done;\n              });\n              if (idx >= 0) {\n                // Remove previous unconfirmed credential.\n                this._credentials.splice(idx, 1);\n              }\n            }\n            this._credentials.push(cr);\n          } else {\n            // Found. Maybe change 'done' status.\n            this._credentials[idx].done = cr.done;\n          }\n        } else if (cr.resp) {\n          // Handle credential confirmation.\n          const idx = this._credentials.findIndex((el) => {\n            return el.meth == cr.meth && !el.done;\n          });\n          if (idx >= 0) {\n            this._credentials[idx].done = true;\n          }\n        }\n      });\n    } else {\n      this._credentials = creds;\n    }\n    if (this.onCredsUpdated) {\n      this.onCredsUpdated(this._credentials);\n    }\n  }\n\n  // Process presence change message\n  _routePres(pres) {\n    if (pres.what == 'term') {\n      // The 'me' topic itself is detached. Mark as unsubscribed.\n      this._resetSub();\n      return;\n    }\n\n    if (pres.what == 'upd' && pres.src == Const.TOPIC_ME) {\n      // Update to me's description. Request updated value.\n      this.getMeta(this.startMetaQuery().withDesc().build());\n      return;\n    }\n\n    const cont = this._tinode.cacheGetTopic(pres.src);\n    if (cont) {\n      switch (pres.what) {\n        case 'on': // topic came online\n          cont.online = true;\n          break;\n        case 'off': // topic went offline\n          if (cont.online) {\n            cont.online = false;\n            cont.seen = Object.assign(cont.seen || {}, {\n              when: new Date()\n            });\n          }\n          break;\n        case 'msg': // new message received\n          cont._updateReceived(pres.seq, pres.act);\n          break;\n        case 'upd': // desc updated\n          // Request updated subscription.\n          this.getMeta(this.startMetaQuery().withLaterOneSub(pres.src).build());\n          break;\n        case 'acs': // access mode changed\n          // If 'tgt' is not set then this is an update to the permissions of the current user.\n          // Otherwise it's an update to group topic subscriber permissions while the topic is offline.\n          // Just gnore it then.\n          if (!pres.tgt) {\n            if (cont.acs) {\n              cont.acs.updateAll(pres.dacs);\n            } else {\n              cont.acs = new AccessMode().updateAll(pres.dacs);\n            }\n            cont.touched = new Date();\n          }\n          break;\n        case 'ua':\n          // user agent changed.\n          cont.seen = {\n            when: new Date(),\n            ua: pres.ua\n          };\n          break;\n        case 'recv':\n          // user's other session marked some messges as received.\n          pres.seq = pres.seq | 0;\n          cont.recv = cont.recv ? Math.max(cont.recv, pres.seq) : pres.seq;\n          break;\n        case 'read':\n          // user's other session marked some messages as read.\n          pres.seq = pres.seq | 0;\n          cont.read = cont.read ? Math.max(cont.read, pres.seq) : pres.seq;\n          cont.recv = cont.recv ? Math.max(cont.read, cont.recv) : cont.recv;\n          cont.unread = cont.seq - cont.read;\n          break;\n        case 'gone':\n          // topic deleted or unsubscribed from.\n          this._tinode.cacheRemTopic(pres.src);\n          if (!cont._deleted) {\n            cont._deleted = true;\n            cont._attached = false;\n            this._tinode._db.markTopicAsDeleted(pres.src, true);\n          } else {\n            this._tinode._db.remTopic(pres.src);\n          }\n          break;\n        case 'del':\n          // Update topic.del value.\n          break;\n        default:\n          this._tinode.logger(\"INFO: Unsupported presence update in 'me'\", pres.what);\n      }\n\n      this._refreshContact(pres.what, cont);\n    } else {\n      if (pres.what == 'acs') {\n        // New subscriptions and deleted/banned subscriptions have full\n        // access mode (no + or - in the dacs string). Changes to known subscriptions are sent as\n        // deltas, but they should not happen here.\n        const acs = new AccessMode(pres.dacs);\n        if (!acs || acs.mode == AccessMode._INVALID) {\n          this._tinode.logger(\"ERROR: Invalid access mode update\", pres.src, pres.dacs);\n          return;\n        } else if (acs.mode == AccessMode._NONE) {\n          this._tinode.logger(\"WARNING: Removing non-existent subscription\", pres.src, pres.dacs);\n          return;\n        } else {\n          // New subscription. Send request for the full description.\n          // Using .withOneSub (not .withLaterOneSub) to make sure IfModifiedSince is not set.\n          this.getMeta(this.startMetaQuery().withOneSub(undefined, pres.src).build());\n          // Create a dummy entry to catch online status update.\n          const dummy = this._tinode.getTopic(pres.src);\n          dummy.topic = pres.src;\n          dummy.online = false;\n          dummy.acs = acs;\n          this._tinode._db.updTopic(dummy);\n        }\n      } else if (pres.what == 'tags') {\n        this.getMeta(this.startMetaQuery().withTags().build());\n      } else if (pres.what == 'msg') {\n        // Message received for un unknown (previously deleted) topic.\n        this.getMeta(this.startMetaQuery().withOneSub(undefined, pres.src).build());\n        // Create an entry to catch updates and messages.\n        const dummy = this._tinode.getTopic(pres.src);\n        dummy._deleted = false;\n        this._tinode._db.updTopic(dummy);\n      }\n\n      this._refreshContact(pres.what, cont);\n    }\n\n    if (this.onPres) {\n      this.onPres(pres);\n    }\n  }\n\n  // Contact is updated, execute callbacks.\n  _refreshContact(what, cont) {\n    if (this.onContactUpdate) {\n      this.onContactUpdate(what, cont);\n    }\n  }\n\n  /**\n   * Publishing to TopicMe is not supported. {@link Topic#publish} is overriden and thows an {Error} if called.\n   * @memberof Tinode.TopicMe#\n   * @throws {Error} Always throws an error.\n   */\n  publish() {\n    return Promise.reject(new Error(\"Publishing to 'me' is not supported\"));\n  }\n\n  /**\n   * Delete validation credential.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} topic - Name of the topic to delete\n   * @param {string} user - User ID to remove.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCredential(method, value) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete credential in inactive 'me' topic\"));\n    }\n    // Send {del} message, return promise\n    return this._tinode.delCredential(method, value).then(ctrl => {\n      // Remove deleted credential from the cache.\n      const index = this._credentials.findIndex((el) => {\n        return el.meth == method && el.val == value;\n      });\n      if (index > -1) {\n        this._credentials.splice(index, 1);\n      }\n      // Notify listeners\n      if (this.onCredsUpdated) {\n        this.onCredsUpdated(this._credentials);\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * @callback contactFilter\n   * @param {Object} contact to check for inclusion.\n   * @returns {boolean} <code>true</code> if contact should be processed, <code>false</code> to exclude it.\n   */\n  /**\n   * Iterate over cached contacts.\n   *\n   * @function\n   * @memberof Tinode.TopicMe#\n   * @param {TopicMe.ContactCallback} callback - Callback to call for each contact.\n   * @param {contactFilter=} filter - Optionally filter contacts; include all if filter is false-ish, otherwise\n   *      include those for which filter returns true-ish.\n   * @param {Object=} context - Context to use for calling the `callback`, i.e. the value of `this` inside the callback.\n   */\n  contacts(callback, filter, context) {\n    this._tinode.mapTopics((c, idx) => {\n      if (c.isCommType() && (!filter || filter(c))) {\n        callback.call(context, c, idx);\n      }\n    });\n  }\n\n  /**\n   * Get a contact from cache.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to get, either a UID (for p2p topics) or a topic name.\n   * @returns {Tinode.Contact} - Contact or `undefined`.\n   */\n  getContact(name) {\n    return this._tinode.cacheGetTopic(name);\n  }\n\n  /**\n   * Get access mode of a given contact from cache.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to get access mode for, either a UID (for p2p topics)\n   *        or a topic name; if missing, access mode for the 'me' topic itself.\n   * @returns {string} - access mode, such as `RWP`.\n   */\n  getAccessMode(name) {\n    if (name) {\n      const cont = this._tinode.cacheGetTopic(name);\n      return cont ? cont.acs : null;\n    }\n    return this.acs;\n  }\n\n  /**\n   * Check if contact is archived, i.e. contact.private.arch == true.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to check archived status, either a UID (for p2p topics) or a topic name.\n   * @returns {boolean} - true if contact is archived, false otherwise.\n   */\n  isArchived(name) {\n    const cont = this._tinode.cacheGetTopic(name);\n    return cont && cont.private && !!cont.private.arch;\n  }\n\n  /**\n   * @typedef Tinode.Credential\n   * @memberof Tinode\n   * @type Object\n   * @property {string} meth - validation method such as 'email' or 'tel'.\n   * @property {string} val - credential value, i.e. 'jdoe@example.com' or '+17025551234'\n   * @property {boolean} done - true if credential is validated.\n   */\n  /**\n   * Get the user's credentials: email, phone, etc.\n   * @memberof Tinode.TopicMe#\n   *\n   * @returns {Tinode.Credential[]} - array of credentials.\n   */\n  getCredentials() {\n    return this._credentials;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","this","DRAFTY_FR_MIME_TYPE","ALLOWED_ENT_FIELDS","segmenter","Intl","Segmenter","INLINE_STYLES","name","start","end","FMT_WEIGHT","ENTITY_TYPES","dataName","pack","val","test","url","re","slice","FORMAT_TAGS","AU","html_tag","md_tag","undefined","isVoid","BN","BR","CO","DL","EM","EX","FM","HD","HL","HT","IM","LN","MN","RW","QQ","ST","VC","VD","base64toObjectUrl","b64","contentType","logger","bin","atob","length","buf","ArrayBuffer","arr","Uint8Array","i","charCodeAt","URL","createObjectURL","Blob","type","err","message","base64toDataUrl","DECORATORS","open","_","close","data","props","href","target","id","act","ref","mime","Drafty","src","duration","size","tmpPreviewUrl","_tempPreview","previewUrl","downloadUrl","width","height","title","alt","state","preview","premime","poster","preref","txt","fmt","ent","chunkify","line","spans","chunks","span","at","push","chunk","tp","chld","children","toSpanTree","tree","last","draftyToTree","doc","Array","isArray","text","len","key","attachments","forEach","includes","stringToGraphemes","sort","a","b","diff","indexOf","graphemes","spansToTree","treeTopDown","node","child","parent","addNode","n","map","segment","join","att","subspans","inner","tag","treeToDrafty","keymap","c","Object","keys","newKey","transformer","context","dst","call","treeBottomUp","formatter","index","stack","values","pop","shortenTree","limit","tail","lightEntity","allow","copyEntData","lTrim","trimStart","shift","attachmentsToEnd","isFormResponseType","concat","draftify","startAt","plain","ranges","drafty","light","entries","dc","isEmptyObject","obj","toGraphemeValues","segments","indices","result","graphemeIndex","charIndex","graphemeIndices","correctAt","str","from","init","plainText","parse","content","lines","split","entityMap","entityIndex","blx","entities","block","original","re_start","re_end","exec","start_offset","lastIndexOf","end_offset","spannify","match","extracted","entity","offset","unique","idx","filter","el","extractEntities","ele","s","correctLen","append","first","second","insertImage","imageDesc","ex","refurl","bits","filename","urlPromise","_processing","then","insertVideo","videoDesc","urls","insertAudio","audioDesc","videoCall","audioOnly","aonly","updateVideoCall","params","assign","quote","header","uid","body","appendLineBreak","mention","appendLink","linkData","appendImage","appendAudio","attachFile","attachmentDesc","wrapInto","style","wrapAsForm","insertButton","actionType","actionValue","refUrl","appendButton","attachJSON","UNSAFE_toHTML","format","shorten","forwardedContent","replyContent","startsWith","forwarding","toPlainText","isPlainText","toMarkdown","def","isValid","txt_type","hasAttachments","callback","count","hasEntities","styles","sanitizeEntities","getDownloadUrl","entData","isProcessing","getPreviewUrl","getEntitySize","getEntityMimeType","tagName","attrValue","getContentType","mimeType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","value","AccessMode","constructor","acs","given","decode","want","mode","side","flag","Error","_BITMASK","_NONE","bitmask","_JOIN","_READ","_WRITE","_PRES","_APPROVE","_SHARE","_DELETE","_OWNER","m0","bit","charAt","toUpperCase","encode","_INVALID","res","update","upd","action","val0","parts","a1","a2","toString","jsonHelper","setMode","m","updateMode","u","getMode","setGiven","updateGiven","getGiven","setWant","w","updateWant","getWant","getMissing","getExcessive","updateAll","isOwner","isPresencer","isMuted","isJoiner","isReader","isWriter","isApprover","isAdmin","isSharer","isDeleter","VERSION","LIBRARY","TOPIC_NEW","TOPIC_NEW_CHAN","TOPIC_ME","TOPIC_FND","TOPIC_GRP","LOCAL_SEQID","DEL_CHAR","TAG_ALIAS","CommError","code","super","jsonParseHelper","date","Date","isNaN","isUrlRelative","isValidDate","getTime","mergeObj","ignore","mergeToCache","cache","newval","simplify","getOwnPropertyNames","normalizeRanges","maxSeq","r1","r2","low","hi","reduce","out","prev","Math","max","listToRanges","list","WebSocketProvider","XHRProvider","NETWORK_ERROR_TEXT","NETWORK_USER","NETWORK_USER_TEXT","makeBaseUrl","host","protocol","version","apiKey","Connection","static","secure","autoreconnect","initialized","config","version_","autoreconnect_","transport","setNetworkProviders","wsProvider","xhrProvider","l","connect","host_","force","Promise","reject","reconnect","disconnect","sendText","msg","isConnected","probe","backoffReset","clearTimeout","timeout","pow","random","onAutoreconnectIteration","setTimeout","prom","catch","_lpURL","_poller","_sender","lp_poller","url_","resolve","poller","promiseCompleted","onreadystatechange","evt","readyState","status","pkt","JSON","responseText","ctrl","sid","send","onOpen","onMessage","onDisconnect","abort","sender","lp_sender","OPEN","conn","onerror","onopen","onclose","onmessage","NETWORK_ERROR","DB_NAME","IDBProvider","DB","db","disabled","onError","source","trx","transaction","event","error","objectStore","getAll","onsuccess","topic","initDatabase","req","onversionchange","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","dellog","indexNames","createIndex","deleteDatabase","onblocked","isReady","updTopic","oncomplete","put","commit","markTopicAsDeleted","deleted","_deleted","remTopic","delete","IDBKeyRange","only","bound","Number","MAX_SAFE_INTEGER","mapTopics","deserializeTopic","updUser","pub","arguments","public","remUser","mapUsers","getUser","user","updSubscription","topicName","sub","mapSubscriptions","addMessage","add","updMessageStatus","seq","_status","remMessages","to","range","readMessages","query","msgs","since","before","openCursor","cursor","continue","addDelLog","delId","clear","readDelLog","entry","maxDelId","f","tags","_tags","setAccessMode","read","unread","getAccessMode","setDatabaseProvider","idbProvider","IndexedDBProvider","LargeFileHelper","tinode","_tinode","_version","_apiKey","_authToken","getAuthToken","xhr","uploadWithBaseUrl","baseUrl","avatarFor","onProgress","onSuccess","onFailure","base","endsWith","instance","setRequestHeader","token","toResolve","toReject","upload","onprogress","lengthComputable","loaded","total","onload","response","statusText","onabort","form","FormData","set","getNextUniqueId","_secure","_host","download","relativeUrl","mimetype","relUrl","location","origin","searchParams","substring","addURLParam","responseType","link","document","createElement","display","setAttribute","appendChild","click","removeChild","revokeObjectURL","reader","FileReader","readAsText","cancel","setNetworkProvider","MetaGetBuilder","what","updated","isP2PType","_lastSubsUpdate","withData","withLaterData","_maxSeq","withDataRanges","withDataList","withEarlierData","_minSeq","withDesc","ims","withLaterDesc","withSub","userOrTopic","opts","getType","withOneSub","withLaterOneSub","withLaterSub","withTags","withCred","withAux","withDel","withLaterDel","_maxDel","extract","build","CBuffer","buffer","compare_","unique_","elem","exact","pivot","found","splice","getAt","getLast","findLast","insert","delAt","delRange","reset","startIdx","beforeIdx","min","find","nearest","isEmpty","Topic","callbacks","created","touched","private","trusted","_users","_queuedSeqId","Const","_noEarlierMsgs","_recvNotificationTimer","_credentials","_aux","_messageVersions","_messages","_attached","_new","_delayedLeaveTimer","onData","onMeta","onPres","onInfo","onMetaDesc","onMetaSub","onSubsUpdated","onTagsUpdated","onCredsUpdated","onAuxUpdated","onDeleteTopic","onAllMessagesReceived","topicType","isMeTopicName","isSelfTopicName","isGroupTopicName","isP2PTopicName","isCommTopicName","isNewGroupTopicName","isChannelTopicName","head","replace","isSubscribed","subscribe","getParams","setParams","_cacheDelSelf","_cachePutSelf","ts","me","getMeTopic","desc","_noForwarding","_processMetaDesc","createMessage","noEcho","publish","publishMessage","_sending","_failed","swapMessageId","_maybeUpdateMessageVersionsCache","_routeData","publishDraft","_getQueuedSeqId","getCurrentUserID","noecho","_db","_cancelled","_fatal","leave","unsub","_resetSub","_gone","leaveDelayed","delay","getMeta","getMessagesPage","gaps","newer","startMetaQuery","_loadMessages","msgHasMoreMessages","getPinnedMessages","pins","aux","remains","setMeta","t","trim","toLowerCase","item","pos","ary","normalizeArray","_processMetaSubs","_processMetaTags","cred","_processMetaCreds","_processMetaAux","subscriber","am","invite","archive","arch","pinMessage","pin","pinned","changed","delMessages","hard","tosend","del","rec","flushMessageRange","flushMessage","delMessagesAll","hardDel","_all","delMessagesList","delMessagesEdits","messageVersions","delTopic","delSubscription","note","_updateMyReadRecv","_refreshContact","noteRecv","noteRead","noteKeyPress","noteRecording","payload","oldVal","doUpdate","recv","userDesc","_cacheGetUser","p2pPeerDesc","subscribers","cb","alias","origSeq","versions","messages","sinceId","beforeId","unused1","unused2","latest","latestMsgVersion","_origTs","_origSeq","findMessage","latestMessage","maxMsgSeq","minMsgSeq","maxClearId","messageCount","queuedMessages","msgReceiptCount","msgReadCount","msgRecvCount","gap","p","expected","isNewMessage","seqId","fromId","untilId","newSeqId","numMessages","cancelSend","msgStatus","getDefaultAccess","defacs","isArchived","isMeType","isSelfType","isChannelType","isGroupType","isCommType","isMe","targetSeq","parseInt","targetMsg","outgoing","webrtc","incoming","vc","_routeInfo","_routeMeta","meta","_processDelMessages","delseq","_routePres","pres","online","isTopicCached","dacs","info","subs","_updateCachedUser","creds","_allMessagesReceived","cached","_cachePutUser","_updateReceived","TopicFnd","_contacts","updateCount","indexBy","getPrototypeOf","checkTagUniqueness","caller","contacts","TopicMe","onContactUpdate","turnOff","_myUID","cont","seen","when","cacheRemTopic","getTopic","cr","findIndex","meth","done","resp","cacheGetTopic","tgt","ua","dummy","delCredential","method","getContact","getCredentials","b64EncodeUnicode","btoa","encodeURIComponent","p1","String","fromCharCode","jsonBuildHelper","pad","sp","repeat","millis","getUTCMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","rfc3339DateString","jsonLoggerHelper","WebSocket","XMLHttpRequest","indexedDB","chars","global","input","output","charCode","bc","bs","DBCache","initForNonBrowserApp","Tinode","_appName","_browser","_platform","_hwos","_humanLanguage","_loggingEnabled","_trimLongStrings","_authenticated","_login","_inPacketCount","_messageId","floor","_serverInfo","_deviceToken","_pendingPromises","_expirePromises","_connection","_persist","_cache","onComplete","appName","platform","navigator","product","reactnative","priority","tmp","substr","tokens","m2","v","minor","getBrowserInfo","userAgent","language","detectTransport","promise","persist","all","args","dateString","console","log","onOK","errorText","stringify","onRawMessage","onNetworkProbe","onCtrlMessage","onMetaMessage","onDataMessage","onPresMessage","onInfoMessage","setInterval","expires","hello","clearInterval","func","_cacheDelUser","onLogin","credential","getVersion","getLibrary","isNullValue","isServerAssignedSeq","isValidTagValue","tagSplit","splitAt","prefix","setUniqueTag","uniqueTag","clearTagPrefix","tagByPrefix","clearStorage","initStorage","networkProbe","isAuthenticated","authorizeURL","parsed","account","scheme","secret","login","acc","tmpscheme","tmpsecret","extra","createAccount","createAccountBasic","username","password","updateAccountBasic","onConnect","setDeviceToken","dt","sent","loginBasic","uname","loginToken","requestResetAuthSecret","now","setAuthToken","dft","oobNotification","xfrom","finally","modeGiven","modeWant","delCurrentUser","newGroupTopicName","isChan","getFndTopic","getLargeFileHelper","getCurrentLogin","getServerInfo","report","getServerParam","defaultValue","enableLogging","enabled","trimLongStrings","setHumanLanguage","hl","isTopicOnline","getTopicAccessMode","wantAkn","onWebsocketOpen","MESSAGE_STATUS_NONE","MESSAGE_STATUS_QUEUED","MESSAGE_STATUS_SENDING","MESSAGE_STATUS_FAILED","MESSAGE_STATUS_FATAL","MESSAGE_STATUS_SENT","MESSAGE_STATUS_RECEIVED","MESSAGE_STATUS_READ","MESSAGE_STATUS_TO_ME","MAX_MESSAGE_SIZE","MAX_SUBSCRIBER_COUNT","MIN_TAG_LENGTH","MAX_TAG_LENGTH","MAX_TAG_COUNT","MAX_FILE_UPLOAD_SIZE","REQ_CRED_VALIDATORS","MSG_DELETE_AGE","URI_TOPIC_ID_PREFIX","TAG_EMAIL","TAG_PHONE"],"sourceRoot":""}