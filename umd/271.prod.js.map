{"version":3,"file":"271.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/credential-edit.jsx","webpack://tinode-webapp/./src/views/account-settings-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Enter one credential at a time.\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport PhoneEdit from './phone-edit.jsx';\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\n\nconst messages = defineMessages({\n  password_reset_email_sent: {\n    id: 'password_reset_email_sent',\n    defaultMessage: 'An email with security code has been sent.',\n    description: 'Notification that the email with password reset instructions has been sent'\n  },\n  password_reset_sms_sent: {\n    id: 'password_reset_sms_sent',\n    defaultMessage: 'A text message with security code has been sent.',\n    description: 'Notification that the SMS with password reset instructions has been sent'\n  },\n});\n\nclass CredentialEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      code: '',\n      tel: '',\n      email: '',\n      sent: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePhoneChange = this.handlePhoneChange.bind(this);\n    this.handleCodeChange = this.handleCodeChange.bind(this);\n  }\n\n  static formatPhoneNumber(raw) {\n    let number;\n    try {\n      number = parsePhoneNumber(raw);\n    } catch (err) {}\n    return number ? number.formatInternational() : raw;\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePhoneChange(number) {\n    this.setState({tel: number});\n  }\n\n  handleCodeChange(e) {\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const value = this.props.method == 'email' ? this.state.email : this.state.tel;\n    if (this.state.code) {\n      this.props.onError(null);\n      this.props.onCredConfirm(this.props.method, this.state.code);\n    } else if (value) {\n      this.props.onCredAdd(this.props.method, value);\n      this.setState({sent: true});\n      const msg = this.props.method == 'email' ? messages.password_reset_email_sent : messages.password_reset_sms_sent;\n      this.props.onError(this.props.intl.formatMessage(msg), 'info');\n    }\n  }\n\n  render() {\n    const readyForCode = this.state.sent || !this.props.done;\n    const rawValue = readyForCode ? (this.state.tel || this.state.email) : this.props.val;\n    const formattedValue = this.props.method == 'tel' ? CredentialEdit.formatPhoneNumber(rawValue) : rawValue;\n\n    const changeEmail = (\n      <><div className=\"panel-form-row\">\n        <label className=\"large\"><FormattedMessage id=\"change_email\" defaultMessage=\"Change email\"\n          description=\"Prompt to change current email\" /></label>\n      </div>\n      <div className=\"group\">\n        <label className=\"small gray\">\n          <FormattedMessage id=\"current_email\" defaultMessage=\"Current email\" description=\"Label for old email\" />\n        </label>\n      </div></>);\n\n    const changePhone = (\n      <><div className=\"panel-form-row\">\n      <label className=\"large\"><FormattedMessage id=\"change_phone\" defaultMessage=\"Change phone number\"\n        description=\"Prompt to change current phone number\"/></label>\n      </div>\n      <div className=\"group\">\n        <label className=\"small gray\">\n          <FormattedMessage id=\"current_phone\" defaultMessage=\"Current phone number\" description=\"Label for old phone\" />\n        </label>\n      </div></>\n    );\n\n    const newEmailLabel = (<label className=\"small gray\">\n        <FormattedMessage id=\"new_email\" defaultMessage=\"New email\"\n          description=\"Prompt for entering a new email\" />\n      </label>);\n\n    const newEmailInput = (\n      <><div className=\"group\">{newEmailLabel}</div>\n      <div className=\"group\">\n        <FormattedMessage id=\"email_prompt\" defaultMessage=\"Email, e.g. jdoe@example.com\"\n          description=\"Input placeholder for email entry\">{\n          (email_prompt) => <input type=\"email\" placeholder={email_prompt} autoComplete=\"email\"\n            value={this.state.email} onChange={this.handleEmailChange} required/>\n        }</FormattedMessage>\n      </div></>\n    );\n\n    const newPhoneLabel = (<label className=\"small gray\">\n        <FormattedMessage id=\"new_phone_number\" defaultMessage=\"New phone number\"\n        description=\"Prompt for entering a new telephone number\" />\n      </label>);\n\n    const newPhoneInput = (\n      <><div className=\"group\">{newPhoneLabel}</div>\n      <div className=\"panel-form-row\">\n        <PhoneEdit\n          autoFocus={true}\n          onShowCountrySelector={this.props.onShowCountrySelector}\n          onSubmit={this.handlePhoneChange} />\n      </div></>\n    );\n\n    const codeInput = (\n      <><div className=\"group\">\n        <label className=\"small gray\"><FormattedMessage id=\"enter_confirmation_code_prompt\" defaultMessage=\"Confirmation code\"\n            description=\"Request to enter confirmation code\" /></label>\n      </div>\n      <div className=\"group\">\n        <FormattedMessage id=\"numeric_confirmation_code_prompt\" defaultMessage=\"Numbers only\"\n          description=\"Prompt for numeric conformation code\">{\n          (numbers_only) => <input type=\"text\" placeholder={numbers_only} maxLength={10}\n          value={this.state.code} onChange={this.handleCodeChange} required/>\n        }</FormattedMessage>\n      </div></>\n    );\n\n    return (<form className=\"panel-form-column\" onSubmit={this.handleSubmit}>\n      {readyForCode ?\n        (this.props.method == 'email' ? newEmailLabel : this.props.method == 'tel' ? newPhoneLabel : null)\n        :\n        (this.props.method == 'email' ? changeEmail : this.props.method == 'tel' ? changePhone : null)\n      }\n      <div className=\"panel-form-row\">\n        <tt className=\"quoted\">{formattedValue}</tt>\n      </div>\n      {readyForCode ?\n        null\n        :\n        (this.props.method == 'email' ? newEmailInput : this.props.method == 'tel' ? newPhoneInput : null)\n      }\n      {readyForCode ? codeInput : null}\n      <div className=\"dialog-buttons\">\n        <button className=\"secondary\" onClick={this.props.onCancel}>\n          <FormattedMessage id=\"button_cancel\" defaultMessage=\"Cancel\" description=\"Button [Cancel]\" />\n        </button>\n        <button className=\"primary\" type=\"submit\" >\n          <FormattedMessage id=\"button_ok\" defaultMessage=\"OK\" description=\"Button [OK]\" />\n        </button>\n      </div>\n    </form>);\n  }\n}\n\nexport default injectIntl(CredentialEdit);\n","// Edit account parameters.\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\n\nimport AvatarUpload from '../widgets/avatar-upload.jsx';\nimport BadgeList from '../widgets/badge-list.jsx';\n\nimport { makeImageUrl } from '../lib/blob-helpers.js';\nimport { MAX_TITLE_LENGTH, MAX_TOPIC_DESCRIPTION_LENGTH } from '../config.js';\nimport CredentialEdit from '../widgets/credential-edit.jsx';\n\nfunction _clip(str, length) {\n  return str && str.substring(0, length);\n}\n\nexport default class AccountSettingsView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const me = this.props.tinode.getMeTopic();\n    this.state = {\n      fullName: _clip(me.public ? me.public.fn : undefined, MAX_TITLE_LENGTH),\n      description: _clip(me.public ? me.public.note : undefined, MAX_TOPIC_DESCRIPTION_LENGTH),\n      avatar: makeImageUrl(me.public ? me.public.photo : null),\n      credentials: me.getCredentials() || [],\n      credEdit: undefined,\n      alias: ((me.tags() || []).find(tag => tag.startsWith('alias:')) || '').substring(6),\n    };\n  }\n\n  componentDidMount() {\n    const me = this.props.tinode.getMeTopic();\n    me.onCredsUpdated = _ => this.setState({credentials: me.getCredentials()});\n  }\n\n  componentWillUnmount() {\n    const me = this.props.tinode.getMeTopic();\n    me.onCredsUpdated = null;\n  }\n\n  render() {\n    if (this.state.credEdit) {\n      return (\n        <CredentialEdit\n          method={this.state.credEdit.meth}\n          val={this.state.credEdit.val}\n          done={this.state.credEdit.done}\n          onShowCountrySelector={this.props.onShowCountrySelector}\n          onCredAdd={this.props.onCredAdd}\n          onCredConfirm={this.props.onCredConfirm}\n          onCancel={_ => this.setState({credEdit: undefined})}\n          onError={this.props.onError} />\n      );\n    }\n\n    // Count how many times each method is validated.\n    const validated = {};\n    this.state.credentials.forEach(cred => {\n      if (cred.done) {\n        validated[cred.meth] = (validated[cred.meth] || 0) + 1;\n      }\n    });\n\n    const credentials = [];\n    this.state.credentials.forEach((cred, idx) => {\n      if (!['email', 'tel'].includes(cred.meth)) {\n        // Skip unknown methods.\n        return ;\n      }\n\n      let val = cred.val\n      if (cred.meth == 'tel') {\n        const number = parsePhoneNumber(cred.val);\n        val = number ? number.formatInternational() : cred.val;\n      }\n\n      credentials.push(\n        <div className=\"group quoted\" key={idx}>\n          <tt className=\"clickable\" onClick={e => {e.preventDefault(); this.setState({credEdit: cred});}}>{val}</tt>\n          <span> {cred.done ? null : <i className=\"material-icons\">pending</i>}&nbsp;\n            {!cred.done || validated[cred.meth] > 1 || this.props.reqCredMethod != cred.meth ?\n              <a href=\"#\" onClick={e => {e.preventDefault(); this.props.onCredDelete(cred.meth, cred.val);}}>\n                <i className=\"material-icons\">delete</i>\n              </a>\n            :\n            null}\n          </span>\n        </div>);\n    });\n    if (credentials.length > 0) {\n      // Add title as the first element.\n      credentials.unshift(\n        <label className=\"small\" key={'title'}>\n          <FormattedMessage id=\"label_user_contacts\" defaultMessage=\"Contacts\"\n            description=\"Label for user contacts\" />\n        </label>);\n    }\n\n    return (\n      <div className=\"scrollable-panel\">\n        <div className=\"panel-form-column\">\n          <a href=\"#\" className=\"flat-button float-right\" onClick={e => {e.preventDefault(); this.props.onNavigate('general');}}>\n            <i className=\"material-icons\">edit</i>&nbsp;\n            <FormattedMessage id=\"button_edit\" defaultMessage=\"Edit\" description=\"Call to action [Edit]\" />\n          </a>\n          <center>\n            <AvatarUpload\n              tinode={this.props.tinode}\n              avatar={this.state.avatar}\n              readOnly={true}\n              uid={this.props.myUserId}\n              title={this.state.fullName} />\n          </center>\n          <div className=\"group\">\n            <label className=\"small\">\n              <FormattedMessage id=\"label_your_name\" defaultMessage=\"Your name\"\n                description=\"Label for full name editing\" />\n            </label>\n            <div className=\"large ellipsized\">{this.state.fullName}</div>\n          </div>\n          <div className=\"group\">\n            <label className=\"small\"><FormattedMessage id=\"label_user_id\" defaultMessage=\"ID:\"\n              description=\"Label for user address (ID)\" /></label>&nbsp;\n            <tt>{this.props.myUserId}</tt>\n          </div>\n          {this.state.alias ?\n          <div className=\"group\">\n            <label className=\"small\"><FormattedMessage id=\"label_alias\" defaultMessage=\"Alias:\"\n              description=\"Label for user or topic alias\" /></label>&nbsp;\n            <tt>@{this.state.alias}</tt>\n          </div> : null}\n          <div className=\"group\">\n            <BadgeList trustedBadges={this.props.trustedBadges} />\n          </div>\n          {this.state.description ?\n            <div className=\"group\">\n              <label className=\"small\">\n                <FormattedMessage id=\"label_description\" defaultMessage=\"Description\"\n                  description=\"Label for editing topic description\" />\n              </label>\n              <div className=\"quoted\">{this.state.description}</div>\n            </div> : null}\n        </div>\n        <div className=\"hr\" />\n        <div className=\"panel-form-column\">\n          <div className=\"group\">{credentials}</div>\n        </div>\n        <div className=\"hr\" />\n        <div className=\"panel-form-column\">\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('acc_general');}}>\n            <i className=\"material-icons\">tune</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_general\"\n              defaultMessage=\"General\" description=\"Sidepanel title for AccGeneralView.\" />\n          </a>\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('notif');}}>\n            <i className=\"material-icons\">notifications</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_notifications\"\n              defaultMessage=\"Notifications\" description=\"Sidepanel title for AccNotificationsView.\" />\n          </a>\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('security');}}>\n            <i className=\"material-icons\">security</i>&nbsp;<FormattedMessage id=\"button_security\"\n              defaultMessage=\"Security\" description=\"Navigaton button for security panel.\" />\n          </a>\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('support');}}>\n            <i className=\"material-icons\">contact_support</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_support\"\n              defaultMessage=\"Support\" description=\"Sidepanel title for AccSupportView.\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n};\n","// Editor for a phone number.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nconst messages = defineMessages({\n  mobile_number_required: {\n    id: 'mobile_number_required',\n    defaultMessage: 'Mobile phone number required',\n    description: 'Error message'\n  }\n});\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    const prefix = `+${this.state.dialCode}`;\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\n    formatted = formatted.substring(prefix.length).trim();\n    this.setState({localNumber: formatted});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\n    let number = null;\n    try {\n      number = parsePhoneNumber(`+${raw}`);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\n      return;\n    }\n\n    this.inputField.setCustomValidity('');\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["messages","defineMessages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","CredentialEdit","React","constructor","props","super","this","state","code","tel","email","sent","handleSubmit","bind","handleEmailChange","handlePhoneChange","handleCodeChange","formatPhoneNumber","raw","number","parsePhoneNumber","err","formatInternational","e","setState","target","value","replace","preventDefault","method","onError","onCredConfirm","onCredAdd","msg","intl","formatMessage","render","readyForCode","done","rawValue","val","formattedValue","changeEmail","className","FormattedMessage","changePhone","newEmailLabel","newEmailInput","email_prompt","type","placeholder","autoComplete","onChange","required","newPhoneLabel","newPhoneInput","PhoneEdit","autoFocus","onShowCountrySelector","onSubmit","codeInput","numbers_only","maxLength","onClick","onCancel","injectIntl","_clip","str","length","substring","AccountSettingsView","me","tinode","getMeTopic","fullName","public","fn","undefined","MAX_TITLE_LENGTH","description","note","MAX_TOPIC_DESCRIPTION_LENGTH","avatar","makeImageUrl","photo","credentials","getCredentials","credEdit","alias","tags","find","tag","startsWith","componentDidMount","onCredsUpdated","_","componentWillUnmount","meth","validated","forEach","cred","idx","includes","push","key","reqCredMethod","href","onCredDelete","unshift","onNavigate","AvatarUpload","readOnly","uid","myUserId","title","BadgeList","trustedBadges","mobile_number_required","codeMap","dcodes","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","trim","isValid","inputField","setCustomValidity","format","sample","getExampleNumber","examples","flagEmoji","ref","onKeyDown","onBlur"],"sourceRoot":""}